
D21_SSD1306_12864_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003048  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00003048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000474  20000064  000030ac  00020064  2**2
                  ALLOC
  3 .stack        00002000  200004d8  00003520  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023081  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ee1  00000000  00000000  00043166  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000af89  00000000  00000000  00046047  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a08  00000000  00000000  00050fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e18  00000000  00000000  000519d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b1a8  00000000  00000000  000527f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ff07  00000000  00000000  0006d998  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088bdf  00000000  00000000  0007d89f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002048  00000000  00000000  00106480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 24 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .$. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00003048 	.word	0x00003048

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00003048 	.word	0x00003048
     10c:	00003048 	.word	0x00003048
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	stdio_redirect_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	00000351 	.word	0x00000351
     124:	00001649 	.word	0x00001649

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a2a      	ldr	r2, [pc, #168]	; (1d8 <Reset_Handler+0xac>)
     130:	4b2a      	ldr	r3, [pc, #168]	; (1dc <Reset_Handler+0xb0>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b29      	ldr	r3, [pc, #164]	; (1e0 <Reset_Handler+0xb4>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a29      	ldr	r2, [pc, #164]	; (1e4 <Reset_Handler+0xb8>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4823      	ldr	r0, [pc, #140]	; (1dc <Reset_Handler+0xb0>)
     14e:	4922      	ldr	r1, [pc, #136]	; (1d8 <Reset_Handler+0xac>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xbc>)
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xc0>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xc0>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a1d      	ldr	r2, [pc, #116]	; (1f0 <Reset_Handler+0xc4>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b1d      	ldr	r3, [pc, #116]	; (1f4 <Reset_Handler+0xc8>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     182:	39fd      	subs	r1, #253	; 0xfd
     184:	2390      	movs	r3, #144	; 0x90
     186:	005b      	lsls	r3, r3, #1
     188:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <Reset_Handler+0xcc>)
     18a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18c:	4a1b      	ldr	r2, [pc, #108]	; (1fc <Reset_Handler+0xd0>)
     18e:	78d3      	ldrb	r3, [r2, #3]
     190:	2503      	movs	r5, #3
     192:	43ab      	bics	r3, r5
     194:	2402      	movs	r4, #2
     196:	4323      	orrs	r3, r4
     198:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	270c      	movs	r7, #12
     19e:	43bb      	bics	r3, r7
     1a0:	2608      	movs	r6, #8
     1a2:	4333      	orrs	r3, r6
     1a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xd4>)
     1a8:	7b98      	ldrb	r0, [r3, #14]
     1aa:	2230      	movs	r2, #48	; 0x30
     1ac:	4390      	bics	r0, r2
     1ae:	2220      	movs	r2, #32
     1b0:	4310      	orrs	r0, r2
     1b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b4:	7b99      	ldrb	r1, [r3, #14]
     1b6:	43b9      	bics	r1, r7
     1b8:	4331      	orrs	r1, r6
     1ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1bc:	7b9a      	ldrb	r2, [r3, #14]
     1be:	43aa      	bics	r2, r5
     1c0:	4322      	orrs	r2, r4
     1c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0f      	ldr	r2, [pc, #60]	; (204 <Reset_Handler+0xd8>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <Reset_Handler+0xdc>)
     1d0:	4798      	blx	r3
        main();
     1d2:	4b0e      	ldr	r3, [pc, #56]	; (20c <Reset_Handler+0xe0>)
     1d4:	4798      	blx	r3
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xaa>
     1d8:	00003048 	.word	0x00003048
     1dc:	20000000 	.word	0x20000000
     1e0:	20000064 	.word	0x20000064
     1e4:	20000004 	.word	0x20000004
     1e8:	20000064 	.word	0x20000064
     1ec:	200004d8 	.word	0x200004d8
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00001781 	.word	0x00001781
     20c:	00000fe5 	.word	0x00000fe5

00000210 <I2C0_PORT_init>:
struct i2c_m_sync_desc I2C0;

struct usart_sync_descriptor TARGET_IO;

void I2C0_PORT_init(void)
{
     210:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     212:	4b12      	ldr	r3, [pc, #72]	; (25c <I2C0_PORT_init+0x4c>)
     214:	2048      	movs	r0, #72	; 0x48
     216:	5c19      	ldrb	r1, [r3, r0]
     218:	2204      	movs	r2, #4
     21a:	4391      	bics	r1, r2
     21c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     21e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     220:	2501      	movs	r5, #1
     222:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     224:	2401      	movs	r4, #1
     226:	4321      	orrs	r1, r4
     228:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     22a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     22c:	3814      	subs	r0, #20
     22e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     230:	260f      	movs	r6, #15
     232:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     234:	3e0d      	subs	r6, #13
     236:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     238:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     23a:	2149      	movs	r1, #73	; 0x49
     23c:	5c5e      	ldrb	r6, [r3, r1]
     23e:	4396      	bics	r6, r2
     240:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     242:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     244:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     246:	4322      	orrs	r2, r4
     248:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     24a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     24c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     24e:	393a      	subs	r1, #58	; 0x3a
     250:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     252:	3111      	adds	r1, #17
     254:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     256:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09C_SERCOM0_PAD1);
}
     258:	bd70      	pop	{r4, r5, r6, pc}
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	41004400 	.word	0x41004400

00000260 <I2C0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     260:	4a05      	ldr	r2, [pc, #20]	; (278 <I2C0_CLOCK_init+0x18>)
     262:	6a13      	ldr	r3, [r2, #32]
     264:	2104      	movs	r1, #4
     266:	430b      	orrs	r3, r1
     268:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     26a:	4b04      	ldr	r3, [pc, #16]	; (27c <I2C0_CLOCK_init+0x1c>)
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <I2C0_CLOCK_init+0x20>)
     26e:	805a      	strh	r2, [r3, #2]
     270:	4a04      	ldr	r2, [pc, #16]	; (284 <I2C0_CLOCK_init+0x24>)
     272:	805a      	strh	r2, [r3, #2]
void I2C0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	_gclk_enable_channel(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	40000400 	.word	0x40000400
     27c:	40000c00 	.word	0x40000c00
     280:	00004014 	.word	0x00004014
     284:	00004313 	.word	0x00004313

00000288 <I2C0_init>:

void I2C0_init(void)
{
     288:	b510      	push	{r4, lr}
	I2C0_CLOCK_init();
     28a:	4b04      	ldr	r3, [pc, #16]	; (29c <I2C0_init+0x14>)
     28c:	4798      	blx	r3
	i2c_m_sync_init(&I2C0, SERCOM0);
     28e:	4904      	ldr	r1, [pc, #16]	; (2a0 <I2C0_init+0x18>)
     290:	4804      	ldr	r0, [pc, #16]	; (2a4 <I2C0_init+0x1c>)
     292:	4b05      	ldr	r3, [pc, #20]	; (2a8 <I2C0_init+0x20>)
     294:	4798      	blx	r3
	I2C0_PORT_init();
     296:	4b05      	ldr	r3, [pc, #20]	; (2ac <I2C0_init+0x24>)
     298:	4798      	blx	r3
}
     29a:	bd10      	pop	{r4, pc}
     29c:	00000261 	.word	0x00000261
     2a0:	42000800 	.word	0x42000800
     2a4:	20000094 	.word	0x20000094
     2a8:	00000435 	.word	0x00000435
     2ac:	00000211 	.word	0x00000211

000002b0 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     2b0:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <TARGET_IO_PORT_init+0x3c>)
     2b4:	2256      	movs	r2, #86	; 0x56
     2b6:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b8:	2501      	movs	r5, #1
     2ba:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2bc:	2401      	movs	r4, #1
     2be:	4321      	orrs	r1, r4
     2c0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2c2:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2c4:	203b      	movs	r0, #59	; 0x3b
     2c6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2c8:	3a47      	subs	r2, #71	; 0x47
     2ca:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2cc:	3a0d      	subs	r2, #13
     2ce:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2d0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d2:	2157      	movs	r1, #87	; 0x57
     2d4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2d8:	4322      	orrs	r2, r4
     2da:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2dc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2de:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2e0:	3948      	subs	r1, #72	; 0x48
     2e2:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2e4:	3111      	adds	r1, #17
     2e6:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2e8:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     2ea:	bd30      	pop	{r4, r5, pc}
     2ec:	41004400 	.word	0x41004400

000002f0 <TARGET_IO_CLOCK_init>:
     2f0:	4a04      	ldr	r2, [pc, #16]	; (304 <TARGET_IO_CLOCK_init+0x14>)
     2f2:	6a13      	ldr	r3, [r2, #32]
     2f4:	2120      	movs	r1, #32
     2f6:	430b      	orrs	r3, r1
     2f8:	6213      	str	r3, [r2, #32]
     2fa:	4a03      	ldr	r2, [pc, #12]	; (308 <TARGET_IO_CLOCK_init+0x18>)
     2fc:	4b03      	ldr	r3, [pc, #12]	; (30c <TARGET_IO_CLOCK_init+0x1c>)
     2fe:	805a      	strh	r2, [r3, #2]

void TARGET_IO_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     300:	4770      	bx	lr
     302:	46c0      	nop			; (mov r8, r8)
     304:	40000400 	.word	0x40000400
     308:	00004017 	.word	0x00004017
     30c:	40000c00 	.word	0x40000c00

00000310 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     310:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     312:	4b05      	ldr	r3, [pc, #20]	; (328 <TARGET_IO_init+0x18>)
     314:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
     316:	2200      	movs	r2, #0
     318:	4904      	ldr	r1, [pc, #16]	; (32c <TARGET_IO_init+0x1c>)
     31a:	4805      	ldr	r0, [pc, #20]	; (330 <TARGET_IO_init+0x20>)
     31c:	4b05      	ldr	r3, [pc, #20]	; (334 <TARGET_IO_init+0x24>)
     31e:	4798      	blx	r3
	TARGET_IO_PORT_init();
     320:	4b05      	ldr	r3, [pc, #20]	; (338 <TARGET_IO_init+0x28>)
     322:	4798      	blx	r3
}
     324:	bd10      	pop	{r4, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	000002f1 	.word	0x000002f1
     32c:	42001400 	.word	0x42001400
     330:	200000b4 	.word	0x200000b4
     334:	000005f5 	.word	0x000005f5
     338:	000002b1 	.word	0x000002b1

0000033c <delay_driver_init>:

void delay_driver_init(void)
{
     33c:	b510      	push	{r4, lr}
	delay_init(SysTick);
     33e:	4802      	ldr	r0, [pc, #8]	; (348 <delay_driver_init+0xc>)
     340:	4b02      	ldr	r3, [pc, #8]	; (34c <delay_driver_init+0x10>)
     342:	4798      	blx	r3
}
     344:	bd10      	pop	{r4, pc}
     346:	46c0      	nop			; (mov r8, r8)
     348:	e000e010 	.word	0xe000e010
     34c:	000003a1 	.word	0x000003a1

00000350 <system_init>:

void system_init(void)
{
     350:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     352:	4b0d      	ldr	r3, [pc, #52]	; (388 <system_init+0x38>)
     354:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     356:	23c0      	movs	r3, #192	; 0xc0
     358:	05db      	lsls	r3, r3, #23
     35a:	2280      	movs	r2, #128	; 0x80
     35c:	05d2      	lsls	r2, r2, #23
     35e:	2194      	movs	r1, #148	; 0x94
     360:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     362:	390c      	subs	r1, #12
     364:	505a      	str	r2, [r3, r1]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     366:	4b09      	ldr	r3, [pc, #36]	; (38c <system_init+0x3c>)
     368:	3120      	adds	r1, #32
     36a:	505a      	str	r2, [r3, r1]
     36c:	4a08      	ldr	r2, [pc, #32]	; (390 <system_init+0x40>)
     36e:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     370:	3136      	adds	r1, #54	; 0x36
     372:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     374:	2001      	movs	r0, #1
     376:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     378:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	I2C0_init();
     37a:	4b06      	ldr	r3, [pc, #24]	; (394 <system_init+0x44>)
     37c:	4798      	blx	r3

	TARGET_IO_init();
     37e:	4b06      	ldr	r3, [pc, #24]	; (398 <system_init+0x48>)
     380:	4798      	blx	r3

	delay_driver_init();
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <system_init+0x4c>)
     384:	4798      	blx	r3
}
     386:	bd10      	pop	{r4, pc}
     388:	000006b5 	.word	0x000006b5
     38c:	41004400 	.word	0x41004400
     390:	c0004000 	.word	0xc0004000
     394:	00000289 	.word	0x00000289
     398:	00000311 	.word	0x00000311
     39c:	0000033d 	.word	0x0000033d

000003a0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     3a0:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     3a2:	4b02      	ldr	r3, [pc, #8]	; (3ac <delay_init+0xc>)
     3a4:	6018      	str	r0, [r3, #0]
     3a6:	4b02      	ldr	r3, [pc, #8]	; (3b0 <delay_init+0x10>)
     3a8:	4798      	blx	r3
}
     3aa:	bd10      	pop	{r4, pc}
     3ac:	20000080 	.word	0x20000080
     3b0:	00000f7d 	.word	0x00000f7d

000003b4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     3b4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     3b6:	4b04      	ldr	r3, [pc, #16]	; (3c8 <delay_ms+0x14>)
     3b8:	681c      	ldr	r4, [r3, #0]
     3ba:	4b04      	ldr	r3, [pc, #16]	; (3cc <delay_ms+0x18>)
     3bc:	4798      	blx	r3
     3be:	0001      	movs	r1, r0
     3c0:	0020      	movs	r0, r4
     3c2:	4b03      	ldr	r3, [pc, #12]	; (3d0 <delay_ms+0x1c>)
     3c4:	4798      	blx	r3
}
     3c6:	bd10      	pop	{r4, pc}
     3c8:	20000080 	.word	0x20000080
     3cc:	000006ad 	.word	0x000006ad
     3d0:	00000f91 	.word	0x00000f91

000003d4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     3d4:	b510      	push	{r4, lr}
     3d6:	b084      	sub	sp, #16
     3d8:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     3da:	ab01      	add	r3, sp, #4
     3dc:	3814      	subs	r0, #20
     3de:	8b82      	ldrh	r2, [r0, #28]
     3e0:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     3e2:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     3e4:	4a05      	ldr	r2, [pc, #20]	; (3fc <i2c_m_sync_write+0x28>)
     3e6:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     3e8:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     3ea:	0019      	movs	r1, r3
     3ec:	4b04      	ldr	r3, [pc, #16]	; (400 <i2c_m_sync_write+0x2c>)
     3ee:	4798      	blx	r3

	if (ret) {
     3f0:	2800      	cmp	r0, #0
     3f2:	d100      	bne.n	3f6 <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
     3f4:	0020      	movs	r0, r4
}
     3f6:	b004      	add	sp, #16
     3f8:	bd10      	pop	{r4, pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	ffff8000 	.word	0xffff8000
     400:	000009f1 	.word	0x000009f1

00000404 <i2c_m_sync_read>:
{
     404:	b510      	push	{r4, lr}
     406:	b084      	sub	sp, #16
     408:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     40a:	ab01      	add	r3, sp, #4
     40c:	3814      	subs	r0, #20
     40e:	8b82      	ldrh	r2, [r0, #28]
     410:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     412:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     414:	4a05      	ldr	r2, [pc, #20]	; (42c <i2c_m_sync_read+0x28>)
     416:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     418:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     41a:	0019      	movs	r1, r3
     41c:	4b04      	ldr	r3, [pc, #16]	; (430 <i2c_m_sync_read+0x2c>)
     41e:	4798      	blx	r3
	if (ret) {
     420:	2800      	cmp	r0, #0
     422:	d100      	bne.n	426 <i2c_m_sync_read+0x22>
	return n;
     424:	0020      	movs	r0, r4
}
     426:	b004      	add	sp, #16
     428:	bd10      	pop	{r4, pc}
     42a:	46c0      	nop			; (mov r8, r8)
     42c:	ffff8001 	.word	0xffff8001
     430:	000009f1 	.word	0x000009f1

00000434 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     434:	b570      	push	{r4, r5, r6, lr}
     436:	0004      	movs	r4, r0
     438:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     43a:	1e43      	subs	r3, r0, #1
     43c:	4198      	sbcs	r0, r3
     43e:	b2c0      	uxtb	r0, r0
     440:	225e      	movs	r2, #94	; 0x5e
     442:	4907      	ldr	r1, [pc, #28]	; (460 <i2c_m_sync_init+0x2c>)
     444:	4b07      	ldr	r3, [pc, #28]	; (464 <i2c_m_sync_init+0x30>)
     446:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     448:	0029      	movs	r1, r5
     44a:	0020      	movs	r0, r4
     44c:	4b06      	ldr	r3, [pc, #24]	; (468 <i2c_m_sync_init+0x34>)
     44e:	4798      	blx	r3
	if (init_status) {
     450:	2800      	cmp	r0, #0
     452:	d103      	bne.n	45c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     454:	4b05      	ldr	r3, [pc, #20]	; (46c <i2c_m_sync_init+0x38>)
     456:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     458:	4b05      	ldr	r3, [pc, #20]	; (470 <i2c_m_sync_init+0x3c>)
     45a:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     45c:	bd70      	pop	{r4, r5, r6, pc}
     45e:	46c0      	nop			; (mov r8, r8)
     460:	0000265c 	.word	0x0000265c
     464:	0000066d 	.word	0x0000066d
     468:	0000093d 	.word	0x0000093d
     46c:	00000405 	.word	0x00000405
     470:	000003d5 	.word	0x000003d5

00000474 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     474:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     476:	4b01      	ldr	r3, [pc, #4]	; (47c <i2c_m_sync_enable+0x8>)
     478:	4798      	blx	r3
}
     47a:	bd10      	pop	{r4, pc}
     47c:	0000096d 	.word	0x0000096d

00000480 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     480:	0589      	lsls	r1, r1, #22
     482:	0d89      	lsrs	r1, r1, #22
     484:	2380      	movs	r3, #128	; 0x80
     486:	00db      	lsls	r3, r3, #3
     488:	401a      	ands	r2, r3
     48a:	430a      	orrs	r2, r1
     48c:	8382      	strh	r2, [r0, #28]
}
     48e:	0010      	movs	r0, r2
     490:	4770      	bx	lr
	...

00000494 <i2c_m_sync_transfer>:

/**
 * \brief Sync version of i2c transfer command
 */
int32_t i2c_m_sync_transfer(struct i2c_m_sync_desc *const i2c, struct _i2c_m_msg *msg)
{
     494:	b510      	push	{r4, lr}
	return _i2c_m_sync_transfer(&i2c->device, msg);
     496:	4b01      	ldr	r3, [pc, #4]	; (49c <i2c_m_sync_transfer+0x8>)
     498:	4798      	blx	r3
}
     49a:	bd10      	pop	{r4, pc}
     49c:	000009f1 	.word	0x000009f1

000004a0 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     4a0:	3014      	adds	r0, #20
     4a2:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     4a4:	2000      	movs	r0, #0
     4a6:	4770      	bx	lr

000004a8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4a8:	b570      	push	{r4, r5, r6, lr}
     4aa:	0006      	movs	r6, r0
     4ac:	000c      	movs	r4, r1
     4ae:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     4b0:	2800      	cmp	r0, #0
     4b2:	d00d      	beq.n	4d0 <io_write+0x28>
     4b4:	0008      	movs	r0, r1
     4b6:	1e43      	subs	r3, r0, #1
     4b8:	4198      	sbcs	r0, r3
     4ba:	b2c0      	uxtb	r0, r0
     4bc:	2234      	movs	r2, #52	; 0x34
     4be:	4905      	ldr	r1, [pc, #20]	; (4d4 <io_write+0x2c>)
     4c0:	4b05      	ldr	r3, [pc, #20]	; (4d8 <io_write+0x30>)
     4c2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     4c4:	6833      	ldr	r3, [r6, #0]
     4c6:	002a      	movs	r2, r5
     4c8:	0021      	movs	r1, r4
     4ca:	0030      	movs	r0, r6
     4cc:	4798      	blx	r3
}
     4ce:	bd70      	pop	{r4, r5, r6, pc}
     4d0:	2000      	movs	r0, #0
     4d2:	e7f3      	b.n	4bc <io_write+0x14>
     4d4:	00002678 	.word	0x00002678
     4d8:	0000066d 	.word	0x0000066d

000004dc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4dc:	b570      	push	{r4, r5, r6, lr}
     4de:	0006      	movs	r6, r0
     4e0:	000c      	movs	r4, r1
     4e2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     4e4:	2800      	cmp	r0, #0
     4e6:	d00d      	beq.n	504 <io_read+0x28>
     4e8:	0008      	movs	r0, r1
     4ea:	1e43      	subs	r3, r0, #1
     4ec:	4198      	sbcs	r0, r3
     4ee:	b2c0      	uxtb	r0, r0
     4f0:	223d      	movs	r2, #61	; 0x3d
     4f2:	4905      	ldr	r1, [pc, #20]	; (508 <io_read+0x2c>)
     4f4:	4b05      	ldr	r3, [pc, #20]	; (50c <io_read+0x30>)
     4f6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     4f8:	6873      	ldr	r3, [r6, #4]
     4fa:	002a      	movs	r2, r5
     4fc:	0021      	movs	r1, r4
     4fe:	0030      	movs	r0, r6
     500:	4798      	blx	r3
}
     502:	bd70      	pop	{r4, r5, r6, pc}
     504:	2000      	movs	r0, #0
     506:	e7f3      	b.n	4f0 <io_read+0x14>
     508:	00002678 	.word	0x00002678
     50c:	0000066d 	.word	0x0000066d

00000510 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     512:	46ce      	mov	lr, r9
     514:	4647      	mov	r7, r8
     516:	b580      	push	{r7, lr}
     518:	0004      	movs	r4, r0
     51a:	000f      	movs	r7, r1
     51c:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     51e:	2800      	cmp	r0, #0
     520:	d026      	beq.n	570 <usart_sync_write+0x60>
     522:	2900      	cmp	r1, #0
     524:	d026      	beq.n	574 <usart_sync_write+0x64>
     526:	0010      	movs	r0, r2
     528:	1e43      	subs	r3, r0, #1
     52a:	4198      	sbcs	r0, r3
     52c:	22f1      	movs	r2, #241	; 0xf1
     52e:	4912      	ldr	r1, [pc, #72]	; (578 <usart_sync_write+0x68>)
     530:	4b12      	ldr	r3, [pc, #72]	; (57c <usart_sync_write+0x6c>)
     532:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     534:	3408      	adds	r4, #8
     536:	4d12      	ldr	r5, [pc, #72]	; (580 <usart_sync_write+0x70>)
     538:	0020      	movs	r0, r4
     53a:	47a8      	blx	r5
     53c:	2800      	cmp	r0, #0
     53e:	d0fb      	beq.n	538 <usart_sync_write+0x28>
     540:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     542:	4b10      	ldr	r3, [pc, #64]	; (584 <usart_sync_write+0x74>)
     544:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     546:	4d0e      	ldr	r5, [pc, #56]	; (580 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     548:	5db9      	ldrb	r1, [r7, r6]
     54a:	0020      	movs	r0, r4
     54c:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     54e:	0020      	movs	r0, r4
     550:	47a8      	blx	r5
     552:	2800      	cmp	r0, #0
     554:	d0fb      	beq.n	54e <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     556:	3601      	adds	r6, #1
     558:	4546      	cmp	r6, r8
     55a:	d3f5      	bcc.n	548 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     55c:	4d0a      	ldr	r5, [pc, #40]	; (588 <usart_sync_write+0x78>)
     55e:	0020      	movs	r0, r4
     560:	47a8      	blx	r5
     562:	2800      	cmp	r0, #0
     564:	d0fb      	beq.n	55e <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     566:	0030      	movs	r0, r6
     568:	bc0c      	pop	{r2, r3}
     56a:	4690      	mov	r8, r2
     56c:	4699      	mov	r9, r3
     56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     570:	2000      	movs	r0, #0
     572:	e7db      	b.n	52c <usart_sync_write+0x1c>
     574:	2000      	movs	r0, #0
     576:	e7d9      	b.n	52c <usart_sync_write+0x1c>
     578:	0000268c 	.word	0x0000268c
     57c:	0000066d 	.word	0x0000066d
     580:	0000091d 	.word	0x0000091d
     584:	0000090d 	.word	0x0000090d
     588:	00000927 	.word	0x00000927

0000058c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     58e:	46ce      	mov	lr, r9
     590:	4647      	mov	r7, r8
     592:	b580      	push	{r7, lr}
     594:	0004      	movs	r4, r0
     596:	000f      	movs	r7, r1
     598:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     59a:	2800      	cmp	r0, #0
     59c:	d01d      	beq.n	5da <usart_sync_read+0x4e>
     59e:	2900      	cmp	r1, #0
     5a0:	d01d      	beq.n	5de <usart_sync_read+0x52>
     5a2:	0010      	movs	r0, r2
     5a4:	1e43      	subs	r3, r0, #1
     5a6:	4198      	sbcs	r0, r3
     5a8:	2286      	movs	r2, #134	; 0x86
     5aa:	0052      	lsls	r2, r2, #1
     5ac:	490d      	ldr	r1, [pc, #52]	; (5e4 <usart_sync_read+0x58>)
     5ae:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <usart_sync_read+0x5c>)
     5b0:	4798      	blx	r3
	uint32_t                      offset = 0;
     5b2:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     5b4:	3408      	adds	r4, #8
     5b6:	4d0d      	ldr	r5, [pc, #52]	; (5ec <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     5b8:	4b0d      	ldr	r3, [pc, #52]	; (5f0 <usart_sync_read+0x64>)
     5ba:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     5bc:	0020      	movs	r0, r4
     5be:	47a8      	blx	r5
     5c0:	2800      	cmp	r0, #0
     5c2:	d0fb      	beq.n	5bc <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     5c4:	0020      	movs	r0, r4
     5c6:	47c8      	blx	r9
     5c8:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     5ca:	3601      	adds	r6, #1
     5cc:	4546      	cmp	r6, r8
     5ce:	d3f5      	bcc.n	5bc <usart_sync_read+0x30>

	return (int32_t)offset;
}
     5d0:	0030      	movs	r0, r6
     5d2:	bc0c      	pop	{r2, r3}
     5d4:	4690      	mov	r8, r2
     5d6:	4699      	mov	r9, r3
     5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     5da:	2000      	movs	r0, #0
     5dc:	e7e4      	b.n	5a8 <usart_sync_read+0x1c>
     5de:	2000      	movs	r0, #0
     5e0:	e7e2      	b.n	5a8 <usart_sync_read+0x1c>
     5e2:	46c0      	nop			; (mov r8, r8)
     5e4:	0000268c 	.word	0x0000268c
     5e8:	0000066d 	.word	0x0000066d
     5ec:	00000931 	.word	0x00000931
     5f0:	00000915 	.word	0x00000915

000005f4 <usart_sync_init>:
{
     5f4:	b570      	push	{r4, r5, r6, lr}
     5f6:	0005      	movs	r5, r0
     5f8:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     5fa:	2800      	cmp	r0, #0
     5fc:	d013      	beq.n	626 <usart_sync_init+0x32>
     5fe:	0008      	movs	r0, r1
     600:	1e43      	subs	r3, r0, #1
     602:	4198      	sbcs	r0, r3
     604:	b2c0      	uxtb	r0, r0
     606:	2234      	movs	r2, #52	; 0x34
     608:	4908      	ldr	r1, [pc, #32]	; (62c <usart_sync_init+0x38>)
     60a:	4b09      	ldr	r3, [pc, #36]	; (630 <usart_sync_init+0x3c>)
     60c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     60e:	0028      	movs	r0, r5
     610:	3008      	adds	r0, #8
     612:	0021      	movs	r1, r4
     614:	4b07      	ldr	r3, [pc, #28]	; (634 <usart_sync_init+0x40>)
     616:	4798      	blx	r3
	if (init_status) {
     618:	2800      	cmp	r0, #0
     61a:	d103      	bne.n	624 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     61c:	4b06      	ldr	r3, [pc, #24]	; (638 <usart_sync_init+0x44>)
     61e:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     620:	4b06      	ldr	r3, [pc, #24]	; (63c <usart_sync_init+0x48>)
     622:	602b      	str	r3, [r5, #0]
}
     624:	bd70      	pop	{r4, r5, r6, pc}
     626:	2000      	movs	r0, #0
     628:	e7ed      	b.n	606 <usart_sync_init+0x12>
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	0000268c 	.word	0x0000268c
     630:	0000066d 	.word	0x0000066d
     634:	000008cd 	.word	0x000008cd
     638:	0000058d 	.word	0x0000058d
     63c:	00000511 	.word	0x00000511

00000640 <usart_sync_enable>:
{
     640:	b510      	push	{r4, lr}
     642:	0004      	movs	r4, r0
	ASSERT(descr);
     644:	1e43      	subs	r3, r0, #1
     646:	4198      	sbcs	r0, r3
     648:	b2c0      	uxtb	r0, r0
     64a:	2253      	movs	r2, #83	; 0x53
     64c:	4904      	ldr	r1, [pc, #16]	; (660 <usart_sync_enable+0x20>)
     64e:	4b05      	ldr	r3, [pc, #20]	; (664 <usart_sync_enable+0x24>)
     650:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     652:	0020      	movs	r0, r4
     654:	3008      	adds	r0, #8
     656:	4b04      	ldr	r3, [pc, #16]	; (668 <usart_sync_enable+0x28>)
     658:	4798      	blx	r3
}
     65a:	2000      	movs	r0, #0
     65c:	bd10      	pop	{r4, pc}
     65e:	46c0      	nop			; (mov r8, r8)
     660:	0000268c 	.word	0x0000268c
     664:	0000066d 	.word	0x0000066d
     668:	000008f9 	.word	0x000008f9

0000066c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     66c:	2800      	cmp	r0, #0
     66e:	d100      	bne.n	672 <assert+0x6>
		__asm("BKPT #0");
     670:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     672:	4770      	bx	lr

00000674 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     674:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     676:	4a06      	ldr	r2, [pc, #24]	; (690 <_sbrk+0x1c>)
     678:	6812      	ldr	r2, [r2, #0]
     67a:	2a00      	cmp	r2, #0
     67c:	d004      	beq.n	688 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     67e:	4a04      	ldr	r2, [pc, #16]	; (690 <_sbrk+0x1c>)
     680:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     682:	18c3      	adds	r3, r0, r3
     684:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     686:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     688:	4902      	ldr	r1, [pc, #8]	; (694 <_sbrk+0x20>)
     68a:	4a01      	ldr	r2, [pc, #4]	; (690 <_sbrk+0x1c>)
     68c:	6011      	str	r1, [r2, #0]
     68e:	e7f6      	b.n	67e <_sbrk+0xa>
     690:	20000084 	.word	0x20000084
     694:	200024d8 	.word	0x200024d8

00000698 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     698:	2001      	movs	r0, #1
     69a:	4240      	negs	r0, r0
     69c:	4770      	bx	lr

0000069e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     69e:	2380      	movs	r3, #128	; 0x80
     6a0:	019b      	lsls	r3, r3, #6
     6a2:	604b      	str	r3, [r1, #4]

	return 0;
}
     6a4:	2000      	movs	r0, #0
     6a6:	4770      	bx	lr

000006a8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     6a8:	2000      	movs	r0, #0
     6aa:	4770      	bx	lr

000006ac <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     6ac:	23fa      	movs	r3, #250	; 0xfa
     6ae:	015b      	lsls	r3, r3, #5
     6b0:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     6b2:	4770      	bx	lr

000006b4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     6b4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     6b6:	4b06      	ldr	r3, [pc, #24]	; (6d0 <_init_chip+0x1c>)
     6b8:	685a      	ldr	r2, [r3, #4]
     6ba:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     6bc:	4b05      	ldr	r3, [pc, #20]	; (6d4 <_init_chip+0x20>)
     6be:	4798      	blx	r3
	_sysctrl_init_sources();
     6c0:	4b05      	ldr	r3, [pc, #20]	; (6d8 <_init_chip+0x24>)
     6c2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     6c4:	4b05      	ldr	r3, [pc, #20]	; (6dc <_init_chip+0x28>)
     6c6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     6c8:	20ff      	movs	r0, #255	; 0xff
     6ca:	4b05      	ldr	r3, [pc, #20]	; (6e0 <_init_chip+0x2c>)
     6cc:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     6ce:	bd10      	pop	{r4, pc}
     6d0:	41004000 	.word	0x41004000
     6d4:	00000705 	.word	0x00000705
     6d8:	00000f29 	.word	0x00000f29
     6dc:	00000f6d 	.word	0x00000f6d
     6e0:	000006e5 	.word	0x000006e5

000006e4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     6e4:	07c3      	lsls	r3, r0, #31
     6e6:	d50a      	bpl.n	6fe <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     6e8:	4b05      	ldr	r3, [pc, #20]	; (700 <_gclk_init_generators_by_fref+0x1c>)
     6ea:	2280      	movs	r2, #128	; 0x80
     6ec:	0052      	lsls	r2, r2, #1
     6ee:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     6f0:	2283      	movs	r2, #131	; 0x83
     6f2:	0252      	lsls	r2, r2, #9
     6f4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     6f6:	001a      	movs	r2, r3
     6f8:	7853      	ldrb	r3, [r2, #1]
     6fa:	09db      	lsrs	r3, r3, #7
     6fc:	d1fc      	bne.n	6f8 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     6fe:	4770      	bx	lr
     700:	40000c00 	.word	0x40000c00

00000704 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     704:	4b06      	ldr	r3, [pc, #24]	; (720 <_pm_init+0x1c>)
     706:	7a1a      	ldrb	r2, [r3, #8]
     708:	b2d2      	uxtb	r2, r2
     70a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     70c:	7a5a      	ldrb	r2, [r3, #9]
     70e:	b2d2      	uxtb	r2, r2
     710:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     712:	7a9a      	ldrb	r2, [r3, #10]
     714:	b2d2      	uxtb	r2, r2
     716:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     718:	7ada      	ldrb	r2, [r3, #11]
     71a:	b2d2      	uxtb	r2, r2
     71c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     71e:	4770      	bx	lr
     720:	40000400 	.word	0x40000400

00000724 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
     724:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     726:	4b08      	ldr	r3, [pc, #32]	; (748 <_get_i2cm_index+0x24>)
     728:	469c      	mov	ip, r3
     72a:	4460      	add	r0, ip
     72c:	0a80      	lsrs	r0, r0, #10
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
     72e:	b2c0      	uxtb	r0, r0
     730:	2800      	cmp	r0, #0
     732:	d007      	beq.n	744 <_get_i2cm_index+0x20>
			return i;
		}
	}

	ASSERT(false);
     734:	22e6      	movs	r2, #230	; 0xe6
     736:	0092      	lsls	r2, r2, #2
     738:	4904      	ldr	r1, [pc, #16]	; (74c <_get_i2cm_index+0x28>)
     73a:	2000      	movs	r0, #0
     73c:	4b04      	ldr	r3, [pc, #16]	; (750 <_get_i2cm_index+0x2c>)
     73e:	4798      	blx	r3
	return -1;
     740:	2001      	movs	r0, #1
     742:	4240      	negs	r0, r0
}
     744:	bd10      	pop	{r4, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	bdfff800 	.word	0xbdfff800
     74c:	000026c0 	.word	0x000026c0
     750:	0000066d 	.word	0x0000066d

00000754 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     754:	b570      	push	{r4, r5, r6, lr}
     756:	0005      	movs	r5, r0
     758:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     75a:	0008      	movs	r0, r1
     75c:	4b31      	ldr	r3, [pc, #196]	; (824 <_i2c_m_sync_init_impl+0xd0>)
     75e:	4798      	blx	r3
     760:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     762:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     764:	07db      	lsls	r3, r3, #31
     766:	d421      	bmi.n	7ac <_i2c_m_sync_init_impl+0x58>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     768:	0043      	lsls	r3, r0, #1
     76a:	181b      	adds	r3, r3, r0
     76c:	00db      	lsls	r3, r3, #3
     76e:	4a2e      	ldr	r2, [pc, #184]	; (828 <_i2c_m_sync_init_impl+0xd4>)
     770:	18d3      	adds	r3, r2, r3
     772:	6859      	ldr	r1, [r3, #4]
     774:	231c      	movs	r3, #28
     776:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     778:	2203      	movs	r2, #3
     77a:	69e3      	ldr	r3, [r4, #28]
     77c:	421a      	tst	r2, r3
     77e:	d1fc      	bne.n	77a <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     780:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     782:	079b      	lsls	r3, r3, #30
     784:	d50b      	bpl.n	79e <_i2c_m_sync_init_impl+0x4a>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     786:	6823      	ldr	r3, [r4, #0]
     788:	2202      	movs	r2, #2
     78a:	4393      	bics	r3, r2
     78c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     78e:	3201      	adds	r2, #1
     790:	69e3      	ldr	r3, [r4, #28]
     792:	421a      	tst	r2, r3
     794:	d1fc      	bne.n	790 <_i2c_m_sync_init_impl+0x3c>
     796:	2202      	movs	r2, #2
     798:	69e3      	ldr	r3, [r4, #28]
     79a:	421a      	tst	r2, r3
     79c:	d1fc      	bne.n	798 <_i2c_m_sync_init_impl+0x44>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     79e:	2301      	movs	r3, #1
     7a0:	430b      	orrs	r3, r1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     7a2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     7a4:	2203      	movs	r2, #3
     7a6:	69e3      	ldr	r3, [r4, #28]
     7a8:	421a      	tst	r2, r3
     7aa:	d1fc      	bne.n	7a6 <_i2c_m_sync_init_impl+0x52>
     7ac:	2201      	movs	r2, #1
     7ae:	69e3      	ldr	r3, [r4, #28]
     7b0:	421a      	tst	r2, r3
     7b2:	d1fc      	bne.n	7ae <_i2c_m_sync_init_impl+0x5a>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     7b4:	0043      	lsls	r3, r0, #1
     7b6:	181b      	adds	r3, r3, r0
     7b8:	00db      	lsls	r3, r3, #3
     7ba:	4a1b      	ldr	r2, [pc, #108]	; (828 <_i2c_m_sync_init_impl+0xd4>)
     7bc:	18d3      	adds	r3, r2, r3
     7be:	6859      	ldr	r1, [r3, #4]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     7c0:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     7c2:	2203      	movs	r2, #3
     7c4:	69e3      	ldr	r3, [r4, #28]
     7c6:	421a      	tst	r2, r3
     7c8:	d1fc      	bne.n	7c4 <_i2c_m_sync_init_impl+0x70>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     7ca:	0043      	lsls	r3, r0, #1
     7cc:	181b      	adds	r3, r3, r0
     7ce:	00db      	lsls	r3, r3, #3
     7d0:	4a15      	ldr	r2, [pc, #84]	; (828 <_i2c_m_sync_init_impl+0xd4>)
     7d2:	18d3      	adds	r3, r2, r3
     7d4:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     7d6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     7d8:	2204      	movs	r2, #4
     7da:	69e3      	ldr	r3, [r4, #28]
     7dc:	421a      	tst	r2, r3
     7de:	d1fc      	bne.n	7da <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     7e0:	0043      	lsls	r3, r0, #1
     7e2:	181b      	adds	r3, r3, r0
     7e4:	00db      	lsls	r3, r3, #3
     7e6:	4a10      	ldr	r2, [pc, #64]	; (828 <_i2c_m_sync_init_impl+0xd4>)
     7e8:	18d3      	adds	r3, r2, r3
     7ea:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     7ec:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     7ee:	0189      	lsls	r1, r1, #6
     7f0:	0f89      	lsrs	r1, r1, #30
     7f2:	81a9      	strh	r1, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     7f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     7f6:	4e0d      	ldr	r6, [pc, #52]	; (82c <_i2c_m_sync_init_impl+0xd8>)
     7f8:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     7fa:	2301      	movs	r3, #1
     7fc:	428b      	cmp	r3, r1
     7fe:	419b      	sbcs	r3, r3
     800:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     802:	039b      	lsls	r3, r3, #14
     804:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     806:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     808:	2204      	movs	r2, #4
     80a:	69e3      	ldr	r3, [r4, #28]
     80c:	421a      	tst	r2, r3
     80e:	d1fc      	bne.n	80a <_i2c_m_sync_init_impl+0xb6>

	service->trise = _i2cms[i].trise;
     810:	0043      	lsls	r3, r0, #1
     812:	1818      	adds	r0, r3, r0
     814:	00c0      	lsls	r0, r0, #3
     816:	4b04      	ldr	r3, [pc, #16]	; (828 <_i2c_m_sync_init_impl+0xd4>)
     818:	1818      	adds	r0, r3, r0
     81a:	8a43      	ldrh	r3, [r0, #18]
     81c:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
     81e:	2000      	movs	r0, #0
     820:	bd70      	pop	{r4, r5, r6, pc}
     822:	46c0      	nop			; (mov r8, r8)
     824:	00000725 	.word	0x00000725
     828:	000026a8 	.word	0x000026a8
     82c:	ffffbfff 	.word	0xffffbfff

00000830 <_usart_init>:
{
     830:	b510      	push	{r4, lr}
     832:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     834:	4b1f      	ldr	r3, [pc, #124]	; (8b4 <_usart_init+0x84>)
     836:	18c3      	adds	r3, r0, r3
     838:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     83a:	b2db      	uxtb	r3, r3
     83c:	2b03      	cmp	r3, #3
     83e:	d004      	beq.n	84a <_usart_init+0x1a>
	ASSERT(false);
     840:	4a1d      	ldr	r2, [pc, #116]	; (8b8 <_usart_init+0x88>)
     842:	491e      	ldr	r1, [pc, #120]	; (8bc <_usart_init+0x8c>)
     844:	2000      	movs	r0, #0
     846:	4b1e      	ldr	r3, [pc, #120]	; (8c0 <_usart_init+0x90>)
     848:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     84a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     84c:	07db      	lsls	r3, r3, #31
     84e:	d418      	bmi.n	882 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     850:	2203      	movs	r2, #3
     852:	69e3      	ldr	r3, [r4, #28]
     854:	421a      	tst	r2, r3
     856:	d1fc      	bne.n	852 <_usart_init+0x22>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     858:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     85a:	079b      	lsls	r3, r3, #30
     85c:	d50b      	bpl.n	876 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     85e:	6823      	ldr	r3, [r4, #0]
     860:	2202      	movs	r2, #2
     862:	4393      	bics	r3, r2
     864:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     866:	3201      	adds	r2, #1
     868:	69e3      	ldr	r3, [r4, #28]
     86a:	421a      	tst	r2, r3
     86c:	d1fc      	bne.n	868 <_usart_init+0x38>
     86e:	2202      	movs	r2, #2
     870:	69e3      	ldr	r3, [r4, #28]
     872:	421a      	tst	r2, r3
     874:	d1fc      	bne.n	870 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     876:	2305      	movs	r3, #5
     878:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     87a:	2203      	movs	r2, #3
     87c:	69e3      	ldr	r3, [r4, #28]
     87e:	421a      	tst	r2, r3
     880:	d1fc      	bne.n	87c <_usart_init+0x4c>
     882:	2201      	movs	r2, #1
     884:	69e3      	ldr	r3, [r4, #28]
     886:	421a      	tst	r2, r3
     888:	d1fc      	bne.n	884 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     88a:	4b0e      	ldr	r3, [pc, #56]	; (8c4 <_usart_init+0x94>)
     88c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     88e:	2203      	movs	r2, #3
     890:	69e3      	ldr	r3, [r4, #28]
     892:	421a      	tst	r2, r3
     894:	d1fc      	bne.n	890 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
     896:	23c0      	movs	r3, #192	; 0xc0
     898:	029b      	lsls	r3, r3, #10
     89a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     89c:	2207      	movs	r2, #7
     89e:	69e3      	ldr	r3, [r4, #28]
     8a0:	421a      	tst	r2, r3
     8a2:	d1fc      	bne.n	89e <_usart_init+0x6e>
	((Sercom *)hw)->USART.BAUD.reg = data;
     8a4:	4b08      	ldr	r3, [pc, #32]	; (8c8 <_usart_init+0x98>)
     8a6:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
     8a8:	2300      	movs	r3, #0
     8aa:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     8ac:	2230      	movs	r2, #48	; 0x30
     8ae:	54a3      	strb	r3, [r4, r2]
}
     8b0:	2000      	movs	r0, #0
     8b2:	bd10      	pop	{r4, pc}
     8b4:	bdfff800 	.word	0xbdfff800
     8b8:	0000023a 	.word	0x0000023a
     8bc:	000026c0 	.word	0x000026c0
     8c0:	0000066d 	.word	0x0000066d
     8c4:	40100004 	.word	0x40100004
     8c8:	ffffc504 	.word	0xffffc504

000008cc <_usart_sync_init>:
{
     8cc:	b570      	push	{r4, r5, r6, lr}
     8ce:	0005      	movs	r5, r0
     8d0:	000c      	movs	r4, r1
	ASSERT(device);
     8d2:	1e43      	subs	r3, r0, #1
     8d4:	4198      	sbcs	r0, r3
     8d6:	b2c0      	uxtb	r0, r0
     8d8:	22b4      	movs	r2, #180	; 0xb4
     8da:	4904      	ldr	r1, [pc, #16]	; (8ec <_usart_sync_init+0x20>)
     8dc:	4b04      	ldr	r3, [pc, #16]	; (8f0 <_usart_sync_init+0x24>)
     8de:	4798      	blx	r3
	device->hw = hw;
     8e0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     8e2:	0020      	movs	r0, r4
     8e4:	4b03      	ldr	r3, [pc, #12]	; (8f4 <_usart_sync_init+0x28>)
     8e6:	4798      	blx	r3
}
     8e8:	bd70      	pop	{r4, r5, r6, pc}
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	000026c0 	.word	0x000026c0
     8f0:	0000066d 	.word	0x0000066d
     8f4:	00000831 	.word	0x00000831

000008f8 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     8f8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     8fa:	6813      	ldr	r3, [r2, #0]
     8fc:	2102      	movs	r1, #2
     8fe:	430b      	orrs	r3, r1
     900:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     902:	3101      	adds	r1, #1
     904:	69d3      	ldr	r3, [r2, #28]
     906:	4219      	tst	r1, r3
     908:	d1fc      	bne.n	904 <_usart_sync_enable+0xc>
}
     90a:	4770      	bx	lr

0000090c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     90c:	6803      	ldr	r3, [r0, #0]
     90e:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     910:	8519      	strh	r1, [r3, #40]	; 0x28
}
     912:	4770      	bx	lr

00000914 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     914:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     916:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     918:	b2c0      	uxtb	r0, r0
}
     91a:	4770      	bx	lr

0000091c <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     91c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     91e:	7e18      	ldrb	r0, [r3, #24]
     920:	2301      	movs	r3, #1
     922:	4018      	ands	r0, r3
}
     924:	4770      	bx	lr

00000926 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     926:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     928:	7e18      	ldrb	r0, [r3, #24]
     92a:	0780      	lsls	r0, r0, #30
     92c:	0fc0      	lsrs	r0, r0, #31
}
     92e:	4770      	bx	lr

00000930 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     930:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     932:	7e18      	ldrb	r0, [r3, #24]
     934:	0740      	lsls	r0, r0, #29
     936:	0fc0      	lsrs	r0, r0, #31
}
     938:	4770      	bx	lr
	...

0000093c <_i2c_m_sync_init>:
{
     93c:	b570      	push	{r4, r5, r6, lr}
     93e:	0004      	movs	r4, r0
     940:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
     942:	1e43      	subs	r3, r0, #1
     944:	4198      	sbcs	r0, r3
     946:	b2c0      	uxtb	r0, r0
     948:	4a04      	ldr	r2, [pc, #16]	; (95c <_i2c_m_sync_init+0x20>)
     94a:	4905      	ldr	r1, [pc, #20]	; (960 <_i2c_m_sync_init+0x24>)
     94c:	4b05      	ldr	r3, [pc, #20]	; (964 <_i2c_m_sync_init+0x28>)
     94e:	4798      	blx	r3
	i2c_dev->hw = hw;
     950:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
     952:	0029      	movs	r1, r5
     954:	0020      	movs	r0, r4
     956:	4b04      	ldr	r3, [pc, #16]	; (968 <_i2c_m_sync_init+0x2c>)
     958:	4798      	blx	r3
}
     95a:	bd70      	pop	{r4, r5, r6, pc}
     95c:	00000507 	.word	0x00000507
     960:	000026c0 	.word	0x000026c0
     964:	0000066d 	.word	0x0000066d
     968:	00000755 	.word	0x00000755

0000096c <_i2c_m_sync_enable>:
{
     96c:	b570      	push	{r4, r5, r6, lr}
     96e:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
     970:	4d1a      	ldr	r5, [pc, #104]	; (9dc <_i2c_m_sync_enable+0x70>)
     972:	1e43      	subs	r3, r0, #1
     974:	4198      	sbcs	r0, r3
     976:	b2c0      	uxtb	r0, r0
     978:	4a19      	ldr	r2, [pc, #100]	; (9e0 <_i2c_m_sync_enable+0x74>)
     97a:	0029      	movs	r1, r5
     97c:	4e19      	ldr	r6, [pc, #100]	; (9e4 <_i2c_m_sync_enable+0x78>)
     97e:	47b0      	blx	r6
	return _i2c_m_enable_implementation(i2c_dev->hw);
     980:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
     982:	0020      	movs	r0, r4
     984:	1e43      	subs	r3, r0, #1
     986:	4198      	sbcs	r0, r3
     988:	b2c0      	uxtb	r0, r0
     98a:	4a17      	ldr	r2, [pc, #92]	; (9e8 <_i2c_m_sync_enable+0x7c>)
     98c:	0029      	movs	r1, r5
     98e:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     990:	6823      	ldr	r3, [r4, #0]
     992:	2202      	movs	r2, #2
     994:	4313      	orrs	r3, r2
     996:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     998:	3201      	adds	r2, #1
     99a:	69e3      	ldr	r3, [r4, #28]
     99c:	421a      	tst	r2, r3
     99e:	d1fc      	bne.n	99a <_i2c_m_sync_enable+0x2e>
     9a0:	2504      	movs	r5, #4
     9a2:	2204      	movs	r2, #4
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     9a4:	2003      	movs	r0, #3
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     9a6:	2610      	movs	r6, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     9a8:	4910      	ldr	r1, [pc, #64]	; (9ec <_i2c_m_sync_enable+0x80>)
     9aa:	69e3      	ldr	r3, [r4, #28]
     9ac:	421a      	tst	r2, r3
     9ae:	d1fc      	bne.n	9aa <_i2c_m_sync_enable+0x3e>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     9b0:	8b63      	ldrh	r3, [r4, #26]
     9b2:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
     9b4:	4003      	ands	r3, r0
     9b6:	2b01      	cmp	r3, #1
     9b8:	d00a      	beq.n	9d0 <_i2c_m_sync_enable+0x64>
     9ba:	3901      	subs	r1, #1
		if (timeout <= 0) {
     9bc:	2900      	cmp	r1, #0
     9be:	d1f4      	bne.n	9aa <_i2c_m_sync_enable+0x3e>
     9c0:	3d01      	subs	r5, #1
			if (--timeout_attempt)
     9c2:	2d00      	cmp	r5, #0
     9c4:	d006      	beq.n	9d4 <_i2c_m_sync_enable+0x68>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     9c6:	8366      	strh	r6, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     9c8:	69e3      	ldr	r3, [r4, #28]
     9ca:	421a      	tst	r2, r3
     9cc:	d1fc      	bne.n	9c8 <_i2c_m_sync_enable+0x5c>
     9ce:	e7eb      	b.n	9a8 <_i2c_m_sync_enable+0x3c>
	return ERR_NONE;
     9d0:	2000      	movs	r0, #0
}
     9d2:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
     9d4:	2006      	movs	r0, #6
     9d6:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
     9d8:	e7fb      	b.n	9d2 <_i2c_m_sync_enable+0x66>
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	000026c0 	.word	0x000026c0
     9e0:	00000524 	.word	0x00000524
     9e4:	0000066d 	.word	0x0000066d
     9e8:	000005f4 	.word	0x000005f4
     9ec:	0000ffff 	.word	0x0000ffff

000009f0 <_i2c_m_sync_transfer>:
{
     9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9f2:	46de      	mov	lr, fp
     9f4:	4657      	mov	r7, sl
     9f6:	464e      	mov	r6, r9
     9f8:	4645      	mov	r5, r8
     9fa:	b5e0      	push	{r5, r6, r7, lr}
     9fc:	b083      	sub	sp, #12
     9fe:	0005      	movs	r5, r0
     a00:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
     a02:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
     a04:	0006      	movs	r6, r0
     a06:	1e73      	subs	r3, r6, #1
     a08:	419e      	sbcs	r6, r3
     a0a:	b2f3      	uxtb	r3, r6
     a0c:	9301      	str	r3, [sp, #4]
     a0e:	4fb4      	ldr	r7, [pc, #720]	; (ce0 <_i2c_m_sync_transfer+0x2f0>)
     a10:	4ab4      	ldr	r2, [pc, #720]	; (ce4 <_i2c_m_sync_transfer+0x2f4>)
     a12:	0039      	movs	r1, r7
     a14:	0018      	movs	r0, r3
     a16:	4eb4      	ldr	r6, [pc, #720]	; (ce8 <_i2c_m_sync_transfer+0x2f8>)
     a18:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
     a1a:	6928      	ldr	r0, [r5, #16]
     a1c:	1e43      	subs	r3, r0, #1
     a1e:	4198      	sbcs	r0, r3
     a20:	b2c0      	uxtb	r0, r0
     a22:	22b8      	movs	r2, #184	; 0xb8
     a24:	00d2      	lsls	r2, r2, #3
     a26:	0039      	movs	r1, r7
     a28:	47b0      	blx	r6
	ASSERT(msg);
     a2a:	4640      	mov	r0, r8
     a2c:	1e43      	subs	r3, r0, #1
     a2e:	4198      	sbcs	r0, r3
     a30:	b2c0      	uxtb	r0, r0
     a32:	4aae      	ldr	r2, [pc, #696]	; (cec <_i2c_m_sync_transfer+0x2fc>)
     a34:	0039      	movs	r1, r7
     a36:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     a38:	886b      	ldrh	r3, [r5, #2]
     a3a:	05db      	lsls	r3, r3, #23
     a3c:	d500      	bpl.n	a40 <_i2c_m_sync_transfer+0x50>
     a3e:	e224      	b.n	e8a <_i2c_m_sync_transfer+0x49a>
	msg->flags |= I2C_M_BUSY;
     a40:	4643      	mov	r3, r8
     a42:	885a      	ldrh	r2, [r3, #2]
     a44:	2380      	movs	r3, #128	; 0x80
     a46:	005b      	lsls	r3, r3, #1
     a48:	431a      	orrs	r2, r3
     a4a:	4641      	mov	r1, r8
     a4c:	804a      	strh	r2, [r1, #2]
	i2c_dev->service.msg = *msg;
     a4e:	002a      	movs	r2, r5
     a50:	c9c1      	ldmia	r1!, {r0, r6, r7}
     a52:	c2c1      	stmia	r2!, {r0, r6, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
     a54:	6862      	ldr	r2, [r4, #4]
     a56:	4313      	orrs	r3, r2
     a58:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a5a:	2204      	movs	r2, #4
     a5c:	69e3      	ldr	r3, [r4, #28]
     a5e:	421a      	tst	r2, r3
     a60:	d1fc      	bne.n	a5c <_i2c_m_sync_transfer+0x6c>
	void *             hw    = i2c_dev->hw;
     a62:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     a64:	683b      	ldr	r3, [r7, #0]
     a66:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
     a68:	4aa1      	ldr	r2, [pc, #644]	; (cf0 <_i2c_m_sync_transfer+0x300>)
     a6a:	499d      	ldr	r1, [pc, #628]	; (ce0 <_i2c_m_sync_transfer+0x2f0>)
     a6c:	9801      	ldr	r0, [sp, #4]
     a6e:	4b9e      	ldr	r3, [pc, #632]	; (ce8 <_i2c_m_sync_transfer+0x2f8>)
     a70:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
     a72:	686b      	ldr	r3, [r5, #4]
     a74:	2b01      	cmp	r3, #1
     a76:	d05a      	beq.n	b2e <_i2c_m_sync_transfer+0x13e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	4a9e      	ldr	r2, [pc, #632]	; (cf4 <_i2c_m_sync_transfer+0x304>)
     a7c:	4013      	ands	r3, r2
     a7e:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a80:	2204      	movs	r2, #4
     a82:	69fb      	ldr	r3, [r7, #28]
     a84:	421a      	tst	r2, r3
     a86:	d1fc      	bne.n	a82 <_i2c_m_sync_transfer+0x92>
	if (msg->addr & I2C_M_TEN) {
     a88:	882b      	ldrh	r3, [r5, #0]
     a8a:	055a      	lsls	r2, r3, #21
     a8c:	d55c      	bpl.n	b48 <_i2c_m_sync_transfer+0x158>
		if (msg->flags & I2C_M_RD) {
     a8e:	886a      	ldrh	r2, [r5, #2]
     a90:	07d2      	lsls	r2, r2, #31
     a92:	d504      	bpl.n	a9e <_i2c_m_sync_transfer+0xae>
			msg->flags |= I2C_M_TEN;
     a94:	886a      	ldrh	r2, [r5, #2]
     a96:	2180      	movs	r1, #128	; 0x80
     a98:	00c9      	lsls	r1, r1, #3
     a9a:	430a      	orrs	r2, r1
     a9c:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
     a9e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     aa0:	4995      	ldr	r1, [pc, #596]	; (cf8 <_i2c_m_sync_transfer+0x308>)
     aa2:	4019      	ands	r1, r3
     aa4:	2204      	movs	r2, #4
     aa6:	69fb      	ldr	r3, [r7, #28]
     aa8:	421a      	tst	r2, r3
     aaa:	d1fc      	bne.n	aa6 <_i2c_m_sync_transfer+0xb6>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     aae:	2280      	movs	r2, #128	; 0x80
     ab0:	01d2      	lsls	r2, r2, #7
     ab2:	401a      	ands	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
     ab4:	2380      	movs	r3, #128	; 0x80
     ab6:	021b      	lsls	r3, r3, #8
     ab8:	4313      	orrs	r3, r2
     aba:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     abc:	6279      	str	r1, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     abe:	2204      	movs	r2, #4
     ac0:	69fb      	ldr	r3, [r7, #28]
     ac2:	421a      	tst	r2, r3
     ac4:	d1fc      	bne.n	ac0 <_i2c_m_sync_transfer+0xd0>
	void *   hw      = i2c_dev->hw;
     ac6:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     ac8:	7e0b      	ldrb	r3, [r1, #24]
     aca:	b2db      	uxtb	r3, r3
     acc:	4a8b      	ldr	r2, [pc, #556]	; (cfc <_i2c_m_sync_transfer+0x30c>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     ace:	2003      	movs	r0, #3
     ad0:	4218      	tst	r0, r3
     ad2:	d104      	bne.n	ade <_i2c_m_sync_transfer+0xee>
     ad4:	7e0b      	ldrb	r3, [r1, #24]
     ad6:	b2db      	uxtb	r3, r3
     ad8:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
     ada:	2a00      	cmp	r2, #0
     adc:	d1f8      	bne.n	ad0 <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     ade:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ae0:	2104      	movs	r1, #4
     ae2:	69fa      	ldr	r2, [r7, #28]
     ae4:	4211      	tst	r1, r2
     ae6:	d1fc      	bne.n	ae2 <_i2c_m_sync_transfer+0xf2>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     ae8:	8b7a      	ldrh	r2, [r7, #26]
     aea:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
     aec:	07d9      	lsls	r1, r3, #31
     aee:	d400      	bmi.n	af2 <_i2c_m_sync_transfer+0x102>
     af0:	e0a0      	b.n	c34 <_i2c_m_sync_transfer+0x244>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     af2:	0793      	lsls	r3, r2, #30
     af4:	d53e      	bpl.n	b74 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     af6:	2301      	movs	r3, #1
     af8:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
     afa:	886b      	ldrh	r3, [r5, #2]
     afc:	2180      	movs	r1, #128	; 0x80
     afe:	0149      	lsls	r1, r1, #5
     b00:	430b      	orrs	r3, r1
     b02:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     b04:	886b      	ldrh	r3, [r5, #2]
     b06:	497e      	ldr	r1, [pc, #504]	; (d00 <_i2c_m_sync_transfer+0x310>)
     b08:	400b      	ands	r3, r1
     b0a:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     b0c:	2001      	movs	r0, #1
     b0e:	0003      	movs	r3, r0
     b10:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
     b12:	4258      	negs	r0, r3
     b14:	4158      	adcs	r0, r3
     b16:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     b18:	886b      	ldrh	r3, [r5, #2]
     b1a:	4a79      	ldr	r2, [pc, #484]	; (d00 <_i2c_m_sync_transfer+0x310>)
     b1c:	4013      	ands	r3, r2
     b1e:	806b      	strh	r3, [r5, #2]
}
     b20:	b003      	add	sp, #12
     b22:	bc3c      	pop	{r2, r3, r4, r5}
     b24:	4690      	mov	r8, r2
     b26:	4699      	mov	r9, r3
     b28:	46a2      	mov	sl, r4
     b2a:	46ab      	mov	fp, r5
     b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
     b2e:	464b      	mov	r3, r9
     b30:	011b      	lsls	r3, r3, #4
     b32:	d5a1      	bpl.n	a78 <_i2c_m_sync_transfer+0x88>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b34:	687a      	ldr	r2, [r7, #4]
     b36:	2380      	movs	r3, #128	; 0x80
     b38:	02db      	lsls	r3, r3, #11
     b3a:	4313      	orrs	r3, r2
     b3c:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b3e:	2204      	movs	r2, #4
     b40:	69fb      	ldr	r3, [r7, #28]
     b42:	421a      	tst	r2, r3
     b44:	d1fc      	bne.n	b40 <_i2c_m_sync_transfer+0x150>
     b46:	e79f      	b.n	a88 <_i2c_m_sync_transfer+0x98>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
     b48:	886a      	ldrh	r2, [r5, #2]
     b4a:	005b      	lsls	r3, r3, #1
     b4c:	21ff      	movs	r1, #255	; 0xff
     b4e:	400b      	ands	r3, r1
     b50:	39fe      	subs	r1, #254	; 0xfe
     b52:	4011      	ands	r1, r2
     b54:	4319      	orrs	r1, r3
     b56:	2204      	movs	r2, #4
     b58:	69fb      	ldr	r3, [r7, #28]
     b5a:	421a      	tst	r2, r3
     b5c:	d1fc      	bne.n	b58 <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     b60:	2280      	movs	r2, #128	; 0x80
     b62:	01d2      	lsls	r2, r2, #7
     b64:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     b66:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     b68:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b6a:	2204      	movs	r2, #4
     b6c:	69fb      	ldr	r3, [r7, #28]
     b6e:	421a      	tst	r2, r3
     b70:	d1fc      	bne.n	b6c <_i2c_m_sync_transfer+0x17c>
     b72:	e7a8      	b.n	ac6 <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     b74:	0753      	lsls	r3, r2, #29
     b76:	d41b      	bmi.n	bb0 <_i2c_m_sync_transfer+0x1c0>
			if (msg->flags & I2C_M_TEN) {
     b78:	886b      	ldrh	r3, [r5, #2]
     b7a:	055b      	lsls	r3, r3, #21
     b7c:	d535      	bpl.n	bea <_i2c_m_sync_transfer+0x1fa>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     b7e:	882b      	ldrh	r3, [r5, #0]
     b80:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     b82:	2106      	movs	r1, #6
     b84:	4019      	ands	r1, r3
     b86:	2204      	movs	r2, #4
     b88:	69fb      	ldr	r3, [r7, #28]
     b8a:	421a      	tst	r2, r3
     b8c:	d1fc      	bne.n	b88 <_i2c_m_sync_transfer+0x198>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b90:	2280      	movs	r2, #128	; 0x80
     b92:	01d2      	lsls	r2, r2, #7
     b94:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     b96:	22f1      	movs	r2, #241	; 0xf1
     b98:	4313      	orrs	r3, r2
     b9a:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     b9c:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b9e:	3aed      	subs	r2, #237	; 0xed
     ba0:	69fb      	ldr	r3, [r7, #28]
     ba2:	421a      	tst	r2, r3
     ba4:	d1fc      	bne.n	ba0 <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
     ba6:	886b      	ldrh	r3, [r5, #2]
     ba8:	4a56      	ldr	r2, [pc, #344]	; (d04 <_i2c_m_sync_transfer+0x314>)
     baa:	4013      	ands	r3, r2
     bac:	806b      	strh	r3, [r5, #2]
     bae:	e066      	b.n	c7e <_i2c_m_sync_transfer+0x28e>
				if (msg->len > 0) {
     bb0:	686b      	ldr	r3, [r5, #4]
     bb2:	2b00      	cmp	r3, #0
     bb4:	dd04      	ble.n	bc0 <_i2c_m_sync_transfer+0x1d0>
					msg->flags |= I2C_M_FAIL;
     bb6:	886b      	ldrh	r3, [r5, #2]
     bb8:	2280      	movs	r2, #128	; 0x80
     bba:	0152      	lsls	r2, r2, #5
     bbc:	4313      	orrs	r3, r2
     bbe:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     bc0:	886b      	ldrh	r3, [r5, #2]
     bc2:	b21b      	sxth	r3, r3
     bc4:	2b00      	cmp	r3, #0
     bc6:	db06      	blt.n	bd6 <_i2c_m_sync_transfer+0x1e6>
				msg->flags &= ~I2C_M_BUSY;
     bc8:	886b      	ldrh	r3, [r5, #2]
     bca:	4a4d      	ldr	r2, [pc, #308]	; (d00 <_i2c_m_sync_transfer+0x310>)
     bcc:	4013      	ands	r3, r2
     bce:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     bd0:	2002      	movs	r0, #2
     bd2:	4240      	negs	r0, r0
     bd4:	e7a0      	b.n	b18 <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     bd6:	687a      	ldr	r2, [r7, #4]
     bd8:	23c0      	movs	r3, #192	; 0xc0
     bda:	029b      	lsls	r3, r3, #10
     bdc:	4313      	orrs	r3, r2
     bde:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     be0:	2304      	movs	r3, #4
     be2:	69fa      	ldr	r2, [r7, #28]
     be4:	4213      	tst	r3, r2
     be6:	d1fc      	bne.n	be2 <_i2c_m_sync_transfer+0x1f2>
     be8:	e7ee      	b.n	bc8 <_i2c_m_sync_transfer+0x1d8>
			if (msg->len == 0) {
     bea:	686b      	ldr	r3, [r5, #4]
     bec:	2b00      	cmp	r3, #0
     bee:	d112      	bne.n	c16 <_i2c_m_sync_transfer+0x226>
				if (msg->flags & I2C_M_STOP) {
     bf0:	886b      	ldrh	r3, [r5, #2]
     bf2:	b21b      	sxth	r3, r3
     bf4:	2b00      	cmp	r3, #0
     bf6:	db04      	blt.n	c02 <_i2c_m_sync_transfer+0x212>
				msg->flags &= ~I2C_M_BUSY;
     bf8:	886b      	ldrh	r3, [r5, #2]
     bfa:	4a41      	ldr	r2, [pc, #260]	; (d00 <_i2c_m_sync_transfer+0x310>)
     bfc:	4013      	ands	r3, r2
     bfe:	806b      	strh	r3, [r5, #2]
     c00:	e03d      	b.n	c7e <_i2c_m_sync_transfer+0x28e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     c02:	687a      	ldr	r2, [r7, #4]
     c04:	23c0      	movs	r3, #192	; 0xc0
     c06:	029b      	lsls	r3, r3, #10
     c08:	4313      	orrs	r3, r2
     c0a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c0c:	2204      	movs	r2, #4
     c0e:	69fb      	ldr	r3, [r7, #28]
     c10:	421a      	tst	r2, r3
     c12:	d1fc      	bne.n	c0e <_i2c_m_sync_transfer+0x21e>
     c14:	e7f0      	b.n	bf8 <_i2c_m_sync_transfer+0x208>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     c16:	68ab      	ldr	r3, [r5, #8]
     c18:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     c1a:	2328      	movs	r3, #40	; 0x28
     c1c:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c1e:	2204      	movs	r2, #4
     c20:	69fb      	ldr	r3, [r7, #28]
     c22:	421a      	tst	r2, r3
     c24:	d1fc      	bne.n	c20 <_i2c_m_sync_transfer+0x230>
				msg->buffer++;
     c26:	68ab      	ldr	r3, [r5, #8]
     c28:	3301      	adds	r3, #1
     c2a:	60ab      	str	r3, [r5, #8]
				msg->len--;
     c2c:	686b      	ldr	r3, [r5, #4]
     c2e:	3b01      	subs	r3, #1
     c30:	606b      	str	r3, [r5, #4]
     c32:	e024      	b.n	c7e <_i2c_m_sync_transfer+0x28e>
	} else if (flags & SB_FLAG) {
     c34:	079b      	lsls	r3, r3, #30
     c36:	d522      	bpl.n	c7e <_i2c_m_sync_transfer+0x28e>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     c38:	686b      	ldr	r3, [r5, #4]
     c3a:	2b00      	cmp	r3, #0
     c3c:	d040      	beq.n	cc0 <_i2c_m_sync_transfer+0x2d0>
     c3e:	0752      	lsls	r2, r2, #29
     c40:	d43e      	bmi.n	cc0 <_i2c_m_sync_transfer+0x2d0>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     c42:	0136      	lsls	r6, r6, #4
     c44:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
     c46:	3b01      	subs	r3, #1
     c48:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     c4a:	2b00      	cmp	r3, #0
     c4c:	d000      	beq.n	c50 <_i2c_m_sync_transfer+0x260>
     c4e:	e11f      	b.n	e90 <_i2c_m_sync_transfer+0x4a0>
     c50:	2e00      	cmp	r6, #0
     c52:	d100      	bne.n	c56 <_i2c_m_sync_transfer+0x266>
     c54:	e122      	b.n	e9c <_i2c_m_sync_transfer+0x4ac>
				if (msg->flags & I2C_M_STOP) {
     c56:	886b      	ldrh	r3, [r5, #2]
     c58:	b21b      	sxth	r3, r3
     c5a:	2b00      	cmp	r3, #0
     c5c:	db1d      	blt.n	c9a <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
     c5e:	886b      	ldrh	r3, [r5, #2]
     c60:	4a27      	ldr	r2, [pc, #156]	; (d00 <_i2c_m_sync_transfer+0x310>)
     c62:	4013      	ands	r3, r2
     c64:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     c66:	68a9      	ldr	r1, [r5, #8]
     c68:	1c4b      	adds	r3, r1, #1
     c6a:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c6c:	2204      	movs	r2, #4
     c6e:	69fb      	ldr	r3, [r7, #28]
     c70:	421a      	tst	r2, r3
     c72:	d1fc      	bne.n	c6e <_i2c_m_sync_transfer+0x27e>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     c74:	2328      	movs	r3, #40	; 0x28
     c76:	5cfb      	ldrb	r3, [r7, r3]
     c78:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     c7a:	2302      	movs	r3, #2
     c7c:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
     c7e:	2600      	movs	r6, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     c80:	2380      	movs	r3, #128	; 0x80
     c82:	005b      	lsls	r3, r3, #1
     c84:	469a      	mov	sl, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     c86:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c88:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
     c8a:	3bff      	subs	r3, #255	; 0xff
     c8c:	469c      	mov	ip, r3
	} else if (flags & SB_FLAG) {
     c8e:	3301      	adds	r3, #1
     c90:	4699      	mov	r9, r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
     c92:	3326      	adds	r3, #38	; 0x26
     c94:	469b      	mov	fp, r3
     c96:	9601      	str	r6, [sp, #4]
     c98:	e0c2      	b.n	e20 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     c9a:	687b      	ldr	r3, [r7, #4]
     c9c:	4a18      	ldr	r2, [pc, #96]	; (d00 <_i2c_m_sync_transfer+0x310>)
     c9e:	4013      	ands	r3, r2
     ca0:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ca2:	3206      	adds	r2, #6
     ca4:	32ff      	adds	r2, #255	; 0xff
     ca6:	69fb      	ldr	r3, [r7, #28]
     ca8:	421a      	tst	r2, r3
     caa:	d1fc      	bne.n	ca6 <_i2c_m_sync_transfer+0x2b6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     cac:	687a      	ldr	r2, [r7, #4]
     cae:	23c0      	movs	r3, #192	; 0xc0
     cb0:	029b      	lsls	r3, r3, #10
     cb2:	4313      	orrs	r3, r2
     cb4:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cb6:	2204      	movs	r2, #4
     cb8:	69fb      	ldr	r3, [r7, #28]
     cba:	421a      	tst	r2, r3
     cbc:	d1fc      	bne.n	cb8 <_i2c_m_sync_transfer+0x2c8>
     cbe:	e7ce      	b.n	c5e <_i2c_m_sync_transfer+0x26e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     cc0:	2302      	movs	r3, #2
     cc2:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
     cc4:	2002      	movs	r0, #2
     cc6:	4240      	negs	r0, r0
     cc8:	e726      	b.n	b18 <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     cca:	6862      	ldr	r2, [r4, #4]
     ccc:	23c0      	movs	r3, #192	; 0xc0
     cce:	029b      	lsls	r3, r3, #10
     cd0:	4313      	orrs	r3, r2
     cd2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cd4:	2204      	movs	r2, #4
     cd6:	69e3      	ldr	r3, [r4, #28]
     cd8:	421a      	tst	r2, r3
     cda:	d1fc      	bne.n	cd6 <_i2c_m_sync_transfer+0x2e6>
     cdc:	e0b5      	b.n	e4a <_i2c_m_sync_transfer+0x45a>
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	000026c0 	.word	0x000026c0
     ce4:	000005bf 	.word	0x000005bf
     ce8:	0000066d 	.word	0x0000066d
     cec:	000005c1 	.word	0x000005c1
     cf0:	00000594 	.word	0x00000594
     cf4:	fffbffff 	.word	0xfffbffff
     cf8:	000007fe 	.word	0x000007fe
     cfc:	0000ffff 	.word	0x0000ffff
     d00:	fffffeff 	.word	0xfffffeff
     d04:	fffffbff 	.word	0xfffffbff
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     d08:	4202      	tst	r2, r0
     d0a:	d11b      	bne.n	d44 <_i2c_m_sync_transfer+0x354>
			if (msg->flags & I2C_M_TEN) {
     d0c:	886b      	ldrh	r3, [r5, #2]
     d0e:	055b      	lsls	r3, r3, #21
     d10:	d535      	bpl.n	d7e <_i2c_m_sync_transfer+0x38e>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     d12:	882b      	ldrh	r3, [r5, #0]
     d14:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     d16:	2006      	movs	r0, #6
     d18:	4018      	ands	r0, r3
     d1a:	69e3      	ldr	r3, [r4, #28]
     d1c:	421a      	tst	r2, r3
     d1e:	d1fc      	bne.n	d1a <_i2c_m_sync_transfer+0x32a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d22:	2680      	movs	r6, #128	; 0x80
     d24:	01f6      	lsls	r6, r6, #7
     d26:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
     d28:	26f1      	movs	r6, #241	; 0xf1
     d2a:	4333      	orrs	r3, r6
     d2c:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     d2e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d30:	69e3      	ldr	r3, [r4, #28]
     d32:	421a      	tst	r2, r3
     d34:	d1fc      	bne.n	d30 <_i2c_m_sync_transfer+0x340>
				msg->flags &= ~I2C_M_TEN;
     d36:	886b      	ldrh	r3, [r5, #2]
     d38:	4878      	ldr	r0, [pc, #480]	; (f1c <_i2c_m_sync_transfer+0x52c>)
     d3a:	4003      	ands	r3, r0
     d3c:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
     d3e:	2300      	movs	r3, #0
     d40:	9301      	str	r3, [sp, #4]
     d42:	e06d      	b.n	e20 <_i2c_m_sync_transfer+0x430>
				if (msg->len > 0) {
     d44:	686b      	ldr	r3, [r5, #4]
     d46:	2b00      	cmp	r3, #0
     d48:	dd04      	ble.n	d54 <_i2c_m_sync_transfer+0x364>
					msg->flags |= I2C_M_FAIL;
     d4a:	886b      	ldrh	r3, [r5, #2]
     d4c:	2080      	movs	r0, #128	; 0x80
     d4e:	0140      	lsls	r0, r0, #5
     d50:	4303      	orrs	r3, r0
     d52:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     d54:	886b      	ldrh	r3, [r5, #2]
     d56:	b21b      	sxth	r3, r3
     d58:	2b00      	cmp	r3, #0
     d5a:	db07      	blt.n	d6c <_i2c_m_sync_transfer+0x37c>
				msg->flags &= ~I2C_M_BUSY;
     d5c:	886b      	ldrh	r3, [r5, #2]
     d5e:	4870      	ldr	r0, [pc, #448]	; (f20 <_i2c_m_sync_transfer+0x530>)
     d60:	4003      	ands	r3, r0
     d62:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     d64:	2302      	movs	r3, #2
     d66:	425b      	negs	r3, r3
     d68:	9301      	str	r3, [sp, #4]
     d6a:	e059      	b.n	e20 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     d6c:	6860      	ldr	r0, [r4, #4]
     d6e:	23c0      	movs	r3, #192	; 0xc0
     d70:	029b      	lsls	r3, r3, #10
     d72:	4303      	orrs	r3, r0
     d74:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d76:	69e3      	ldr	r3, [r4, #28]
     d78:	421a      	tst	r2, r3
     d7a:	d1fc      	bne.n	d76 <_i2c_m_sync_transfer+0x386>
     d7c:	e7ee      	b.n	d5c <_i2c_m_sync_transfer+0x36c>
			if (msg->len == 0) {
     d7e:	686b      	ldr	r3, [r5, #4]
     d80:	2b00      	cmp	r3, #0
     d82:	d113      	bne.n	dac <_i2c_m_sync_transfer+0x3bc>
				if (msg->flags & I2C_M_STOP) {
     d84:	886b      	ldrh	r3, [r5, #2]
     d86:	b21b      	sxth	r3, r3
     d88:	2b00      	cmp	r3, #0
     d8a:	db06      	blt.n	d9a <_i2c_m_sync_transfer+0x3aa>
				msg->flags &= ~I2C_M_BUSY;
     d8c:	886b      	ldrh	r3, [r5, #2]
     d8e:	4864      	ldr	r0, [pc, #400]	; (f20 <_i2c_m_sync_transfer+0x530>)
     d90:	4003      	ands	r3, r0
     d92:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
     d94:	2300      	movs	r3, #0
     d96:	9301      	str	r3, [sp, #4]
     d98:	e042      	b.n	e20 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     d9a:	6860      	ldr	r0, [r4, #4]
     d9c:	23c0      	movs	r3, #192	; 0xc0
     d9e:	029b      	lsls	r3, r3, #10
     da0:	4303      	orrs	r3, r0
     da2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     da4:	69e3      	ldr	r3, [r4, #28]
     da6:	421a      	tst	r2, r3
     da8:	d1fc      	bne.n	da4 <_i2c_m_sync_transfer+0x3b4>
     daa:	e7ef      	b.n	d8c <_i2c_m_sync_transfer+0x39c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     dac:	68ab      	ldr	r3, [r5, #8]
     dae:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     db0:	4658      	mov	r0, fp
     db2:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     db4:	69e3      	ldr	r3, [r4, #28]
     db6:	421a      	tst	r2, r3
     db8:	d1fc      	bne.n	db4 <_i2c_m_sync_transfer+0x3c4>
				msg->buffer++;
     dba:	68ab      	ldr	r3, [r5, #8]
     dbc:	3301      	adds	r3, #1
     dbe:	60ab      	str	r3, [r5, #8]
				msg->len--;
     dc0:	686b      	ldr	r3, [r5, #4]
     dc2:	3b01      	subs	r3, #1
     dc4:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     dc6:	2300      	movs	r3, #0
     dc8:	9301      	str	r3, [sp, #4]
     dca:	e029      	b.n	e20 <_i2c_m_sync_transfer+0x430>
	return I2C_OK;
     dcc:	2600      	movs	r6, #0
     dce:	9601      	str	r6, [sp, #4]
	} else if (flags & SB_FLAG) {
     dd0:	464e      	mov	r6, r9
     dd2:	421e      	tst	r6, r3
     dd4:	d024      	beq.n	e20 <_i2c_m_sync_transfer+0x430>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     dd6:	686b      	ldr	r3, [r5, #4]
     dd8:	2b00      	cmp	r3, #0
     dda:	d04d      	beq.n	e78 <_i2c_m_sync_transfer+0x488>
     ddc:	4202      	tst	r2, r0
     dde:	d14b      	bne.n	e78 <_i2c_m_sync_transfer+0x488>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     de0:	0eff      	lsrs	r7, r7, #27
     de2:	4660      	mov	r0, ip
     de4:	4007      	ands	r7, r0
			msg->len--;
     de6:	3b01      	subs	r3, #1
     de8:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     dea:	2b00      	cmp	r3, #0
     dec:	d000      	beq.n	df0 <_i2c_m_sync_transfer+0x400>
     dee:	e082      	b.n	ef6 <_i2c_m_sync_transfer+0x506>
     df0:	2f00      	cmp	r7, #0
     df2:	d100      	bne.n	df6 <_i2c_m_sync_transfer+0x406>
     df4:	e085      	b.n	f02 <_i2c_m_sync_transfer+0x512>
				if (msg->flags & I2C_M_STOP) {
     df6:	886b      	ldrh	r3, [r5, #2]
     df8:	b21b      	sxth	r3, r3
     dfa:	2b00      	cmp	r3, #0
     dfc:	db2c      	blt.n	e58 <_i2c_m_sync_transfer+0x468>
				msg->flags &= ~I2C_M_BUSY;
     dfe:	886b      	ldrh	r3, [r5, #2]
     e00:	4847      	ldr	r0, [pc, #284]	; (f20 <_i2c_m_sync_transfer+0x530>)
     e02:	4003      	ands	r3, r0
     e04:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     e06:	68a8      	ldr	r0, [r5, #8]
     e08:	1c43      	adds	r3, r0, #1
     e0a:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e0c:	69e3      	ldr	r3, [r4, #28]
     e0e:	421a      	tst	r2, r3
     e10:	d1fc      	bne.n	e0c <_i2c_m_sync_transfer+0x41c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     e12:	465b      	mov	r3, fp
     e14:	5ce3      	ldrb	r3, [r4, r3]
     e16:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e18:	464b      	mov	r3, r9
     e1a:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
     e1c:	2300      	movs	r3, #0
     e1e:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     e20:	886b      	ldrh	r3, [r5, #2]
     e22:	4650      	mov	r0, sl
     e24:	4203      	tst	r3, r0
     e26:	d02d      	beq.n	e84 <_i2c_m_sync_transfer+0x494>
	void *   hw      = i2c_dev->hw;
     e28:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     e2a:	7e33      	ldrb	r3, [r6, #24]
     e2c:	b2db      	uxtb	r3, r3
     e2e:	483d      	ldr	r0, [pc, #244]	; (f24 <_i2c_m_sync_transfer+0x534>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     e30:	4219      	tst	r1, r3
     e32:	d141      	bne.n	eb8 <_i2c_m_sync_transfer+0x4c8>
     e34:	7e33      	ldrb	r3, [r6, #24]
     e36:	b2db      	uxtb	r3, r3
     e38:	3801      	subs	r0, #1
		if (timeout-- == 0) {
     e3a:	2800      	cmp	r0, #0
     e3c:	d1f8      	bne.n	e30 <_i2c_m_sync_transfer+0x440>
			if (msg->flags & I2C_M_STOP) {
     e3e:	4643      	mov	r3, r8
     e40:	885b      	ldrh	r3, [r3, #2]
     e42:	b21b      	sxth	r3, r3
     e44:	2b00      	cmp	r3, #0
     e46:	da00      	bge.n	e4a <_i2c_m_sync_transfer+0x45a>
     e48:	e73f      	b.n	cca <_i2c_m_sync_transfer+0x2da>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     e4a:	886b      	ldrh	r3, [r5, #2]
     e4c:	4a34      	ldr	r2, [pc, #208]	; (f20 <_i2c_m_sync_transfer+0x530>)
     e4e:	4013      	ands	r3, r2
     e50:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
     e52:	2005      	movs	r0, #5
     e54:	4240      	negs	r0, r0
			return ret;
     e56:	e663      	b.n	b20 <_i2c_m_sync_transfer+0x130>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     e58:	6863      	ldr	r3, [r4, #4]
     e5a:	4831      	ldr	r0, [pc, #196]	; (f20 <_i2c_m_sync_transfer+0x530>)
     e5c:	4003      	ands	r3, r0
     e5e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e60:	69e3      	ldr	r3, [r4, #28]
     e62:	421a      	tst	r2, r3
     e64:	d1fc      	bne.n	e60 <_i2c_m_sync_transfer+0x470>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     e66:	6860      	ldr	r0, [r4, #4]
     e68:	23c0      	movs	r3, #192	; 0xc0
     e6a:	029b      	lsls	r3, r3, #10
     e6c:	4303      	orrs	r3, r0
     e6e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e70:	69e3      	ldr	r3, [r4, #28]
     e72:	421a      	tst	r2, r3
     e74:	d1fc      	bne.n	e70 <_i2c_m_sync_transfer+0x480>
     e76:	e7c2      	b.n	dfe <_i2c_m_sync_transfer+0x40e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e78:	464b      	mov	r3, r9
     e7a:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
     e7c:	2302      	movs	r3, #2
     e7e:	425b      	negs	r3, r3
     e80:	9301      	str	r3, [sp, #4]
     e82:	e7cd      	b.n	e20 <_i2c_m_sync_transfer+0x430>
     e84:	9e01      	ldr	r6, [sp, #4]
     e86:	0030      	movs	r0, r6
     e88:	e64a      	b.n	b20 <_i2c_m_sync_transfer+0x130>
		return I2C_ERR_BUSY;
     e8a:	2006      	movs	r0, #6
     e8c:	4240      	negs	r0, r0
     e8e:	e647      	b.n	b20 <_i2c_m_sync_transfer+0x130>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     e90:	2b01      	cmp	r3, #1
     e92:	d000      	beq.n	e96 <_i2c_m_sync_transfer+0x4a6>
     e94:	e6e7      	b.n	c66 <_i2c_m_sync_transfer+0x276>
     e96:	2e00      	cmp	r6, #0
     e98:	d100      	bne.n	e9c <_i2c_m_sync_transfer+0x4ac>
     e9a:	e6e4      	b.n	c66 <_i2c_m_sync_transfer+0x276>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     e9c:	687a      	ldr	r2, [r7, #4]
     e9e:	2380      	movs	r3, #128	; 0x80
     ea0:	02db      	lsls	r3, r3, #11
     ea2:	4313      	orrs	r3, r2
     ea4:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ea6:	2204      	movs	r2, #4
     ea8:	69fb      	ldr	r3, [r7, #28]
     eaa:	421a      	tst	r2, r3
     eac:	d1fc      	bne.n	ea8 <_i2c_m_sync_transfer+0x4b8>
			if (msg->len == 0) {
     eae:	686b      	ldr	r3, [r5, #4]
     eb0:	2b00      	cmp	r3, #0
     eb2:	d100      	bne.n	eb6 <_i2c_m_sync_transfer+0x4c6>
     eb4:	e6cf      	b.n	c56 <_i2c_m_sync_transfer+0x266>
     eb6:	e6d6      	b.n	c66 <_i2c_m_sync_transfer+0x276>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     eb8:	6827      	ldr	r7, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     eba:	69e0      	ldr	r0, [r4, #28]
     ebc:	4202      	tst	r2, r0
     ebe:	d1fc      	bne.n	eba <_i2c_m_sync_transfer+0x4ca>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     ec0:	8b60      	ldrh	r0, [r4, #26]
     ec2:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
     ec4:	4666      	mov	r6, ip
     ec6:	421e      	tst	r6, r3
     ec8:	d100      	bne.n	ecc <_i2c_m_sync_transfer+0x4dc>
     eca:	e77f      	b.n	dcc <_i2c_m_sync_transfer+0x3dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     ecc:	464b      	mov	r3, r9
     ece:	4203      	tst	r3, r0
     ed0:	d100      	bne.n	ed4 <_i2c_m_sync_transfer+0x4e4>
     ed2:	e719      	b.n	d08 <_i2c_m_sync_transfer+0x318>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     ed4:	7626      	strb	r6, [r4, #24]
			msg->flags |= I2C_M_FAIL;
     ed6:	886b      	ldrh	r3, [r5, #2]
     ed8:	2680      	movs	r6, #128	; 0x80
     eda:	0176      	lsls	r6, r6, #5
     edc:	4333      	orrs	r3, r6
     ede:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     ee0:	886b      	ldrh	r3, [r5, #2]
     ee2:	4e0f      	ldr	r6, [pc, #60]	; (f20 <_i2c_m_sync_transfer+0x530>)
     ee4:	4033      	ands	r3, r6
     ee6:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     ee8:	4663      	mov	r3, ip
     eea:	4018      	ands	r0, r3
			return I2C_ERR_BAD_ADDRESS;
     eec:	4246      	negs	r6, r0
     eee:	4146      	adcs	r6, r0
     ef0:	1f73      	subs	r3, r6, #5
     ef2:	9301      	str	r3, [sp, #4]
     ef4:	e794      	b.n	e20 <_i2c_m_sync_transfer+0x430>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     ef6:	2b01      	cmp	r3, #1
     ef8:	d000      	beq.n	efc <_i2c_m_sync_transfer+0x50c>
     efa:	e784      	b.n	e06 <_i2c_m_sync_transfer+0x416>
     efc:	2f00      	cmp	r7, #0
     efe:	d100      	bne.n	f02 <_i2c_m_sync_transfer+0x512>
     f00:	e781      	b.n	e06 <_i2c_m_sync_transfer+0x416>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     f02:	6860      	ldr	r0, [r4, #4]
     f04:	2380      	movs	r3, #128	; 0x80
     f06:	02db      	lsls	r3, r3, #11
     f08:	4303      	orrs	r3, r0
     f0a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f0c:	69e3      	ldr	r3, [r4, #28]
     f0e:	421a      	tst	r2, r3
     f10:	d1fc      	bne.n	f0c <_i2c_m_sync_transfer+0x51c>
			if (msg->len == 0) {
     f12:	686b      	ldr	r3, [r5, #4]
     f14:	2b00      	cmp	r3, #0
     f16:	d100      	bne.n	f1a <_i2c_m_sync_transfer+0x52a>
     f18:	e76d      	b.n	df6 <_i2c_m_sync_transfer+0x406>
     f1a:	e774      	b.n	e06 <_i2c_m_sync_transfer+0x416>
     f1c:	fffffbff 	.word	0xfffffbff
     f20:	fffffeff 	.word	0xfffffeff
     f24:	0000ffff 	.word	0x0000ffff

00000f28 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     f28:	4b0e      	ldr	r3, [pc, #56]	; (f64 <_sysctrl_init_sources+0x3c>)
     f2a:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     f2c:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     f2e:	480e      	ldr	r0, [pc, #56]	; (f68 <_sysctrl_init_sources+0x40>)
     f30:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     f32:	0f92      	lsrs	r2, r2, #30
     f34:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     f36:	2002      	movs	r0, #2
     f38:	4302      	orrs	r2, r0
     f3a:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     f3c:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     f3e:	699a      	ldr	r2, [r3, #24]
     f40:	4302      	orrs	r2, r0
     f42:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     f44:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     f46:	211f      	movs	r1, #31
     f48:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     f4a:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     f4c:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     f4e:	2208      	movs	r2, #8
     f50:	68cb      	ldr	r3, [r1, #12]
     f52:	421a      	tst	r2, r3
     f54:	d0fc      	beq.n	f50 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     f56:	4a03      	ldr	r2, [pc, #12]	; (f64 <_sysctrl_init_sources+0x3c>)
     f58:	6a13      	ldr	r3, [r2, #32]
     f5a:	2180      	movs	r1, #128	; 0x80
     f5c:	430b      	orrs	r3, r1
     f5e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     f60:	4770      	bx	lr
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	40000800 	.word	0x40000800
     f68:	0fff0000 	.word	0x0fff0000

00000f6c <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     f6c:	4a02      	ldr	r2, [pc, #8]	; (f78 <_sysctrl_init_referenced_generators+0xc>)
     f6e:	6993      	ldr	r3, [r2, #24]
     f70:	2102      	movs	r1, #2
     f72:	438b      	bics	r3, r1
     f74:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     f76:	4770      	bx	lr
     f78:	40000800 	.word	0x40000800

00000f7c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     f7c:	4b02      	ldr	r3, [pc, #8]	; (f88 <_delay_init+0xc>)
     f7e:	4a03      	ldr	r2, [pc, #12]	; (f8c <_delay_init+0x10>)
     f80:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     f82:	2205      	movs	r2, #5
     f84:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     f86:	4770      	bx	lr
     f88:	e000e010 	.word	0xe000e010
     f8c:	00ffffff 	.word	0x00ffffff

00000f90 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     f90:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     f92:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     f94:	1e5e      	subs	r6, r3, #1
     f96:	b2f6      	uxtb	r6, r6
     f98:	2b00      	cmp	r3, #0
     f9a:	d013      	beq.n	fc4 <_delay_cycles+0x34>
     f9c:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     f9e:	4a0e      	ldr	r2, [pc, #56]	; (fd8 <_delay_cycles+0x48>)
     fa0:	4d0e      	ldr	r5, [pc, #56]	; (fdc <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     fa2:	2080      	movs	r0, #128	; 0x80
     fa4:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     fa6:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     fa8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     faa:	6813      	ldr	r3, [r2, #0]
     fac:	4203      	tst	r3, r0
     fae:	d0fc      	beq.n	faa <_delay_cycles+0x1a>
	while (n--) {
     fb0:	3c01      	subs	r4, #1
     fb2:	b2e4      	uxtb	r4, r4
     fb4:	2cff      	cmp	r4, #255	; 0xff
     fb6:	d1f6      	bne.n	fa6 <_delay_cycles+0x16>
     fb8:	0633      	lsls	r3, r6, #24
     fba:	1af6      	subs	r6, r6, r3
     fbc:	4b08      	ldr	r3, [pc, #32]	; (fe0 <_delay_cycles+0x50>)
     fbe:	469c      	mov	ip, r3
     fc0:	4461      	add	r1, ip
     fc2:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     fc4:	4b04      	ldr	r3, [pc, #16]	; (fd8 <_delay_cycles+0x48>)
     fc6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     fc8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     fca:	0019      	movs	r1, r3
     fcc:	2280      	movs	r2, #128	; 0x80
     fce:	0252      	lsls	r2, r2, #9
     fd0:	680b      	ldr	r3, [r1, #0]
     fd2:	4213      	tst	r3, r2
     fd4:	d0fc      	beq.n	fd0 <_delay_cycles+0x40>
		;
}
     fd6:	bd70      	pop	{r4, r5, r6, pc}
     fd8:	e000e010 	.word	0xe000e010
     fdc:	00ffffff 	.word	0x00ffffff
     fe0:	ff000001 	.word	0xff000001

00000fe4 <main>:
#include "atmel_start.h"
#include <hal_gpio.h>
#include <hal_delay.h>
#include "SSD1306_I2C.h"
int main(void)
{
     fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
     fe6:	46d6      	mov	lr, sl
     fe8:	464f      	mov	r7, r9
     fea:	b580      	push	{r7, lr}
     fec:	b083      	sub	sp, #12
	atmel_start_init();
     fee:	4b50      	ldr	r3, [pc, #320]	; (1130 <main+0x14c>)
     ff0:	4798      	blx	r3
	 er_oled_begin(&I2C0);
     ff2:	4850      	ldr	r0, [pc, #320]	; (1134 <main+0x150>)
     ff4:	4b50      	ldr	r3, [pc, #320]	; (1138 <main+0x154>)
     ff6:	4798      	blx	r3
	 er_oled_clear(oled_buf);
     ff8:	4c50      	ldr	r4, [pc, #320]	; (113c <main+0x158>)
     ffa:	0020      	movs	r0, r4
     ffc:	4b50      	ldr	r3, [pc, #320]	; (1140 <main+0x15c>)
     ffe:	4798      	blx	r3
	 er_oled_display(&I2C0,oled_buf);
    1000:	0021      	movs	r1, r4
    1002:	484c      	ldr	r0, [pc, #304]	; (1134 <main+0x150>)
    1004:	4b4f      	ldr	r3, [pc, #316]	; (1144 <main+0x160>)
    1006:	469a      	mov	sl, r3
    1008:	4798      	blx	r3
	 delay_ms(3000);
    100a:	484f      	ldr	r0, [pc, #316]	; (1148 <main+0x164>)
    100c:	4f4f      	ldr	r7, [pc, #316]	; (114c <main+0x168>)
    100e:	47b8      	blx	r7
	 command(&I2C0,0xa7);//--set Negative display
    1010:	21a7      	movs	r1, #167	; 0xa7
    1012:	4848      	ldr	r0, [pc, #288]	; (1134 <main+0x150>)
    1014:	4d4e      	ldr	r5, [pc, #312]	; (1150 <main+0x16c>)
    1016:	47a8      	blx	r5
	 delay_ms(3000);
    1018:	484b      	ldr	r0, [pc, #300]	; (1148 <main+0x164>)
    101a:	47b8      	blx	r7
	 command(&I2C0,0xa6);//--set normal display
    101c:	21a6      	movs	r1, #166	; 0xa6
    101e:	4845      	ldr	r0, [pc, #276]	; (1134 <main+0x150>)
    1020:	47a8      	blx	r5
	 delay_ms(10);
    1022:	200a      	movs	r0, #10
    1024:	47b8      	blx	r7
	 // print the word 'scan' on the display
	 er_oled_char(16,0,'s',16,1,oled_buf);
    1026:	9401      	str	r4, [sp, #4]
    1028:	2601      	movs	r6, #1
    102a:	9600      	str	r6, [sp, #0]
    102c:	2310      	movs	r3, #16
    102e:	2273      	movs	r2, #115	; 0x73
    1030:	2100      	movs	r1, #0
    1032:	2010      	movs	r0, #16
    1034:	4d47      	ldr	r5, [pc, #284]	; (1154 <main+0x170>)
    1036:	47a8      	blx	r5
	 er_oled_char(24,0,'c',16,1,oled_buf);
    1038:	9401      	str	r4, [sp, #4]
    103a:	9600      	str	r6, [sp, #0]
    103c:	2310      	movs	r3, #16
    103e:	2263      	movs	r2, #99	; 0x63
    1040:	2100      	movs	r1, #0
    1042:	2018      	movs	r0, #24
    1044:	47a8      	blx	r5
	 er_oled_char(32,0,'a',16,1,oled_buf);
    1046:	9401      	str	r4, [sp, #4]
    1048:	9600      	str	r6, [sp, #0]
    104a:	2310      	movs	r3, #16
    104c:	2261      	movs	r2, #97	; 0x61
    104e:	2100      	movs	r1, #0
    1050:	2020      	movs	r0, #32
    1052:	47a8      	blx	r5
	 er_oled_char(40,0,'n',16,1,oled_buf);
    1054:	9401      	str	r4, [sp, #4]
    1056:	9600      	str	r6, [sp, #0]
    1058:	2310      	movs	r3, #16
    105a:	226e      	movs	r2, #110	; 0x6e
    105c:	2100      	movs	r1, #0
    105e:	2028      	movs	r0, #40	; 0x28
    1060:	47a8      	blx	r5
	 
	 er_oled_char(80,0,'1',16,1,oled_buf);
    1062:	9401      	str	r4, [sp, #4]
    1064:	9600      	str	r6, [sp, #0]
    1066:	2310      	movs	r3, #16
    1068:	2231      	movs	r2, #49	; 0x31
    106a:	2100      	movs	r1, #0
    106c:	2050      	movs	r0, #80	; 0x50
    106e:	47a8      	blx	r5
	 er_oled_char(88,0,'8',16,1,oled_buf);
    1070:	9401      	str	r4, [sp, #4]
    1072:	9600      	str	r6, [sp, #0]
    1074:	2310      	movs	r3, #16
    1076:	2238      	movs	r2, #56	; 0x38
    1078:	2100      	movs	r1, #0
    107a:	2058      	movs	r0, #88	; 0x58
    107c:	47a8      	blx	r5
	 er_oled_char(96,0,':',16,1,oled_buf);
    107e:	9401      	str	r4, [sp, #4]
    1080:	9600      	str	r6, [sp, #0]
    1082:	2310      	movs	r3, #16
    1084:	223a      	movs	r2, #58	; 0x3a
    1086:	2100      	movs	r1, #0
    1088:	2060      	movs	r0, #96	; 0x60
    108a:	47a8      	blx	r5
	 er_oled_char(104,0,'4',16,1,oled_buf);
    108c:	9401      	str	r4, [sp, #4]
    108e:	9600      	str	r6, [sp, #0]
    1090:	2310      	movs	r3, #16
    1092:	2234      	movs	r2, #52	; 0x34
    1094:	2100      	movs	r1, #0
    1096:	2068      	movs	r0, #104	; 0x68
    1098:	47a8      	blx	r5
	 er_oled_char(112,0,'7',16,1,oled_buf);
    109a:	9401      	str	r4, [sp, #4]
    109c:	9600      	str	r6, [sp, #0]
    109e:	2310      	movs	r3, #16
    10a0:	2237      	movs	r2, #55	; 0x37
    10a2:	2100      	movs	r1, #0
    10a4:	2070      	movs	r0, #112	; 0x70
    10a6:	47a8      	blx	r5
	 er_oled_display(&I2C0,oled_buf);
    10a8:	0021      	movs	r1, r4
    10aa:	4822      	ldr	r0, [pc, #136]	; (1134 <main+0x150>)
    10ac:	47d0      	blx	sl
	 // to control the blink for the time dot
	 bool dot_blink=1;
	 delay_ms(3000);
    10ae:	4826      	ldr	r0, [pc, #152]	; (1148 <main+0x164>)
    10b0:	47b8      	blx	r7
    10b2:	2400      	movs	r4, #0
	 bool dot_blink=1;
    10b4:	2501      	movs	r5, #1
	 
		for (uint16_t num_try=0;num_try<65000;num_try+=10)
		{
			// set the x start, then y start point with the X axis increment value
			print_num(num_try,16,16,16);
    10b6:	4b28      	ldr	r3, [pc, #160]	; (1158 <main+0x174>)
    10b8:	469a      	mov	sl, r3
			delay_ms(500);
    10ba:	4f24      	ldr	r7, [pc, #144]	; (114c <main+0x168>)
    10bc:	e00d      	b.n	10da <main+0xf6>
			dot_blink =!dot_blink;
			if(dot_blink){er_oled_char(96,0,':',16,1,oled_buf);}
			else {er_oled_char(96,0,' ',16,1,oled_buf);}
    10be:	4b1f      	ldr	r3, [pc, #124]	; (113c <main+0x158>)
    10c0:	9301      	str	r3, [sp, #4]
    10c2:	2301      	movs	r3, #1
    10c4:	9300      	str	r3, [sp, #0]
    10c6:	330f      	adds	r3, #15
    10c8:	2220      	movs	r2, #32
    10ca:	2100      	movs	r1, #0
    10cc:	2060      	movs	r0, #96	; 0x60
    10ce:	4e21      	ldr	r6, [pc, #132]	; (1154 <main+0x170>)
    10d0:	47b0      	blx	r6
    10d2:	340a      	adds	r4, #10
		for (uint16_t num_try=0;num_try<65000;num_try+=10)
    10d4:	4b21      	ldr	r3, [pc, #132]	; (115c <main+0x178>)
    10d6:	429c      	cmp	r4, r3
    10d8:	d015      	beq.n	1106 <main+0x122>
			print_num(num_try,16,16,16);
    10da:	2310      	movs	r3, #16
    10dc:	2210      	movs	r2, #16
    10de:	2110      	movs	r1, #16
    10e0:	0020      	movs	r0, r4
    10e2:	47d0      	blx	sl
			delay_ms(500);
    10e4:	20fa      	movs	r0, #250	; 0xfa
    10e6:	0040      	lsls	r0, r0, #1
    10e8:	47b8      	blx	r7
			dot_blink =!dot_blink;
    10ea:	2301      	movs	r3, #1
    10ec:	405d      	eors	r5, r3
			if(dot_blink){er_oled_char(96,0,':',16,1,oled_buf);}
    10ee:	d0e6      	beq.n	10be <main+0xda>
    10f0:	4b12      	ldr	r3, [pc, #72]	; (113c <main+0x158>)
    10f2:	9301      	str	r3, [sp, #4]
    10f4:	2301      	movs	r3, #1
    10f6:	9300      	str	r3, [sp, #0]
    10f8:	330f      	adds	r3, #15
    10fa:	223a      	movs	r2, #58	; 0x3a
    10fc:	2100      	movs	r1, #0
    10fe:	2060      	movs	r0, #96	; 0x60
    1100:	4e14      	ldr	r6, [pc, #80]	; (1154 <main+0x170>)
    1102:	47b0      	blx	r6
    1104:	e7e5      	b.n	10d2 <main+0xee>
		}
	 er_oled_display(&I2C0,oled_buf);
    1106:	4c0d      	ldr	r4, [pc, #52]	; (113c <main+0x158>)
    1108:	0021      	movs	r1, r4
    110a:	480a      	ldr	r0, [pc, #40]	; (1134 <main+0x150>)
    110c:	4b0d      	ldr	r3, [pc, #52]	; (1144 <main+0x160>)
    110e:	4798      	blx	r3
	 er_oled_clear(oled_buf);
    1110:	0020      	movs	r0, r4
    1112:	4b0b      	ldr	r3, [pc, #44]	; (1140 <main+0x15c>)
    1114:	4798      	blx	r3
	while (true) {
		delay_ms(500);
    1116:	25fa      	movs	r5, #250	; 0xfa
    1118:	006d      	lsls	r5, r5, #1
    111a:	4e0c      	ldr	r6, [pc, #48]	; (114c <main+0x168>)
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    111c:	24c0      	movs	r4, #192	; 0xc0
    111e:	05e4      	lsls	r4, r4, #23
    1120:	0028      	movs	r0, r5
    1122:	47b0      	blx	r6
    1124:	2280      	movs	r2, #128	; 0x80
    1126:	05d2      	lsls	r2, r2, #23
    1128:	239c      	movs	r3, #156	; 0x9c
    112a:	50e2      	str	r2, [r4, r3]
    112c:	e7f8      	b.n	1120 <main+0x13c>
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	00000115 	.word	0x00000115
    1134:	20000094 	.word	0x20000094
    1138:	000011e1 	.word	0x000011e1
    113c:	200000d4 	.word	0x200000d4
    1140:	00001289 	.word	0x00001289
    1144:	0000129d 	.word	0x0000129d
    1148:	00000bb8 	.word	0x00000bb8
    114c:	000003b5 	.word	0x000003b5
    1150:	000011c1 	.word	0x000011c1
    1154:	000013f1 	.word	0x000013f1
    1158:	000014b9 	.word	0x000014b9
    115c:	0000fde8 	.word	0x0000fde8

00001160 <I2C_driver_init>:
#include "atmel_start.h"
#include "SSD1306_I2C.h"
#include "OLED_font.h"

void I2C_driver_init(struct i2c_m_sync_desc *I2C_SSD_OLED)
{
    1160:	b510      	push	{r4, lr}
    1162:	0004      	movs	r4, r0
	
	//i2c_m_sync_get_io_descriptor(&I2C0, &I2C_SSD1306_io);
	i2c_m_sync_get_io_descriptor(I2C_SSD_OLED, &I2C_SSD1306_io);
    1164:	4906      	ldr	r1, [pc, #24]	; (1180 <I2C_driver_init+0x20>)
    1166:	4b07      	ldr	r3, [pc, #28]	; (1184 <I2C_driver_init+0x24>)
    1168:	4798      	blx	r3
	i2c_m_sync_enable(I2C_SSD_OLED);
    116a:	0020      	movs	r0, r4
    116c:	4b06      	ldr	r3, [pc, #24]	; (1188 <I2C_driver_init+0x28>)
    116e:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(I2C_SSD_OLED, IIC_ADDRESS, I2C_M_SEVEN);
    1170:	2280      	movs	r2, #128	; 0x80
    1172:	0112      	lsls	r2, r2, #4
    1174:	213c      	movs	r1, #60	; 0x3c
    1176:	0020      	movs	r0, r4
    1178:	4b04      	ldr	r3, [pc, #16]	; (118c <I2C_driver_init+0x2c>)
    117a:	4798      	blx	r3
	//io_write(I2C0_io, (uint8_t *)"Hello World!", 12);
}
    117c:	bd10      	pop	{r4, pc}
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	200000c0 	.word	0x200000c0
    1184:	000004a1 	.word	0x000004a1
    1188:	00000475 	.word	0x00000475
    118c:	00000481 	.word	0x00000481

00001190 <I2C_Write_Byte>:
void I2C_Write_Byte(struct i2c_m_sync_desc *I2C_SSD_OLED,uint8_t value, uint8_t Cmd)
{
    1190:	b510      	push	{r4, lr}
	// prepare the packet first
	I2C_data_array[0]=Cmd;
    1192:	4b07      	ldr	r3, [pc, #28]	; (11b0 <I2C_Write_Byte+0x20>)
    1194:	701a      	strb	r2, [r3, #0]
	I2C_data_array[1]=value;
    1196:	7059      	strb	r1, [r3, #1]
	//use this
	//io_write(I2C_SSD1306_io,I2C_data_array, I2C_data_array_size);
	//or use this
	i2c_msg_SSD1306.addr=IIC_ADDRESS;
    1198:	4906      	ldr	r1, [pc, #24]	; (11b4 <I2C_Write_Byte+0x24>)
    119a:	223c      	movs	r2, #60	; 0x3c
    119c:	800a      	strh	r2, [r1, #0]
	i2c_msg_SSD1306.flags=I2C_M_STOP;
    119e:	4a06      	ldr	r2, [pc, #24]	; (11b8 <I2C_Write_Byte+0x28>)
    11a0:	804a      	strh	r2, [r1, #2]
	i2c_msg_SSD1306.buffer=I2C_data_array;
    11a2:	608b      	str	r3, [r1, #8]
	i2c_msg_SSD1306.len=I2C_data_array_size;
    11a4:	2302      	movs	r3, #2
    11a6:	604b      	str	r3, [r1, #4]
	
	i2c_m_sync_transfer(I2C_SSD_OLED, &i2c_msg_SSD1306);
    11a8:	4b04      	ldr	r3, [pc, #16]	; (11bc <I2C_Write_Byte+0x2c>)
    11aa:	4798      	blx	r3
}
    11ac:	bd10      	pop	{r4, pc}
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	200000d0 	.word	0x200000d0
    11b4:	200000c4 	.word	0x200000c4
    11b8:	ffff8000 	.word	0xffff8000
    11bc:	00000495 	.word	0x00000495

000011c0 <command>:

void command(struct i2c_m_sync_desc *I2C_SSD_OLED,uint8_t Reg)
{
    11c0:	b510      	push	{r4, lr}
	I2C_Write_Byte(I2C_SSD_OLED,Reg, IIC_CMD);
    11c2:	2200      	movs	r2, #0
    11c4:	4b01      	ldr	r3, [pc, #4]	; (11cc <command+0xc>)
    11c6:	4798      	blx	r3
}
    11c8:	bd10      	pop	{r4, pc}
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	00001191 	.word	0x00001191

000011d0 <data>:
void data(struct i2c_m_sync_desc *I2C_SSD_OLED,uint8_t Data)
{
    11d0:	b510      	push	{r4, lr}
	I2C_Write_Byte(I2C_SSD_OLED,Data, IIC_RAM);
    11d2:	2240      	movs	r2, #64	; 0x40
    11d4:	4b01      	ldr	r3, [pc, #4]	; (11dc <data+0xc>)
    11d6:	4798      	blx	r3
}
    11d8:	bd10      	pop	{r4, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	00001191 	.word	0x00001191

000011e0 <er_oled_begin>:

void er_oled_begin(struct i2c_m_sync_desc *I2C_SSD_OLED)
{
    11e0:	b570      	push	{r4, r5, r6, lr}
    11e2:	0004      	movs	r4, r0
	delay(10);
	digitalWrite(OLED_RST, LOW);
	delay(10);
	digitalWrite(OLED_RST, HIGH);
	*/
	I2C_driver_init(I2C_SSD_OLED);
    11e4:	4b25      	ldr	r3, [pc, #148]	; (127c <er_oled_begin+0x9c>)
    11e6:	4798      	blx	r3
	delay_ms(20);
    11e8:	2014      	movs	r0, #20
    11ea:	4b25      	ldr	r3, [pc, #148]	; (1280 <er_oled_begin+0xa0>)
    11ec:	4798      	blx	r3
	command(I2C_SSD_OLED,0xae);//--turn off oled panel
    11ee:	21ae      	movs	r1, #174	; 0xae
    11f0:	0020      	movs	r0, r4
    11f2:	4d24      	ldr	r5, [pc, #144]	; (1284 <er_oled_begin+0xa4>)
    11f4:	47a8      	blx	r5
	
	command(I2C_SSD_OLED,0xd5);//--set display clock divide ratio/oscillator frequency
    11f6:	21d5      	movs	r1, #213	; 0xd5
    11f8:	0020      	movs	r0, r4
    11fa:	47a8      	blx	r5
	command(I2C_SSD_OLED,0x80);//--set divide ratio
    11fc:	2180      	movs	r1, #128	; 0x80
    11fe:	0020      	movs	r0, r4
    1200:	47a8      	blx	r5

	command(I2C_SSD_OLED,0xa8);//--set multiplex ratio(1 to 64)
    1202:	21a8      	movs	r1, #168	; 0xa8
    1204:	0020      	movs	r0, r4
    1206:	47a8      	blx	r5
	command(I2C_SSD_OLED,0x3f);//--1/64 duty
    1208:	213f      	movs	r1, #63	; 0x3f
    120a:	0020      	movs	r0, r4
    120c:	47a8      	blx	r5

	command(I2C_SSD_OLED,0xd3);//-set display offset
    120e:	21d3      	movs	r1, #211	; 0xd3
    1210:	0020      	movs	r0, r4
    1212:	47a8      	blx	r5
	command(I2C_SSD_OLED,0x00);//-not offset
    1214:	2100      	movs	r1, #0
    1216:	0020      	movs	r0, r4
    1218:	47a8      	blx	r5

	command(I2C_SSD_OLED,0x8d);//--set Charge Pump enable/disable
    121a:	218d      	movs	r1, #141	; 0x8d
    121c:	0020      	movs	r0, r4
    121e:	47a8      	blx	r5
	command(I2C_SSD_OLED,0x14);//--set(0x10) disable
    1220:	2114      	movs	r1, #20
    1222:	0020      	movs	r0, r4
    1224:	47a8      	blx	r5

	command(I2C_SSD_OLED,0x40);//--set start line address
    1226:	2140      	movs	r1, #64	; 0x40
    1228:	0020      	movs	r0, r4
    122a:	47a8      	blx	r5
	//all good
	command(I2C_SSD_OLED,0xa6);//--set normal display
    122c:	21a6      	movs	r1, #166	; 0xa6
    122e:	0020      	movs	r0, r4
    1230:	47a8      	blx	r5

	command(I2C_SSD_OLED,0xa4);//Disable Entire Display On
    1232:	21a4      	movs	r1, #164	; 0xa4
    1234:	0020      	movs	r0, r4
    1236:	47a8      	blx	r5

	command(I2C_SSD_OLED,0xa1);//--set segment re-map 128 to 0
    1238:	21a1      	movs	r1, #161	; 0xa1
    123a:	0020      	movs	r0, r4
    123c:	47a8      	blx	r5

	command(I2C_SSD_OLED,0xC8);//--Set COM Output Scan Direction 64 to 0
    123e:	21c8      	movs	r1, #200	; 0xc8
    1240:	0020      	movs	r0, r4
    1242:	47a8      	blx	r5

	command(I2C_SSD_OLED,0xda);//--set com pins hardware configuration
    1244:	21da      	movs	r1, #218	; 0xda
    1246:	0020      	movs	r0, r4
    1248:	47a8      	blx	r5
	command(I2C_SSD_OLED,0x12);
    124a:	2112      	movs	r1, #18
    124c:	0020      	movs	r0, r4
    124e:	47a8      	blx	r5

	command(I2C_SSD_OLED,0x81);//--set contrast control register
    1250:	2181      	movs	r1, #129	; 0x81
    1252:	0020      	movs	r0, r4
    1254:	47a8      	blx	r5
	command(I2C_SSD_OLED,0xcf);
    1256:	21cf      	movs	r1, #207	; 0xcf
    1258:	0020      	movs	r0, r4
    125a:	47a8      	blx	r5

	command(I2C_SSD_OLED,0xd9);//--set pre-charge period
    125c:	21d9      	movs	r1, #217	; 0xd9
    125e:	0020      	movs	r0, r4
    1260:	47a8      	blx	r5
	command(I2C_SSD_OLED,0xf1);
    1262:	21f1      	movs	r1, #241	; 0xf1
    1264:	0020      	movs	r0, r4
    1266:	47a8      	blx	r5

	command(I2C_SSD_OLED,0xdb);//--set vcomh
    1268:	21db      	movs	r1, #219	; 0xdb
    126a:	0020      	movs	r0, r4
    126c:	47a8      	blx	r5
	command(I2C_SSD_OLED,0x40);
    126e:	2140      	movs	r1, #64	; 0x40
    1270:	0020      	movs	r0, r4
    1272:	47a8      	blx	r5
	
	command(I2C_SSD_OLED,0xaf);//--turn on oled panel
    1274:	21af      	movs	r1, #175	; 0xaf
    1276:	0020      	movs	r0, r4
    1278:	47a8      	blx	r5
}
    127a:	bd70      	pop	{r4, r5, r6, pc}
    127c:	00001161 	.word	0x00001161
    1280:	000003b5 	.word	0x000003b5
    1284:	000011c1 	.word	0x000011c1

00001288 <er_oled_clear>:

void er_oled_clear(uint8_t* SSD_buffer)
{
    1288:	2380      	movs	r3, #128	; 0x80
    128a:	00db      	lsls	r3, r3, #3
    128c:	18c2      	adds	r2, r0, r3
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
	{
		SSD_buffer[i] = 0;
    128e:	2300      	movs	r3, #0
    1290:	7003      	strb	r3, [r0, #0]
    1292:	3001      	adds	r0, #1
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
    1294:	4290      	cmp	r0, r2
    1296:	d1fb      	bne.n	1290 <er_oled_clear+0x8>
	}
}
    1298:	4770      	bx	lr
	...

0000129c <er_oled_display>:

void er_oled_display(struct i2c_m_sync_desc *I2C_SSD_OLED,uint8_t* SSD_buffer)
{    uint8_t page,i;
    129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    129e:	46ce      	mov	lr, r9
    12a0:	4647      	mov	r7, r8
    12a2:	b580      	push	{r7, lr}
    12a4:	0006      	movs	r6, r0
    12a6:	3180      	adds	r1, #128	; 0x80
    12a8:	000d      	movs	r5, r1
    12aa:	23b0      	movs	r3, #176	; 0xb0
    12ac:	4698      	mov	r8, r3
	for (page = 0; page < PAGES; page++) {
		command(I2C_SSD_OLED,0xB0 + page);/* set page address */
    12ae:	4b0f      	ldr	r3, [pc, #60]	; (12ec <er_oled_display+0x50>)
    12b0:	4699      	mov	r9, r3
		command(I2C_SSD_OLED,0x00);   /* set low column address */
		command(I2C_SSD_OLED,0x10);  /* set high column address */
		for(i = 0; i< WIDTH; i++ ) {
			data(I2C_SSD_OLED,SSD_buffer[i+page*WIDTH]);// write data one
    12b2:	4f0f      	ldr	r7, [pc, #60]	; (12f0 <er_oled_display+0x54>)
		command(I2C_SSD_OLED,0xB0 + page);/* set page address */
    12b4:	4641      	mov	r1, r8
    12b6:	0030      	movs	r0, r6
    12b8:	47c8      	blx	r9
		command(I2C_SSD_OLED,0x00);   /* set low column address */
    12ba:	2100      	movs	r1, #0
    12bc:	0030      	movs	r0, r6
    12be:	47c8      	blx	r9
		command(I2C_SSD_OLED,0x10);  /* set high column address */
    12c0:	2110      	movs	r1, #16
    12c2:	0030      	movs	r0, r6
    12c4:	47c8      	blx	r9
    12c6:	002c      	movs	r4, r5
    12c8:	3c80      	subs	r4, #128	; 0x80
			data(I2C_SSD_OLED,SSD_buffer[i+page*WIDTH]);// write data one
    12ca:	7821      	ldrb	r1, [r4, #0]
    12cc:	0030      	movs	r0, r6
    12ce:	47b8      	blx	r7
    12d0:	3401      	adds	r4, #1
		for(i = 0; i< WIDTH; i++ ) {
    12d2:	42ac      	cmp	r4, r5
    12d4:	d1f9      	bne.n	12ca <er_oled_display+0x2e>
    12d6:	4643      	mov	r3, r8
    12d8:	3301      	adds	r3, #1
    12da:	b2db      	uxtb	r3, r3
    12dc:	4698      	mov	r8, r3
    12de:	3580      	adds	r5, #128	; 0x80
	for (page = 0; page < PAGES; page++) {
    12e0:	2bb8      	cmp	r3, #184	; 0xb8
    12e2:	d1e7      	bne.n	12b4 <er_oled_display+0x18>
		}
	}
}
    12e4:	bc0c      	pop	{r2, r3}
    12e6:	4690      	mov	r8, r2
    12e8:	4699      	mov	r9, r3
    12ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12ec:	000011c1 	.word	0x000011c1
    12f0:	000011d1 	.word	0x000011d1

000012f4 <er_oled_pixel>:

void er_oled_pixel(int x, int y, char color, uint8_t* SSD_buffer)
{
    12f4:	b530      	push	{r4, r5, lr}
	if(x > WIDTH || y > HEIGHT)return ;
    12f6:	2880      	cmp	r0, #128	; 0x80
    12f8:	dc15      	bgt.n	1326 <er_oled_pixel+0x32>
    12fa:	2940      	cmp	r1, #64	; 0x40
    12fc:	dc13      	bgt.n	1326 <er_oled_pixel+0x32>
	if(color)
    12fe:	2a00      	cmp	r2, #0
    1300:	d112      	bne.n	1328 <er_oled_pixel+0x34>
	SSD_buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
	else
	SSD_buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
    1302:	17cd      	asrs	r5, r1, #31
    1304:	2407      	movs	r4, #7
    1306:	0022      	movs	r2, r4
    1308:	402a      	ands	r2, r5
    130a:	1852      	adds	r2, r2, r1
    130c:	10d2      	asrs	r2, r2, #3
    130e:	01d2      	lsls	r2, r2, #7
    1310:	1810      	adds	r0, r2, r0
    1312:	1818      	adds	r0, r3, r0
    1314:	0f6d      	lsrs	r5, r5, #29
    1316:	1949      	adds	r1, r1, r5
    1318:	4021      	ands	r1, r4
    131a:	1b49      	subs	r1, r1, r5
    131c:	2201      	movs	r2, #1
    131e:	408a      	lsls	r2, r1
    1320:	7803      	ldrb	r3, [r0, #0]
    1322:	4393      	bics	r3, r2
    1324:	7003      	strb	r3, [r0, #0]
}
    1326:	bd30      	pop	{r4, r5, pc}
	SSD_buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
    1328:	17cd      	asrs	r5, r1, #31
    132a:	2407      	movs	r4, #7
    132c:	0022      	movs	r2, r4
    132e:	402a      	ands	r2, r5
    1330:	1852      	adds	r2, r2, r1
    1332:	10d2      	asrs	r2, r2, #3
    1334:	01d2      	lsls	r2, r2, #7
    1336:	1810      	adds	r0, r2, r0
    1338:	181b      	adds	r3, r3, r0
    133a:	0f6d      	lsrs	r5, r5, #29
    133c:	1949      	adds	r1, r1, r5
    133e:	400c      	ands	r4, r1
    1340:	1b64      	subs	r4, r4, r5
    1342:	2201      	movs	r2, #1
    1344:	40a2      	lsls	r2, r4
    1346:	7819      	ldrb	r1, [r3, #0]
    1348:	430a      	orrs	r2, r1
    134a:	701a      	strb	r2, [r3, #0]
    134c:	e7eb      	b.n	1326 <er_oled_pixel+0x32>
	...

00001350 <er_oled_char3216>:

void er_oled_char3216(uint8_t x, uint8_t y, uint8_t chChar, uint8_t* buffer)
{
    1350:	b5f0      	push	{r4, r5, r6, r7, lr}
    1352:	46de      	mov	lr, fp
    1354:	4657      	mov	r7, sl
    1356:	464e      	mov	r6, r9
    1358:	4645      	mov	r5, r8
    135a:	b5e0      	push	{r5, r6, r7, lr}
    135c:	b085      	sub	sp, #20
    135e:	9001      	str	r0, [sp, #4]
    1360:	000f      	movs	r7, r1
    1362:	9302      	str	r3, [sp, #8]
    1364:	491e      	ldr	r1, [pc, #120]	; (13e0 <er_oled_char3216+0x90>)
    1366:	4b1f      	ldr	r3, [pc, #124]	; (13e4 <er_oled_char3216+0x94>)
    1368:	18d3      	adds	r3, r2, r3
    136a:	019b      	lsls	r3, r3, #6
    136c:	469a      	mov	sl, r3
    136e:	448a      	add	sl, r1
    1370:	4b1d      	ldr	r3, [pc, #116]	; (13e8 <er_oled_char3216+0x98>)
    1372:	469c      	mov	ip, r3
    1374:	4462      	add	r2, ip
    1376:	0192      	lsls	r2, r2, #6
    1378:	468b      	mov	fp, r1
    137a:	4493      	add	fp, r2
    137c:	003c      	movs	r4, r7

	for (i = 0; i < 64; i++) {
		chTemp = Font3216[chChar - 0x30][i];
		for (j = 0; j < 8; j++) {
			chMode = chTemp & 0x80? 1 : 0;
			er_oled_pixel(x, y, chMode, buffer);
    137e:	4b1b      	ldr	r3, [pc, #108]	; (13ec <er_oled_char3216+0x9c>)
    1380:	4699      	mov	r9, r3
			chTemp <<= 1;
			y++;
			if ((y - y0) == 32) {
				y = y0;
    1382:	9703      	str	r7, [sp, #12]
    1384:	46b8      	mov	r8, r7
    1386:	4657      	mov	r7, sl
    1388:	e009      	b.n	139e <er_oled_char3216+0x4e>
    138a:	4647      	mov	r7, r8
    138c:	46b0      	mov	r8, r6
				x++;
    138e:	9b01      	ldr	r3, [sp, #4]
    1390:	3301      	adds	r3, #1
    1392:	b2db      	uxtb	r3, r3
    1394:	9301      	str	r3, [sp, #4]
				y = y0;
    1396:	9c03      	ldr	r4, [sp, #12]
    1398:	3701      	adds	r7, #1
	for (i = 0; i < 64; i++) {
    139a:	455f      	cmp	r7, fp
    139c:	d018      	beq.n	13d0 <er_oled_char3216+0x80>
		chTemp = Font3216[chChar - 0x30][i];
    139e:	783d      	ldrb	r5, [r7, #0]
    13a0:	0026      	movs	r6, r4
    13a2:	3608      	adds	r6, #8
    13a4:	b2f6      	uxtb	r6, r6
    13a6:	4643      	mov	r3, r8
    13a8:	46b8      	mov	r8, r7
    13aa:	0037      	movs	r7, r6
    13ac:	001e      	movs	r6, r3
			er_oled_pixel(x, y, chMode, buffer);
    13ae:	09ea      	lsrs	r2, r5, #7
    13b0:	9b02      	ldr	r3, [sp, #8]
    13b2:	0021      	movs	r1, r4
    13b4:	9801      	ldr	r0, [sp, #4]
    13b6:	47c8      	blx	r9
			chTemp <<= 1;
    13b8:	006d      	lsls	r5, r5, #1
    13ba:	b2ed      	uxtb	r5, r5
			y++;
    13bc:	3401      	adds	r4, #1
    13be:	b2e4      	uxtb	r4, r4
			if ((y - y0) == 32) {
    13c0:	1ba3      	subs	r3, r4, r6
    13c2:	2b20      	cmp	r3, #32
    13c4:	d0e1      	beq.n	138a <er_oled_char3216+0x3a>
		for (j = 0; j < 8; j++) {
    13c6:	42a7      	cmp	r7, r4
    13c8:	d1f1      	bne.n	13ae <er_oled_char3216+0x5e>
    13ca:	4647      	mov	r7, r8
    13cc:	46b0      	mov	r8, r6
    13ce:	e7e3      	b.n	1398 <er_oled_char3216+0x48>
				break;
			}
		}
	}
}
    13d0:	b005      	add	sp, #20
    13d2:	bc3c      	pop	{r2, r3, r4, r5}
    13d4:	4690      	mov	r8, r2
    13d6:	4699      	mov	r9, r3
    13d8:	46a2      	mov	sl, r4
    13da:	46ab      	mov	fp, r5
    13dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	000026dc 	.word	0x000026dc
    13e4:	03ffffd0 	.word	0x03ffffd0
    13e8:	03ffffd1 	.word	0x03ffffd1
    13ec:	000012f5 	.word	0x000012f5

000013f0 <er_oled_char>:
void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
    13f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13f2:	46de      	mov	lr, fp
    13f4:	4657      	mov	r7, sl
    13f6:	464e      	mov	r6, r9
    13f8:	4645      	mov	r5, r8
    13fa:	b5e0      	push	{r5, r6, r7, lr}
    13fc:	b085      	sub	sp, #20
    13fe:	9001      	str	r0, [sp, #4]
    1400:	000f      	movs	r7, r1
    1402:	4698      	mov	r8, r3
    1404:	ab0e      	add	r3, sp, #56	; 0x38
    1406:	781b      	ldrb	r3, [r3, #0]
    1408:	9302      	str	r3, [sp, #8]
	unsigned char i, j, y0=y;
	char temp;
	unsigned char ch = acsii - ' ';
    140a:	3a20      	subs	r2, #32
    140c:	b2d3      	uxtb	r3, r2
	for(i = 0;i<size;i++) {
    140e:	4642      	mov	r2, r8
    1410:	2a00      	cmp	r2, #0
    1412:	d046      	beq.n	14a2 <er_oled_char+0xb2>
    1414:	011b      	lsls	r3, r3, #4
    1416:	4926      	ldr	r1, [pc, #152]	; (14b0 <er_oled_char+0xc0>)
    1418:	3140      	adds	r1, #64	; 0x40
    141a:	18ca      	adds	r2, r1, r3
    141c:	4692      	mov	sl, r2
    141e:	4642      	mov	r2, r8
    1420:	3a01      	subs	r2, #1
    1422:	b2d2      	uxtb	r2, r2
    1424:	3201      	adds	r2, #1
    1426:	18d3      	adds	r3, r2, r3
    1428:	18cb      	adds	r3, r1, r3
    142a:	9303      	str	r3, [sp, #12]
    142c:	003c      	movs	r4, r7
	else temp = ~Font1608[ch][i];
		
		for(j =0;j<8;j++)
		{
			if(temp & 0x80) er_oled_pixel(x, y, 1, buffer);
			else er_oled_pixel(x, y, 0, buffer);
    142e:	4b21      	ldr	r3, [pc, #132]	; (14b4 <er_oled_char+0xc4>)
    1430:	4699      	mov	r9, r3
			if(temp & 0x80) er_oled_pixel(x, y, 1, buffer);
    1432:	469b      	mov	fp, r3
    1434:	e029      	b.n	148a <er_oled_char+0x9a>
	else temp = ~Font1608[ch][i];
    1436:	4653      	mov	r3, sl
    1438:	781d      	ldrb	r5, [r3, #0]
    143a:	43ed      	mvns	r5, r5
    143c:	b2ed      	uxtb	r5, r5
    143e:	e029      	b.n	1494 <er_oled_char+0xa4>
			if(temp & 0x80) er_oled_pixel(x, y, 1, buffer);
    1440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1442:	2201      	movs	r2, #1
    1444:	0021      	movs	r1, r4
    1446:	9801      	ldr	r0, [sp, #4]
    1448:	47d8      	blx	fp
			temp <<= 1;
    144a:	006d      	lsls	r5, r5, #1
    144c:	b2ed      	uxtb	r5, r5
			y++;
    144e:	3401      	adds	r4, #1
    1450:	b2e4      	uxtb	r4, r4
			if((y-y0) == size)
    1452:	1be3      	subs	r3, r4, r7
    1454:	42b3      	cmp	r3, r6
    1456:	d00a      	beq.n	146e <er_oled_char+0x7e>
		for(j =0;j<8;j++)
    1458:	45a0      	cmp	r8, r4
    145a:	d00f      	beq.n	147c <er_oled_char+0x8c>
			if(temp & 0x80) er_oled_pixel(x, y, 1, buffer);
    145c:	b26b      	sxtb	r3, r5
    145e:	2b00      	cmp	r3, #0
    1460:	dbee      	blt.n	1440 <er_oled_char+0x50>
			else er_oled_pixel(x, y, 0, buffer);
    1462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1464:	2200      	movs	r2, #0
    1466:	0021      	movs	r1, r4
    1468:	9801      	ldr	r0, [sp, #4]
    146a:	47c8      	blx	r9
    146c:	e7ed      	b.n	144a <er_oled_char+0x5a>
    146e:	46b0      	mov	r8, r6
			{
				y = y0;
				x++;
    1470:	9b01      	ldr	r3, [sp, #4]
    1472:	3301      	adds	r3, #1
    1474:	b2db      	uxtb	r3, r3
    1476:	9301      	str	r3, [sp, #4]
				y = y0;
    1478:	003c      	movs	r4, r7
				break;
    147a:	e000      	b.n	147e <er_oled_char+0x8e>
    147c:	46b0      	mov	r8, r6
    147e:	2301      	movs	r3, #1
    1480:	469c      	mov	ip, r3
    1482:	44e2      	add	sl, ip
	for(i = 0;i<size;i++) {
    1484:	9b03      	ldr	r3, [sp, #12]
    1486:	459a      	cmp	sl, r3
    1488:	d00b      	beq.n	14a2 <er_oled_char+0xb2>
	if(mode)temp = Font1608[ch][i];
    148a:	9b02      	ldr	r3, [sp, #8]
    148c:	2b00      	cmp	r3, #0
    148e:	d0d2      	beq.n	1436 <er_oled_char+0x46>
    1490:	4653      	mov	r3, sl
    1492:	781d      	ldrb	r5, [r3, #0]
    1494:	0026      	movs	r6, r4
    1496:	3608      	adds	r6, #8
    1498:	b2f6      	uxtb	r6, r6
    149a:	4643      	mov	r3, r8
    149c:	46b0      	mov	r8, r6
    149e:	001e      	movs	r6, r3
    14a0:	e7dc      	b.n	145c <er_oled_char+0x6c>
			}
		}
	}
}
    14a2:	b005      	add	sp, #20
    14a4:	bc3c      	pop	{r2, r3, r4, r5}
    14a6:	4690      	mov	r8, r2
    14a8:	4699      	mov	r9, r3
    14aa:	46a2      	mov	sl, r4
    14ac:	46ab      	mov	fp, r5
    14ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14b0:	0000295c 	.word	0x0000295c
    14b4:	000012f5 	.word	0x000012f5

000014b8 <print_num>:

void print_num(uint32_t num,uint16_t x_start,uint16_t y_start,uint16_t x_inc)
{
    14b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ba:	46de      	mov	lr, fp
    14bc:	4657      	mov	r7, sl
    14be:	4646      	mov	r6, r8
    14c0:	b5c0      	push	{r6, r7, lr}
    14c2:	b082      	sub	sp, #8
    14c4:	af00      	add	r7, sp, #0
    14c6:	000c      	movs	r4, r1
    14c8:	0016      	movs	r6, r2
    14ca:	469b      	mov	fp, r3
	uint32_t num32=num;
	uint8_t num_size=1;
	// first determine the number of digit in this number
	if (num32<10){num_size=1;}
    14cc:	2301      	movs	r3, #1
    14ce:	4698      	mov	r8, r3
    14d0:	2809      	cmp	r0, #9
    14d2:	d919      	bls.n	1508 <print_num+0x50>
	else if (num32<100){num_size=2;}
    14d4:	3301      	adds	r3, #1
    14d6:	4698      	mov	r8, r3
    14d8:	2863      	cmp	r0, #99	; 0x63
    14da:	d915      	bls.n	1508 <print_num+0x50>
	else if (num32<1000){num_size=3;}
    14dc:	4b1f      	ldr	r3, [pc, #124]	; (155c <print_num+0xa4>)
    14de:	2203      	movs	r2, #3
    14e0:	4690      	mov	r8, r2
    14e2:	4298      	cmp	r0, r3
    14e4:	d910      	bls.n	1508 <print_num+0x50>
	else if (num32<10000){num_size=4;}
    14e6:	4b1e      	ldr	r3, [pc, #120]	; (1560 <print_num+0xa8>)
    14e8:	3201      	adds	r2, #1
    14ea:	4690      	mov	r8, r2
    14ec:	4298      	cmp	r0, r3
    14ee:	d90b      	bls.n	1508 <print_num+0x50>
	else if (num32<100000){num_size=5;}
    14f0:	4b1c      	ldr	r3, [pc, #112]	; (1564 <print_num+0xac>)
    14f2:	3201      	adds	r2, #1
    14f4:	4690      	mov	r8, r2
    14f6:	4298      	cmp	r0, r3
    14f8:	d906      	bls.n	1508 <print_num+0x50>
	else if (num32<1000000){num_size=6;}
    14fa:	4b1b      	ldr	r3, [pc, #108]	; (1568 <print_num+0xb0>)
    14fc:	3201      	adds	r2, #1
    14fe:	4690      	mov	r8, r2
    1500:	4298      	cmp	r0, r3
    1502:	d901      	bls.n	1508 <print_num+0x50>
	else {num_size=1;}// more than 1M scan ! impossible
    1504:	2301      	movs	r3, #1
    1506:	4698      	mov	r8, r3
	// array to save the string.
	char sbuf[num_size];
    1508:	4643      	mov	r3, r8
    150a:	3307      	adds	r3, #7
    150c:	08db      	lsrs	r3, r3, #3
    150e:	00db      	lsls	r3, r3, #3
    1510:	466a      	mov	r2, sp
    1512:	1ad3      	subs	r3, r2, r3
    1514:	469d      	mov	sp, r3
	// now change the number to string using sprintf function
	sprintf(sbuf,"%lu",num32);
    1516:	0002      	movs	r2, r0
    1518:	4914      	ldr	r1, [pc, #80]	; (156c <print_num+0xb4>)
    151a:	4668      	mov	r0, sp
    151c:	4b14      	ldr	r3, [pc, #80]	; (1570 <print_num+0xb8>)
    151e:	4798      	blx	r3
    1520:	46ea      	mov	sl, sp
    1522:	466d      	mov	r5, sp
	// now print the results on the screen starting from x_start,ystart
	for (uint8_t num_count=0;num_count<num_size;num_count++)
	{
		er_oled_char3216(x_start, y_start, sbuf[num_count], oled_buf);
    1524:	b2f3      	uxtb	r3, r6
    1526:	607b      	str	r3, [r7, #4]
    1528:	4e12      	ldr	r6, [pc, #72]	; (1574 <print_num+0xbc>)
    152a:	782a      	ldrb	r2, [r5, #0]
    152c:	b2e0      	uxtb	r0, r4
    152e:	4b12      	ldr	r3, [pc, #72]	; (1578 <print_num+0xc0>)
    1530:	6879      	ldr	r1, [r7, #4]
    1532:	47b0      	blx	r6
		x_start+=x_inc;
    1534:	445c      	add	r4, fp
    1536:	b2a4      	uxth	r4, r4
    1538:	3501      	adds	r5, #1
	for (uint8_t num_count=0;num_count<num_size;num_count++)
    153a:	4653      	mov	r3, sl
    153c:	1aeb      	subs	r3, r5, r3
    153e:	b2db      	uxtb	r3, r3
    1540:	4543      	cmp	r3, r8
    1542:	d3f2      	bcc.n	152a <print_num+0x72>
	}
	// done!
	er_oled_display(&I2C0,oled_buf);
    1544:	490c      	ldr	r1, [pc, #48]	; (1578 <print_num+0xc0>)
    1546:	480d      	ldr	r0, [pc, #52]	; (157c <print_num+0xc4>)
    1548:	4b0d      	ldr	r3, [pc, #52]	; (1580 <print_num+0xc8>)
    154a:	4798      	blx	r3
    154c:	46bd      	mov	sp, r7
    154e:	b002      	add	sp, #8
    1550:	bc1c      	pop	{r2, r3, r4}
    1552:	4690      	mov	r8, r2
    1554:	469a      	mov	sl, r3
    1556:	46a3      	mov	fp, r4
    1558:	bdf0      	pop	{r4, r5, r6, r7, pc}
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	000003e7 	.word	0x000003e7
    1560:	0000270f 	.word	0x0000270f
    1564:	0001869f 	.word	0x0001869f
    1568:	000f423f 	.word	0x000f423f
    156c:	00002f8c 	.word	0x00002f8c
    1570:	00001945 	.word	0x00001945
    1574:	00001351 	.word	0x00001351
    1578:	200000d4 	.word	0x200000d4
    157c:	20000094 	.word	0x20000094
    1580:	0000129d 	.word	0x0000129d

00001584 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    1584:	b510      	push	{r4, lr}
    1586:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    1588:	2800      	cmp	r0, #0
    158a:	d109      	bne.n	15a0 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    158c:	0011      	movs	r1, r2
    158e:	0018      	movs	r0, r3
    1590:	4b05      	ldr	r3, [pc, #20]	; (15a8 <_read+0x24>)
    1592:	4798      	blx	r3
    1594:	2800      	cmp	r0, #0
    1596:	db00      	blt.n	159a <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    1598:	bd10      	pop	{r4, pc}
    159a:	2001      	movs	r0, #1
    159c:	4240      	negs	r0, r0
    159e:	e7fb      	b.n	1598 <_read+0x14>
		return -1;
    15a0:	2001      	movs	r0, #1
    15a2:	4240      	negs	r0, r0
    15a4:	e7f8      	b.n	1598 <_read+0x14>
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	00001601 	.word	0x00001601

000015ac <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    15ac:	b510      	push	{r4, lr}
    15ae:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    15b0:	3801      	subs	r0, #1
    15b2:	2802      	cmp	r0, #2
    15b4:	d809      	bhi.n	15ca <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    15b6:	0011      	movs	r1, r2
    15b8:	0018      	movs	r0, r3
    15ba:	4b05      	ldr	r3, [pc, #20]	; (15d0 <_write+0x24>)
    15bc:	4798      	blx	r3
    15be:	2800      	cmp	r0, #0
    15c0:	db00      	blt.n	15c4 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    15c2:	bd10      	pop	{r4, pc}
    15c4:	2001      	movs	r0, #1
    15c6:	4240      	negs	r0, r0
    15c8:	e7fb      	b.n	15c2 <_write+0x16>
		return -1;
    15ca:	2001      	movs	r0, #1
    15cc:	4240      	negs	r0, r0
    15ce:	e7f8      	b.n	15c2 <_write+0x16>
    15d0:	00001625 	.word	0x00001625

000015d4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    15d4:	b570      	push	{r4, r5, r6, lr}
    15d6:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    15d8:	4d06      	ldr	r5, [pc, #24]	; (15f4 <stdio_io_init+0x20>)
    15da:	682b      	ldr	r3, [r5, #0]
    15dc:	6898      	ldr	r0, [r3, #8]
    15de:	2100      	movs	r1, #0
    15e0:	4c05      	ldr	r4, [pc, #20]	; (15f8 <stdio_io_init+0x24>)
    15e2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    15e4:	682b      	ldr	r3, [r5, #0]
    15e6:	6858      	ldr	r0, [r3, #4]
    15e8:	2100      	movs	r1, #0
    15ea:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    15ec:	4b03      	ldr	r3, [pc, #12]	; (15fc <stdio_io_init+0x28>)
    15ee:	601e      	str	r6, [r3, #0]
}
    15f0:	bd70      	pop	{r4, r5, r6, pc}
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	20000000 	.word	0x20000000
    15f8:	000017d9 	.word	0x000017d9
    15fc:	20000088 	.word	0x20000088

00001600 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1600:	b510      	push	{r4, lr}
    1602:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1604:	4b05      	ldr	r3, [pc, #20]	; (161c <stdio_io_read+0x1c>)
    1606:	6818      	ldr	r0, [r3, #0]
    1608:	2800      	cmp	r0, #0
    160a:	d004      	beq.n	1616 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    160c:	b28a      	uxth	r2, r1
    160e:	0021      	movs	r1, r4
    1610:	4b03      	ldr	r3, [pc, #12]	; (1620 <stdio_io_read+0x20>)
    1612:	4798      	blx	r3
}
    1614:	bd10      	pop	{r4, pc}
		return 0;
    1616:	2000      	movs	r0, #0
    1618:	e7fc      	b.n	1614 <stdio_io_read+0x14>
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	20000088 	.word	0x20000088
    1620:	000004dd 	.word	0x000004dd

00001624 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1624:	b510      	push	{r4, lr}
    1626:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1628:	4b05      	ldr	r3, [pc, #20]	; (1640 <stdio_io_write+0x1c>)
    162a:	6818      	ldr	r0, [r3, #0]
    162c:	2800      	cmp	r0, #0
    162e:	d004      	beq.n	163a <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1630:	b28a      	uxth	r2, r1
    1632:	0021      	movs	r1, r4
    1634:	4b03      	ldr	r3, [pc, #12]	; (1644 <stdio_io_write+0x20>)
    1636:	4798      	blx	r3
}
    1638:	bd10      	pop	{r4, pc}
		return 0;
    163a:	2000      	movs	r0, #0
    163c:	e7fc      	b.n	1638 <stdio_io_write+0x14>
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	20000088 	.word	0x20000088
    1644:	000004a9 	.word	0x000004a9

00001648 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1648:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    164a:	4c04      	ldr	r4, [pc, #16]	; (165c <stdio_redirect_init+0x14>)
    164c:	0020      	movs	r0, r4
    164e:	4b04      	ldr	r3, [pc, #16]	; (1660 <stdio_redirect_init+0x18>)
    1650:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    1652:	0020      	movs	r0, r4
    1654:	4b03      	ldr	r3, [pc, #12]	; (1664 <stdio_redirect_init+0x1c>)
    1656:	4798      	blx	r3
}
    1658:	bd10      	pop	{r4, pc}
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	200000b4 	.word	0x200000b4
    1660:	00000641 	.word	0x00000641
    1664:	000015d5 	.word	0x000015d5

00001668 <__udivsi3>:
    1668:	2200      	movs	r2, #0
    166a:	0843      	lsrs	r3, r0, #1
    166c:	428b      	cmp	r3, r1
    166e:	d374      	bcc.n	175a <__udivsi3+0xf2>
    1670:	0903      	lsrs	r3, r0, #4
    1672:	428b      	cmp	r3, r1
    1674:	d35f      	bcc.n	1736 <__udivsi3+0xce>
    1676:	0a03      	lsrs	r3, r0, #8
    1678:	428b      	cmp	r3, r1
    167a:	d344      	bcc.n	1706 <__udivsi3+0x9e>
    167c:	0b03      	lsrs	r3, r0, #12
    167e:	428b      	cmp	r3, r1
    1680:	d328      	bcc.n	16d4 <__udivsi3+0x6c>
    1682:	0c03      	lsrs	r3, r0, #16
    1684:	428b      	cmp	r3, r1
    1686:	d30d      	bcc.n	16a4 <__udivsi3+0x3c>
    1688:	22ff      	movs	r2, #255	; 0xff
    168a:	0209      	lsls	r1, r1, #8
    168c:	ba12      	rev	r2, r2
    168e:	0c03      	lsrs	r3, r0, #16
    1690:	428b      	cmp	r3, r1
    1692:	d302      	bcc.n	169a <__udivsi3+0x32>
    1694:	1212      	asrs	r2, r2, #8
    1696:	0209      	lsls	r1, r1, #8
    1698:	d065      	beq.n	1766 <__udivsi3+0xfe>
    169a:	0b03      	lsrs	r3, r0, #12
    169c:	428b      	cmp	r3, r1
    169e:	d319      	bcc.n	16d4 <__udivsi3+0x6c>
    16a0:	e000      	b.n	16a4 <__udivsi3+0x3c>
    16a2:	0a09      	lsrs	r1, r1, #8
    16a4:	0bc3      	lsrs	r3, r0, #15
    16a6:	428b      	cmp	r3, r1
    16a8:	d301      	bcc.n	16ae <__udivsi3+0x46>
    16aa:	03cb      	lsls	r3, r1, #15
    16ac:	1ac0      	subs	r0, r0, r3
    16ae:	4152      	adcs	r2, r2
    16b0:	0b83      	lsrs	r3, r0, #14
    16b2:	428b      	cmp	r3, r1
    16b4:	d301      	bcc.n	16ba <__udivsi3+0x52>
    16b6:	038b      	lsls	r3, r1, #14
    16b8:	1ac0      	subs	r0, r0, r3
    16ba:	4152      	adcs	r2, r2
    16bc:	0b43      	lsrs	r3, r0, #13
    16be:	428b      	cmp	r3, r1
    16c0:	d301      	bcc.n	16c6 <__udivsi3+0x5e>
    16c2:	034b      	lsls	r3, r1, #13
    16c4:	1ac0      	subs	r0, r0, r3
    16c6:	4152      	adcs	r2, r2
    16c8:	0b03      	lsrs	r3, r0, #12
    16ca:	428b      	cmp	r3, r1
    16cc:	d301      	bcc.n	16d2 <__udivsi3+0x6a>
    16ce:	030b      	lsls	r3, r1, #12
    16d0:	1ac0      	subs	r0, r0, r3
    16d2:	4152      	adcs	r2, r2
    16d4:	0ac3      	lsrs	r3, r0, #11
    16d6:	428b      	cmp	r3, r1
    16d8:	d301      	bcc.n	16de <__udivsi3+0x76>
    16da:	02cb      	lsls	r3, r1, #11
    16dc:	1ac0      	subs	r0, r0, r3
    16de:	4152      	adcs	r2, r2
    16e0:	0a83      	lsrs	r3, r0, #10
    16e2:	428b      	cmp	r3, r1
    16e4:	d301      	bcc.n	16ea <__udivsi3+0x82>
    16e6:	028b      	lsls	r3, r1, #10
    16e8:	1ac0      	subs	r0, r0, r3
    16ea:	4152      	adcs	r2, r2
    16ec:	0a43      	lsrs	r3, r0, #9
    16ee:	428b      	cmp	r3, r1
    16f0:	d301      	bcc.n	16f6 <__udivsi3+0x8e>
    16f2:	024b      	lsls	r3, r1, #9
    16f4:	1ac0      	subs	r0, r0, r3
    16f6:	4152      	adcs	r2, r2
    16f8:	0a03      	lsrs	r3, r0, #8
    16fa:	428b      	cmp	r3, r1
    16fc:	d301      	bcc.n	1702 <__udivsi3+0x9a>
    16fe:	020b      	lsls	r3, r1, #8
    1700:	1ac0      	subs	r0, r0, r3
    1702:	4152      	adcs	r2, r2
    1704:	d2cd      	bcs.n	16a2 <__udivsi3+0x3a>
    1706:	09c3      	lsrs	r3, r0, #7
    1708:	428b      	cmp	r3, r1
    170a:	d301      	bcc.n	1710 <__udivsi3+0xa8>
    170c:	01cb      	lsls	r3, r1, #7
    170e:	1ac0      	subs	r0, r0, r3
    1710:	4152      	adcs	r2, r2
    1712:	0983      	lsrs	r3, r0, #6
    1714:	428b      	cmp	r3, r1
    1716:	d301      	bcc.n	171c <__udivsi3+0xb4>
    1718:	018b      	lsls	r3, r1, #6
    171a:	1ac0      	subs	r0, r0, r3
    171c:	4152      	adcs	r2, r2
    171e:	0943      	lsrs	r3, r0, #5
    1720:	428b      	cmp	r3, r1
    1722:	d301      	bcc.n	1728 <__udivsi3+0xc0>
    1724:	014b      	lsls	r3, r1, #5
    1726:	1ac0      	subs	r0, r0, r3
    1728:	4152      	adcs	r2, r2
    172a:	0903      	lsrs	r3, r0, #4
    172c:	428b      	cmp	r3, r1
    172e:	d301      	bcc.n	1734 <__udivsi3+0xcc>
    1730:	010b      	lsls	r3, r1, #4
    1732:	1ac0      	subs	r0, r0, r3
    1734:	4152      	adcs	r2, r2
    1736:	08c3      	lsrs	r3, r0, #3
    1738:	428b      	cmp	r3, r1
    173a:	d301      	bcc.n	1740 <__udivsi3+0xd8>
    173c:	00cb      	lsls	r3, r1, #3
    173e:	1ac0      	subs	r0, r0, r3
    1740:	4152      	adcs	r2, r2
    1742:	0883      	lsrs	r3, r0, #2
    1744:	428b      	cmp	r3, r1
    1746:	d301      	bcc.n	174c <__udivsi3+0xe4>
    1748:	008b      	lsls	r3, r1, #2
    174a:	1ac0      	subs	r0, r0, r3
    174c:	4152      	adcs	r2, r2
    174e:	0843      	lsrs	r3, r0, #1
    1750:	428b      	cmp	r3, r1
    1752:	d301      	bcc.n	1758 <__udivsi3+0xf0>
    1754:	004b      	lsls	r3, r1, #1
    1756:	1ac0      	subs	r0, r0, r3
    1758:	4152      	adcs	r2, r2
    175a:	1a41      	subs	r1, r0, r1
    175c:	d200      	bcs.n	1760 <__udivsi3+0xf8>
    175e:	4601      	mov	r1, r0
    1760:	4152      	adcs	r2, r2
    1762:	4610      	mov	r0, r2
    1764:	4770      	bx	lr
    1766:	e7ff      	b.n	1768 <__udivsi3+0x100>
    1768:	b501      	push	{r0, lr}
    176a:	2000      	movs	r0, #0
    176c:	f000 f806 	bl	177c <__aeabi_idiv0>
    1770:	bd02      	pop	{r1, pc}
    1772:	46c0      	nop			; (mov r8, r8)

00001774 <__aeabi_uidivmod>:
    1774:	2900      	cmp	r1, #0
    1776:	d0f7      	beq.n	1768 <__udivsi3+0x100>
    1778:	e776      	b.n	1668 <__udivsi3>
    177a:	4770      	bx	lr

0000177c <__aeabi_idiv0>:
    177c:	4770      	bx	lr
    177e:	46c0      	nop			; (mov r8, r8)

00001780 <__libc_init_array>:
    1780:	b570      	push	{r4, r5, r6, lr}
    1782:	2600      	movs	r6, #0
    1784:	4d0c      	ldr	r5, [pc, #48]	; (17b8 <__libc_init_array+0x38>)
    1786:	4c0d      	ldr	r4, [pc, #52]	; (17bc <__libc_init_array+0x3c>)
    1788:	1b64      	subs	r4, r4, r5
    178a:	10a4      	asrs	r4, r4, #2
    178c:	42a6      	cmp	r6, r4
    178e:	d109      	bne.n	17a4 <__libc_init_array+0x24>
    1790:	2600      	movs	r6, #0
    1792:	f001 fc49 	bl	3028 <_init>
    1796:	4d0a      	ldr	r5, [pc, #40]	; (17c0 <__libc_init_array+0x40>)
    1798:	4c0a      	ldr	r4, [pc, #40]	; (17c4 <__libc_init_array+0x44>)
    179a:	1b64      	subs	r4, r4, r5
    179c:	10a4      	asrs	r4, r4, #2
    179e:	42a6      	cmp	r6, r4
    17a0:	d105      	bne.n	17ae <__libc_init_array+0x2e>
    17a2:	bd70      	pop	{r4, r5, r6, pc}
    17a4:	00b3      	lsls	r3, r6, #2
    17a6:	58eb      	ldr	r3, [r5, r3]
    17a8:	4798      	blx	r3
    17aa:	3601      	adds	r6, #1
    17ac:	e7ee      	b.n	178c <__libc_init_array+0xc>
    17ae:	00b3      	lsls	r3, r6, #2
    17b0:	58eb      	ldr	r3, [r5, r3]
    17b2:	4798      	blx	r3
    17b4:	3601      	adds	r6, #1
    17b6:	e7f2      	b.n	179e <__libc_init_array+0x1e>
    17b8:	00003034 	.word	0x00003034
    17bc:	00003034 	.word	0x00003034
    17c0:	00003034 	.word	0x00003034
    17c4:	00003038 	.word	0x00003038

000017c8 <memset>:
    17c8:	0003      	movs	r3, r0
    17ca:	1882      	adds	r2, r0, r2
    17cc:	4293      	cmp	r3, r2
    17ce:	d100      	bne.n	17d2 <memset+0xa>
    17d0:	4770      	bx	lr
    17d2:	7019      	strb	r1, [r3, #0]
    17d4:	3301      	adds	r3, #1
    17d6:	e7f9      	b.n	17cc <memset+0x4>

000017d8 <setbuf>:
    17d8:	424a      	negs	r2, r1
    17da:	414a      	adcs	r2, r1
    17dc:	2380      	movs	r3, #128	; 0x80
    17de:	b510      	push	{r4, lr}
    17e0:	0052      	lsls	r2, r2, #1
    17e2:	00db      	lsls	r3, r3, #3
    17e4:	f000 f802 	bl	17ec <setvbuf>
    17e8:	bd10      	pop	{r4, pc}
	...

000017ec <setvbuf>:
    17ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ee:	001d      	movs	r5, r3
    17f0:	4b4f      	ldr	r3, [pc, #316]	; (1930 <setvbuf+0x144>)
    17f2:	b085      	sub	sp, #20
    17f4:	681e      	ldr	r6, [r3, #0]
    17f6:	0004      	movs	r4, r0
    17f8:	000f      	movs	r7, r1
    17fa:	9200      	str	r2, [sp, #0]
    17fc:	2e00      	cmp	r6, #0
    17fe:	d005      	beq.n	180c <setvbuf+0x20>
    1800:	69b3      	ldr	r3, [r6, #24]
    1802:	2b00      	cmp	r3, #0
    1804:	d102      	bne.n	180c <setvbuf+0x20>
    1806:	0030      	movs	r0, r6
    1808:	f000 f9b6 	bl	1b78 <__sinit>
    180c:	4b49      	ldr	r3, [pc, #292]	; (1934 <setvbuf+0x148>)
    180e:	429c      	cmp	r4, r3
    1810:	d150      	bne.n	18b4 <setvbuf+0xc8>
    1812:	6874      	ldr	r4, [r6, #4]
    1814:	9b00      	ldr	r3, [sp, #0]
    1816:	2b02      	cmp	r3, #2
    1818:	d005      	beq.n	1826 <setvbuf+0x3a>
    181a:	2b01      	cmp	r3, #1
    181c:	d900      	bls.n	1820 <setvbuf+0x34>
    181e:	e084      	b.n	192a <setvbuf+0x13e>
    1820:	2d00      	cmp	r5, #0
    1822:	da00      	bge.n	1826 <setvbuf+0x3a>
    1824:	e081      	b.n	192a <setvbuf+0x13e>
    1826:	0021      	movs	r1, r4
    1828:	0030      	movs	r0, r6
    182a:	f000 f937 	bl	1a9c <_fflush_r>
    182e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1830:	2900      	cmp	r1, #0
    1832:	d008      	beq.n	1846 <setvbuf+0x5a>
    1834:	0023      	movs	r3, r4
    1836:	3344      	adds	r3, #68	; 0x44
    1838:	4299      	cmp	r1, r3
    183a:	d002      	beq.n	1842 <setvbuf+0x56>
    183c:	0030      	movs	r0, r6
    183e:	f000 fa63 	bl	1d08 <_free_r>
    1842:	2300      	movs	r3, #0
    1844:	6363      	str	r3, [r4, #52]	; 0x34
    1846:	2300      	movs	r3, #0
    1848:	61a3      	str	r3, [r4, #24]
    184a:	6063      	str	r3, [r4, #4]
    184c:	89a3      	ldrh	r3, [r4, #12]
    184e:	061b      	lsls	r3, r3, #24
    1850:	d503      	bpl.n	185a <setvbuf+0x6e>
    1852:	6921      	ldr	r1, [r4, #16]
    1854:	0030      	movs	r0, r6
    1856:	f000 fa57 	bl	1d08 <_free_r>
    185a:	89a3      	ldrh	r3, [r4, #12]
    185c:	4a36      	ldr	r2, [pc, #216]	; (1938 <setvbuf+0x14c>)
    185e:	4013      	ands	r3, r2
    1860:	81a3      	strh	r3, [r4, #12]
    1862:	9b00      	ldr	r3, [sp, #0]
    1864:	2b02      	cmp	r3, #2
    1866:	d05a      	beq.n	191e <setvbuf+0x132>
    1868:	ab03      	add	r3, sp, #12
    186a:	aa02      	add	r2, sp, #8
    186c:	0021      	movs	r1, r4
    186e:	0030      	movs	r0, r6
    1870:	f000 fa18 	bl	1ca4 <__swhatbuf_r>
    1874:	89a3      	ldrh	r3, [r4, #12]
    1876:	4318      	orrs	r0, r3
    1878:	81a0      	strh	r0, [r4, #12]
    187a:	2d00      	cmp	r5, #0
    187c:	d124      	bne.n	18c8 <setvbuf+0xdc>
    187e:	9d02      	ldr	r5, [sp, #8]
    1880:	0028      	movs	r0, r5
    1882:	f000 fa37 	bl	1cf4 <malloc>
    1886:	9501      	str	r5, [sp, #4]
    1888:	1e07      	subs	r7, r0, #0
    188a:	d142      	bne.n	1912 <setvbuf+0x126>
    188c:	9b02      	ldr	r3, [sp, #8]
    188e:	9301      	str	r3, [sp, #4]
    1890:	42ab      	cmp	r3, r5
    1892:	d139      	bne.n	1908 <setvbuf+0x11c>
    1894:	2001      	movs	r0, #1
    1896:	4240      	negs	r0, r0
    1898:	2302      	movs	r3, #2
    189a:	89a2      	ldrh	r2, [r4, #12]
    189c:	4313      	orrs	r3, r2
    189e:	81a3      	strh	r3, [r4, #12]
    18a0:	2300      	movs	r3, #0
    18a2:	60a3      	str	r3, [r4, #8]
    18a4:	0023      	movs	r3, r4
    18a6:	3347      	adds	r3, #71	; 0x47
    18a8:	6023      	str	r3, [r4, #0]
    18aa:	6123      	str	r3, [r4, #16]
    18ac:	2301      	movs	r3, #1
    18ae:	6163      	str	r3, [r4, #20]
    18b0:	b005      	add	sp, #20
    18b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18b4:	4b21      	ldr	r3, [pc, #132]	; (193c <setvbuf+0x150>)
    18b6:	429c      	cmp	r4, r3
    18b8:	d101      	bne.n	18be <setvbuf+0xd2>
    18ba:	68b4      	ldr	r4, [r6, #8]
    18bc:	e7aa      	b.n	1814 <setvbuf+0x28>
    18be:	4b20      	ldr	r3, [pc, #128]	; (1940 <setvbuf+0x154>)
    18c0:	429c      	cmp	r4, r3
    18c2:	d1a7      	bne.n	1814 <setvbuf+0x28>
    18c4:	68f4      	ldr	r4, [r6, #12]
    18c6:	e7a5      	b.n	1814 <setvbuf+0x28>
    18c8:	2f00      	cmp	r7, #0
    18ca:	d0d9      	beq.n	1880 <setvbuf+0x94>
    18cc:	69b3      	ldr	r3, [r6, #24]
    18ce:	2b00      	cmp	r3, #0
    18d0:	d102      	bne.n	18d8 <setvbuf+0xec>
    18d2:	0030      	movs	r0, r6
    18d4:	f000 f950 	bl	1b78 <__sinit>
    18d8:	9b00      	ldr	r3, [sp, #0]
    18da:	2b01      	cmp	r3, #1
    18dc:	d103      	bne.n	18e6 <setvbuf+0xfa>
    18de:	89a3      	ldrh	r3, [r4, #12]
    18e0:	9a00      	ldr	r2, [sp, #0]
    18e2:	431a      	orrs	r2, r3
    18e4:	81a2      	strh	r2, [r4, #12]
    18e6:	2008      	movs	r0, #8
    18e8:	89a3      	ldrh	r3, [r4, #12]
    18ea:	6027      	str	r7, [r4, #0]
    18ec:	6127      	str	r7, [r4, #16]
    18ee:	6165      	str	r5, [r4, #20]
    18f0:	4018      	ands	r0, r3
    18f2:	d018      	beq.n	1926 <setvbuf+0x13a>
    18f4:	2001      	movs	r0, #1
    18f6:	4018      	ands	r0, r3
    18f8:	2300      	movs	r3, #0
    18fa:	4298      	cmp	r0, r3
    18fc:	d011      	beq.n	1922 <setvbuf+0x136>
    18fe:	426d      	negs	r5, r5
    1900:	60a3      	str	r3, [r4, #8]
    1902:	61a5      	str	r5, [r4, #24]
    1904:	0018      	movs	r0, r3
    1906:	e7d3      	b.n	18b0 <setvbuf+0xc4>
    1908:	9801      	ldr	r0, [sp, #4]
    190a:	f000 f9f3 	bl	1cf4 <malloc>
    190e:	1e07      	subs	r7, r0, #0
    1910:	d0c0      	beq.n	1894 <setvbuf+0xa8>
    1912:	2380      	movs	r3, #128	; 0x80
    1914:	89a2      	ldrh	r2, [r4, #12]
    1916:	9d01      	ldr	r5, [sp, #4]
    1918:	4313      	orrs	r3, r2
    191a:	81a3      	strh	r3, [r4, #12]
    191c:	e7d6      	b.n	18cc <setvbuf+0xe0>
    191e:	2000      	movs	r0, #0
    1920:	e7ba      	b.n	1898 <setvbuf+0xac>
    1922:	60a5      	str	r5, [r4, #8]
    1924:	e7c4      	b.n	18b0 <setvbuf+0xc4>
    1926:	60a0      	str	r0, [r4, #8]
    1928:	e7c2      	b.n	18b0 <setvbuf+0xc4>
    192a:	2001      	movs	r0, #1
    192c:	4240      	negs	r0, r0
    192e:	e7bf      	b.n	18b0 <setvbuf+0xc4>
    1930:	20000000 	.word	0x20000000
    1934:	00002fb4 	.word	0x00002fb4
    1938:	fffff35c 	.word	0xfffff35c
    193c:	00002fd4 	.word	0x00002fd4
    1940:	00002f94 	.word	0x00002f94

00001944 <siprintf>:
    1944:	b40e      	push	{r1, r2, r3}
    1946:	b510      	push	{r4, lr}
    1948:	b09d      	sub	sp, #116	; 0x74
    194a:	a902      	add	r1, sp, #8
    194c:	9002      	str	r0, [sp, #8]
    194e:	6108      	str	r0, [r1, #16]
    1950:	480b      	ldr	r0, [pc, #44]	; (1980 <siprintf+0x3c>)
    1952:	2482      	movs	r4, #130	; 0x82
    1954:	6088      	str	r0, [r1, #8]
    1956:	6148      	str	r0, [r1, #20]
    1958:	2001      	movs	r0, #1
    195a:	4240      	negs	r0, r0
    195c:	ab1f      	add	r3, sp, #124	; 0x7c
    195e:	81c8      	strh	r0, [r1, #14]
    1960:	4808      	ldr	r0, [pc, #32]	; (1984 <siprintf+0x40>)
    1962:	cb04      	ldmia	r3!, {r2}
    1964:	00a4      	lsls	r4, r4, #2
    1966:	6800      	ldr	r0, [r0, #0]
    1968:	9301      	str	r3, [sp, #4]
    196a:	818c      	strh	r4, [r1, #12]
    196c:	f000 fad6 	bl	1f1c <_svfiprintf_r>
    1970:	2300      	movs	r3, #0
    1972:	9a02      	ldr	r2, [sp, #8]
    1974:	7013      	strb	r3, [r2, #0]
    1976:	b01d      	add	sp, #116	; 0x74
    1978:	bc10      	pop	{r4}
    197a:	bc08      	pop	{r3}
    197c:	b003      	add	sp, #12
    197e:	4718      	bx	r3
    1980:	7fffffff 	.word	0x7fffffff
    1984:	20000000 	.word	0x20000000

00001988 <__sflush_r>:
    1988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    198a:	898a      	ldrh	r2, [r1, #12]
    198c:	0005      	movs	r5, r0
    198e:	000c      	movs	r4, r1
    1990:	0713      	lsls	r3, r2, #28
    1992:	d460      	bmi.n	1a56 <__sflush_r+0xce>
    1994:	684b      	ldr	r3, [r1, #4]
    1996:	2b00      	cmp	r3, #0
    1998:	dc04      	bgt.n	19a4 <__sflush_r+0x1c>
    199a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    199c:	2b00      	cmp	r3, #0
    199e:	dc01      	bgt.n	19a4 <__sflush_r+0x1c>
    19a0:	2000      	movs	r0, #0
    19a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    19a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    19a6:	2f00      	cmp	r7, #0
    19a8:	d0fa      	beq.n	19a0 <__sflush_r+0x18>
    19aa:	2300      	movs	r3, #0
    19ac:	682e      	ldr	r6, [r5, #0]
    19ae:	602b      	str	r3, [r5, #0]
    19b0:	2380      	movs	r3, #128	; 0x80
    19b2:	015b      	lsls	r3, r3, #5
    19b4:	401a      	ands	r2, r3
    19b6:	d034      	beq.n	1a22 <__sflush_r+0x9a>
    19b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    19ba:	89a3      	ldrh	r3, [r4, #12]
    19bc:	075b      	lsls	r3, r3, #29
    19be:	d506      	bpl.n	19ce <__sflush_r+0x46>
    19c0:	6863      	ldr	r3, [r4, #4]
    19c2:	1ac0      	subs	r0, r0, r3
    19c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    19c6:	2b00      	cmp	r3, #0
    19c8:	d001      	beq.n	19ce <__sflush_r+0x46>
    19ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    19cc:	1ac0      	subs	r0, r0, r3
    19ce:	0002      	movs	r2, r0
    19d0:	6a21      	ldr	r1, [r4, #32]
    19d2:	2300      	movs	r3, #0
    19d4:	0028      	movs	r0, r5
    19d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    19d8:	47b8      	blx	r7
    19da:	89a1      	ldrh	r1, [r4, #12]
    19dc:	1c43      	adds	r3, r0, #1
    19de:	d106      	bne.n	19ee <__sflush_r+0x66>
    19e0:	682b      	ldr	r3, [r5, #0]
    19e2:	2b1d      	cmp	r3, #29
    19e4:	d831      	bhi.n	1a4a <__sflush_r+0xc2>
    19e6:	4a2c      	ldr	r2, [pc, #176]	; (1a98 <__sflush_r+0x110>)
    19e8:	40da      	lsrs	r2, r3
    19ea:	07d3      	lsls	r3, r2, #31
    19ec:	d52d      	bpl.n	1a4a <__sflush_r+0xc2>
    19ee:	2300      	movs	r3, #0
    19f0:	6063      	str	r3, [r4, #4]
    19f2:	6923      	ldr	r3, [r4, #16]
    19f4:	6023      	str	r3, [r4, #0]
    19f6:	04cb      	lsls	r3, r1, #19
    19f8:	d505      	bpl.n	1a06 <__sflush_r+0x7e>
    19fa:	1c43      	adds	r3, r0, #1
    19fc:	d102      	bne.n	1a04 <__sflush_r+0x7c>
    19fe:	682b      	ldr	r3, [r5, #0]
    1a00:	2b00      	cmp	r3, #0
    1a02:	d100      	bne.n	1a06 <__sflush_r+0x7e>
    1a04:	6560      	str	r0, [r4, #84]	; 0x54
    1a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1a08:	602e      	str	r6, [r5, #0]
    1a0a:	2900      	cmp	r1, #0
    1a0c:	d0c8      	beq.n	19a0 <__sflush_r+0x18>
    1a0e:	0023      	movs	r3, r4
    1a10:	3344      	adds	r3, #68	; 0x44
    1a12:	4299      	cmp	r1, r3
    1a14:	d002      	beq.n	1a1c <__sflush_r+0x94>
    1a16:	0028      	movs	r0, r5
    1a18:	f000 f976 	bl	1d08 <_free_r>
    1a1c:	2000      	movs	r0, #0
    1a1e:	6360      	str	r0, [r4, #52]	; 0x34
    1a20:	e7bf      	b.n	19a2 <__sflush_r+0x1a>
    1a22:	2301      	movs	r3, #1
    1a24:	6a21      	ldr	r1, [r4, #32]
    1a26:	0028      	movs	r0, r5
    1a28:	47b8      	blx	r7
    1a2a:	1c43      	adds	r3, r0, #1
    1a2c:	d1c5      	bne.n	19ba <__sflush_r+0x32>
    1a2e:	682b      	ldr	r3, [r5, #0]
    1a30:	2b00      	cmp	r3, #0
    1a32:	d0c2      	beq.n	19ba <__sflush_r+0x32>
    1a34:	2b1d      	cmp	r3, #29
    1a36:	d001      	beq.n	1a3c <__sflush_r+0xb4>
    1a38:	2b16      	cmp	r3, #22
    1a3a:	d101      	bne.n	1a40 <__sflush_r+0xb8>
    1a3c:	602e      	str	r6, [r5, #0]
    1a3e:	e7af      	b.n	19a0 <__sflush_r+0x18>
    1a40:	2340      	movs	r3, #64	; 0x40
    1a42:	89a2      	ldrh	r2, [r4, #12]
    1a44:	4313      	orrs	r3, r2
    1a46:	81a3      	strh	r3, [r4, #12]
    1a48:	e7ab      	b.n	19a2 <__sflush_r+0x1a>
    1a4a:	2340      	movs	r3, #64	; 0x40
    1a4c:	430b      	orrs	r3, r1
    1a4e:	2001      	movs	r0, #1
    1a50:	81a3      	strh	r3, [r4, #12]
    1a52:	4240      	negs	r0, r0
    1a54:	e7a5      	b.n	19a2 <__sflush_r+0x1a>
    1a56:	690f      	ldr	r7, [r1, #16]
    1a58:	2f00      	cmp	r7, #0
    1a5a:	d0a1      	beq.n	19a0 <__sflush_r+0x18>
    1a5c:	680b      	ldr	r3, [r1, #0]
    1a5e:	600f      	str	r7, [r1, #0]
    1a60:	1bdb      	subs	r3, r3, r7
    1a62:	9301      	str	r3, [sp, #4]
    1a64:	2300      	movs	r3, #0
    1a66:	0792      	lsls	r2, r2, #30
    1a68:	d100      	bne.n	1a6c <__sflush_r+0xe4>
    1a6a:	694b      	ldr	r3, [r1, #20]
    1a6c:	60a3      	str	r3, [r4, #8]
    1a6e:	9b01      	ldr	r3, [sp, #4]
    1a70:	2b00      	cmp	r3, #0
    1a72:	dc00      	bgt.n	1a76 <__sflush_r+0xee>
    1a74:	e794      	b.n	19a0 <__sflush_r+0x18>
    1a76:	9b01      	ldr	r3, [sp, #4]
    1a78:	003a      	movs	r2, r7
    1a7a:	6a21      	ldr	r1, [r4, #32]
    1a7c:	0028      	movs	r0, r5
    1a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1a80:	47b0      	blx	r6
    1a82:	2800      	cmp	r0, #0
    1a84:	dc03      	bgt.n	1a8e <__sflush_r+0x106>
    1a86:	2340      	movs	r3, #64	; 0x40
    1a88:	89a2      	ldrh	r2, [r4, #12]
    1a8a:	4313      	orrs	r3, r2
    1a8c:	e7df      	b.n	1a4e <__sflush_r+0xc6>
    1a8e:	9b01      	ldr	r3, [sp, #4]
    1a90:	183f      	adds	r7, r7, r0
    1a92:	1a1b      	subs	r3, r3, r0
    1a94:	9301      	str	r3, [sp, #4]
    1a96:	e7ea      	b.n	1a6e <__sflush_r+0xe6>
    1a98:	20400001 	.word	0x20400001

00001a9c <_fflush_r>:
    1a9c:	690b      	ldr	r3, [r1, #16]
    1a9e:	b570      	push	{r4, r5, r6, lr}
    1aa0:	0005      	movs	r5, r0
    1aa2:	000c      	movs	r4, r1
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	d101      	bne.n	1aac <_fflush_r+0x10>
    1aa8:	2000      	movs	r0, #0
    1aaa:	bd70      	pop	{r4, r5, r6, pc}
    1aac:	2800      	cmp	r0, #0
    1aae:	d004      	beq.n	1aba <_fflush_r+0x1e>
    1ab0:	6983      	ldr	r3, [r0, #24]
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d101      	bne.n	1aba <_fflush_r+0x1e>
    1ab6:	f000 f85f 	bl	1b78 <__sinit>
    1aba:	4b0b      	ldr	r3, [pc, #44]	; (1ae8 <_fflush_r+0x4c>)
    1abc:	429c      	cmp	r4, r3
    1abe:	d109      	bne.n	1ad4 <_fflush_r+0x38>
    1ac0:	686c      	ldr	r4, [r5, #4]
    1ac2:	220c      	movs	r2, #12
    1ac4:	5ea3      	ldrsh	r3, [r4, r2]
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d0ee      	beq.n	1aa8 <_fflush_r+0xc>
    1aca:	0021      	movs	r1, r4
    1acc:	0028      	movs	r0, r5
    1ace:	f7ff ff5b 	bl	1988 <__sflush_r>
    1ad2:	e7ea      	b.n	1aaa <_fflush_r+0xe>
    1ad4:	4b05      	ldr	r3, [pc, #20]	; (1aec <_fflush_r+0x50>)
    1ad6:	429c      	cmp	r4, r3
    1ad8:	d101      	bne.n	1ade <_fflush_r+0x42>
    1ada:	68ac      	ldr	r4, [r5, #8]
    1adc:	e7f1      	b.n	1ac2 <_fflush_r+0x26>
    1ade:	4b04      	ldr	r3, [pc, #16]	; (1af0 <_fflush_r+0x54>)
    1ae0:	429c      	cmp	r4, r3
    1ae2:	d1ee      	bne.n	1ac2 <_fflush_r+0x26>
    1ae4:	68ec      	ldr	r4, [r5, #12]
    1ae6:	e7ec      	b.n	1ac2 <_fflush_r+0x26>
    1ae8:	00002fb4 	.word	0x00002fb4
    1aec:	00002fd4 	.word	0x00002fd4
    1af0:	00002f94 	.word	0x00002f94

00001af4 <_cleanup_r>:
    1af4:	b510      	push	{r4, lr}
    1af6:	4902      	ldr	r1, [pc, #8]	; (1b00 <_cleanup_r+0xc>)
    1af8:	f000 f8b2 	bl	1c60 <_fwalk_reent>
    1afc:	bd10      	pop	{r4, pc}
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	00001a9d 	.word	0x00001a9d

00001b04 <std.isra.0>:
    1b04:	2300      	movs	r3, #0
    1b06:	b510      	push	{r4, lr}
    1b08:	0004      	movs	r4, r0
    1b0a:	6003      	str	r3, [r0, #0]
    1b0c:	6043      	str	r3, [r0, #4]
    1b0e:	6083      	str	r3, [r0, #8]
    1b10:	8181      	strh	r1, [r0, #12]
    1b12:	6643      	str	r3, [r0, #100]	; 0x64
    1b14:	81c2      	strh	r2, [r0, #14]
    1b16:	6103      	str	r3, [r0, #16]
    1b18:	6143      	str	r3, [r0, #20]
    1b1a:	6183      	str	r3, [r0, #24]
    1b1c:	0019      	movs	r1, r3
    1b1e:	2208      	movs	r2, #8
    1b20:	305c      	adds	r0, #92	; 0x5c
    1b22:	f7ff fe51 	bl	17c8 <memset>
    1b26:	4b05      	ldr	r3, [pc, #20]	; (1b3c <std.isra.0+0x38>)
    1b28:	6224      	str	r4, [r4, #32]
    1b2a:	6263      	str	r3, [r4, #36]	; 0x24
    1b2c:	4b04      	ldr	r3, [pc, #16]	; (1b40 <std.isra.0+0x3c>)
    1b2e:	62a3      	str	r3, [r4, #40]	; 0x28
    1b30:	4b04      	ldr	r3, [pc, #16]	; (1b44 <std.isra.0+0x40>)
    1b32:	62e3      	str	r3, [r4, #44]	; 0x2c
    1b34:	4b04      	ldr	r3, [pc, #16]	; (1b48 <std.isra.0+0x44>)
    1b36:	6323      	str	r3, [r4, #48]	; 0x30
    1b38:	bd10      	pop	{r4, pc}
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	00002459 	.word	0x00002459
    1b40:	00002481 	.word	0x00002481
    1b44:	000024b9 	.word	0x000024b9
    1b48:	000024e5 	.word	0x000024e5

00001b4c <__sfmoreglue>:
    1b4c:	b570      	push	{r4, r5, r6, lr}
    1b4e:	2568      	movs	r5, #104	; 0x68
    1b50:	1e4a      	subs	r2, r1, #1
    1b52:	4355      	muls	r5, r2
    1b54:	000e      	movs	r6, r1
    1b56:	0029      	movs	r1, r5
    1b58:	3174      	adds	r1, #116	; 0x74
    1b5a:	f000 f91f 	bl	1d9c <_malloc_r>
    1b5e:	1e04      	subs	r4, r0, #0
    1b60:	d008      	beq.n	1b74 <__sfmoreglue+0x28>
    1b62:	2100      	movs	r1, #0
    1b64:	002a      	movs	r2, r5
    1b66:	6001      	str	r1, [r0, #0]
    1b68:	6046      	str	r6, [r0, #4]
    1b6a:	300c      	adds	r0, #12
    1b6c:	60a0      	str	r0, [r4, #8]
    1b6e:	3268      	adds	r2, #104	; 0x68
    1b70:	f7ff fe2a 	bl	17c8 <memset>
    1b74:	0020      	movs	r0, r4
    1b76:	bd70      	pop	{r4, r5, r6, pc}

00001b78 <__sinit>:
    1b78:	6983      	ldr	r3, [r0, #24]
    1b7a:	b513      	push	{r0, r1, r4, lr}
    1b7c:	0004      	movs	r4, r0
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d128      	bne.n	1bd4 <__sinit+0x5c>
    1b82:	6483      	str	r3, [r0, #72]	; 0x48
    1b84:	64c3      	str	r3, [r0, #76]	; 0x4c
    1b86:	6503      	str	r3, [r0, #80]	; 0x50
    1b88:	4b13      	ldr	r3, [pc, #76]	; (1bd8 <__sinit+0x60>)
    1b8a:	4a14      	ldr	r2, [pc, #80]	; (1bdc <__sinit+0x64>)
    1b8c:	681b      	ldr	r3, [r3, #0]
    1b8e:	6282      	str	r2, [r0, #40]	; 0x28
    1b90:	9301      	str	r3, [sp, #4]
    1b92:	4298      	cmp	r0, r3
    1b94:	d101      	bne.n	1b9a <__sinit+0x22>
    1b96:	2301      	movs	r3, #1
    1b98:	6183      	str	r3, [r0, #24]
    1b9a:	0020      	movs	r0, r4
    1b9c:	f000 f820 	bl	1be0 <__sfp>
    1ba0:	6060      	str	r0, [r4, #4]
    1ba2:	0020      	movs	r0, r4
    1ba4:	f000 f81c 	bl	1be0 <__sfp>
    1ba8:	60a0      	str	r0, [r4, #8]
    1baa:	0020      	movs	r0, r4
    1bac:	f000 f818 	bl	1be0 <__sfp>
    1bb0:	2200      	movs	r2, #0
    1bb2:	60e0      	str	r0, [r4, #12]
    1bb4:	2104      	movs	r1, #4
    1bb6:	6860      	ldr	r0, [r4, #4]
    1bb8:	f7ff ffa4 	bl	1b04 <std.isra.0>
    1bbc:	2201      	movs	r2, #1
    1bbe:	2109      	movs	r1, #9
    1bc0:	68a0      	ldr	r0, [r4, #8]
    1bc2:	f7ff ff9f 	bl	1b04 <std.isra.0>
    1bc6:	2202      	movs	r2, #2
    1bc8:	2112      	movs	r1, #18
    1bca:	68e0      	ldr	r0, [r4, #12]
    1bcc:	f7ff ff9a 	bl	1b04 <std.isra.0>
    1bd0:	2301      	movs	r3, #1
    1bd2:	61a3      	str	r3, [r4, #24]
    1bd4:	bd13      	pop	{r0, r1, r4, pc}
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	00002f90 	.word	0x00002f90
    1bdc:	00001af5 	.word	0x00001af5

00001be0 <__sfp>:
    1be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1be2:	4b1e      	ldr	r3, [pc, #120]	; (1c5c <__sfp+0x7c>)
    1be4:	0007      	movs	r7, r0
    1be6:	681e      	ldr	r6, [r3, #0]
    1be8:	69b3      	ldr	r3, [r6, #24]
    1bea:	2b00      	cmp	r3, #0
    1bec:	d102      	bne.n	1bf4 <__sfp+0x14>
    1bee:	0030      	movs	r0, r6
    1bf0:	f7ff ffc2 	bl	1b78 <__sinit>
    1bf4:	3648      	adds	r6, #72	; 0x48
    1bf6:	68b4      	ldr	r4, [r6, #8]
    1bf8:	6873      	ldr	r3, [r6, #4]
    1bfa:	3b01      	subs	r3, #1
    1bfc:	d504      	bpl.n	1c08 <__sfp+0x28>
    1bfe:	6833      	ldr	r3, [r6, #0]
    1c00:	2b00      	cmp	r3, #0
    1c02:	d007      	beq.n	1c14 <__sfp+0x34>
    1c04:	6836      	ldr	r6, [r6, #0]
    1c06:	e7f6      	b.n	1bf6 <__sfp+0x16>
    1c08:	220c      	movs	r2, #12
    1c0a:	5ea5      	ldrsh	r5, [r4, r2]
    1c0c:	2d00      	cmp	r5, #0
    1c0e:	d00d      	beq.n	1c2c <__sfp+0x4c>
    1c10:	3468      	adds	r4, #104	; 0x68
    1c12:	e7f2      	b.n	1bfa <__sfp+0x1a>
    1c14:	2104      	movs	r1, #4
    1c16:	0038      	movs	r0, r7
    1c18:	f7ff ff98 	bl	1b4c <__sfmoreglue>
    1c1c:	6030      	str	r0, [r6, #0]
    1c1e:	2800      	cmp	r0, #0
    1c20:	d1f0      	bne.n	1c04 <__sfp+0x24>
    1c22:	230c      	movs	r3, #12
    1c24:	0004      	movs	r4, r0
    1c26:	603b      	str	r3, [r7, #0]
    1c28:	0020      	movs	r0, r4
    1c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c2c:	2301      	movs	r3, #1
    1c2e:	0020      	movs	r0, r4
    1c30:	425b      	negs	r3, r3
    1c32:	81e3      	strh	r3, [r4, #14]
    1c34:	3302      	adds	r3, #2
    1c36:	81a3      	strh	r3, [r4, #12]
    1c38:	6665      	str	r5, [r4, #100]	; 0x64
    1c3a:	6025      	str	r5, [r4, #0]
    1c3c:	60a5      	str	r5, [r4, #8]
    1c3e:	6065      	str	r5, [r4, #4]
    1c40:	6125      	str	r5, [r4, #16]
    1c42:	6165      	str	r5, [r4, #20]
    1c44:	61a5      	str	r5, [r4, #24]
    1c46:	2208      	movs	r2, #8
    1c48:	0029      	movs	r1, r5
    1c4a:	305c      	adds	r0, #92	; 0x5c
    1c4c:	f7ff fdbc 	bl	17c8 <memset>
    1c50:	6365      	str	r5, [r4, #52]	; 0x34
    1c52:	63a5      	str	r5, [r4, #56]	; 0x38
    1c54:	64a5      	str	r5, [r4, #72]	; 0x48
    1c56:	64e5      	str	r5, [r4, #76]	; 0x4c
    1c58:	e7e6      	b.n	1c28 <__sfp+0x48>
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	00002f90 	.word	0x00002f90

00001c60 <_fwalk_reent>:
    1c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1c62:	0004      	movs	r4, r0
    1c64:	0007      	movs	r7, r0
    1c66:	2600      	movs	r6, #0
    1c68:	9101      	str	r1, [sp, #4]
    1c6a:	3448      	adds	r4, #72	; 0x48
    1c6c:	2c00      	cmp	r4, #0
    1c6e:	d101      	bne.n	1c74 <_fwalk_reent+0x14>
    1c70:	0030      	movs	r0, r6
    1c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1c74:	6863      	ldr	r3, [r4, #4]
    1c76:	68a5      	ldr	r5, [r4, #8]
    1c78:	9300      	str	r3, [sp, #0]
    1c7a:	9b00      	ldr	r3, [sp, #0]
    1c7c:	3b01      	subs	r3, #1
    1c7e:	9300      	str	r3, [sp, #0]
    1c80:	d501      	bpl.n	1c86 <_fwalk_reent+0x26>
    1c82:	6824      	ldr	r4, [r4, #0]
    1c84:	e7f2      	b.n	1c6c <_fwalk_reent+0xc>
    1c86:	89ab      	ldrh	r3, [r5, #12]
    1c88:	2b01      	cmp	r3, #1
    1c8a:	d908      	bls.n	1c9e <_fwalk_reent+0x3e>
    1c8c:	220e      	movs	r2, #14
    1c8e:	5eab      	ldrsh	r3, [r5, r2]
    1c90:	3301      	adds	r3, #1
    1c92:	d004      	beq.n	1c9e <_fwalk_reent+0x3e>
    1c94:	0029      	movs	r1, r5
    1c96:	0038      	movs	r0, r7
    1c98:	9b01      	ldr	r3, [sp, #4]
    1c9a:	4798      	blx	r3
    1c9c:	4306      	orrs	r6, r0
    1c9e:	3568      	adds	r5, #104	; 0x68
    1ca0:	e7eb      	b.n	1c7a <_fwalk_reent+0x1a>
	...

00001ca4 <__swhatbuf_r>:
    1ca4:	b570      	push	{r4, r5, r6, lr}
    1ca6:	000e      	movs	r6, r1
    1ca8:	001d      	movs	r5, r3
    1caa:	230e      	movs	r3, #14
    1cac:	5ec9      	ldrsh	r1, [r1, r3]
    1cae:	b090      	sub	sp, #64	; 0x40
    1cb0:	0014      	movs	r4, r2
    1cb2:	2900      	cmp	r1, #0
    1cb4:	da07      	bge.n	1cc6 <__swhatbuf_r+0x22>
    1cb6:	2300      	movs	r3, #0
    1cb8:	602b      	str	r3, [r5, #0]
    1cba:	89b3      	ldrh	r3, [r6, #12]
    1cbc:	061b      	lsls	r3, r3, #24
    1cbe:	d411      	bmi.n	1ce4 <__swhatbuf_r+0x40>
    1cc0:	2380      	movs	r3, #128	; 0x80
    1cc2:	00db      	lsls	r3, r3, #3
    1cc4:	e00f      	b.n	1ce6 <__swhatbuf_r+0x42>
    1cc6:	aa01      	add	r2, sp, #4
    1cc8:	f000 fc38 	bl	253c <_fstat_r>
    1ccc:	2800      	cmp	r0, #0
    1cce:	dbf2      	blt.n	1cb6 <__swhatbuf_r+0x12>
    1cd0:	22f0      	movs	r2, #240	; 0xf0
    1cd2:	9b02      	ldr	r3, [sp, #8]
    1cd4:	0212      	lsls	r2, r2, #8
    1cd6:	4013      	ands	r3, r2
    1cd8:	4a05      	ldr	r2, [pc, #20]	; (1cf0 <__swhatbuf_r+0x4c>)
    1cda:	189b      	adds	r3, r3, r2
    1cdc:	425a      	negs	r2, r3
    1cde:	4153      	adcs	r3, r2
    1ce0:	602b      	str	r3, [r5, #0]
    1ce2:	e7ed      	b.n	1cc0 <__swhatbuf_r+0x1c>
    1ce4:	2340      	movs	r3, #64	; 0x40
    1ce6:	2000      	movs	r0, #0
    1ce8:	6023      	str	r3, [r4, #0]
    1cea:	b010      	add	sp, #64	; 0x40
    1cec:	bd70      	pop	{r4, r5, r6, pc}
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	ffffe000 	.word	0xffffe000

00001cf4 <malloc>:
    1cf4:	b510      	push	{r4, lr}
    1cf6:	4b03      	ldr	r3, [pc, #12]	; (1d04 <malloc+0x10>)
    1cf8:	0001      	movs	r1, r0
    1cfa:	6818      	ldr	r0, [r3, #0]
    1cfc:	f000 f84e 	bl	1d9c <_malloc_r>
    1d00:	bd10      	pop	{r4, pc}
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	20000000 	.word	0x20000000

00001d08 <_free_r>:
    1d08:	b570      	push	{r4, r5, r6, lr}
    1d0a:	0005      	movs	r5, r0
    1d0c:	2900      	cmp	r1, #0
    1d0e:	d010      	beq.n	1d32 <_free_r+0x2a>
    1d10:	1f0c      	subs	r4, r1, #4
    1d12:	6823      	ldr	r3, [r4, #0]
    1d14:	2b00      	cmp	r3, #0
    1d16:	da00      	bge.n	1d1a <_free_r+0x12>
    1d18:	18e4      	adds	r4, r4, r3
    1d1a:	0028      	movs	r0, r5
    1d1c:	f000 fc5a 	bl	25d4 <__malloc_lock>
    1d20:	4a1d      	ldr	r2, [pc, #116]	; (1d98 <_free_r+0x90>)
    1d22:	6813      	ldr	r3, [r2, #0]
    1d24:	2b00      	cmp	r3, #0
    1d26:	d105      	bne.n	1d34 <_free_r+0x2c>
    1d28:	6063      	str	r3, [r4, #4]
    1d2a:	6014      	str	r4, [r2, #0]
    1d2c:	0028      	movs	r0, r5
    1d2e:	f000 fc52 	bl	25d6 <__malloc_unlock>
    1d32:	bd70      	pop	{r4, r5, r6, pc}
    1d34:	42a3      	cmp	r3, r4
    1d36:	d909      	bls.n	1d4c <_free_r+0x44>
    1d38:	6821      	ldr	r1, [r4, #0]
    1d3a:	1860      	adds	r0, r4, r1
    1d3c:	4283      	cmp	r3, r0
    1d3e:	d1f3      	bne.n	1d28 <_free_r+0x20>
    1d40:	6818      	ldr	r0, [r3, #0]
    1d42:	685b      	ldr	r3, [r3, #4]
    1d44:	1841      	adds	r1, r0, r1
    1d46:	6021      	str	r1, [r4, #0]
    1d48:	e7ee      	b.n	1d28 <_free_r+0x20>
    1d4a:	0013      	movs	r3, r2
    1d4c:	685a      	ldr	r2, [r3, #4]
    1d4e:	2a00      	cmp	r2, #0
    1d50:	d001      	beq.n	1d56 <_free_r+0x4e>
    1d52:	42a2      	cmp	r2, r4
    1d54:	d9f9      	bls.n	1d4a <_free_r+0x42>
    1d56:	6819      	ldr	r1, [r3, #0]
    1d58:	1858      	adds	r0, r3, r1
    1d5a:	42a0      	cmp	r0, r4
    1d5c:	d10b      	bne.n	1d76 <_free_r+0x6e>
    1d5e:	6820      	ldr	r0, [r4, #0]
    1d60:	1809      	adds	r1, r1, r0
    1d62:	1858      	adds	r0, r3, r1
    1d64:	6019      	str	r1, [r3, #0]
    1d66:	4282      	cmp	r2, r0
    1d68:	d1e0      	bne.n	1d2c <_free_r+0x24>
    1d6a:	6810      	ldr	r0, [r2, #0]
    1d6c:	6852      	ldr	r2, [r2, #4]
    1d6e:	1841      	adds	r1, r0, r1
    1d70:	6019      	str	r1, [r3, #0]
    1d72:	605a      	str	r2, [r3, #4]
    1d74:	e7da      	b.n	1d2c <_free_r+0x24>
    1d76:	42a0      	cmp	r0, r4
    1d78:	d902      	bls.n	1d80 <_free_r+0x78>
    1d7a:	230c      	movs	r3, #12
    1d7c:	602b      	str	r3, [r5, #0]
    1d7e:	e7d5      	b.n	1d2c <_free_r+0x24>
    1d80:	6821      	ldr	r1, [r4, #0]
    1d82:	1860      	adds	r0, r4, r1
    1d84:	4282      	cmp	r2, r0
    1d86:	d103      	bne.n	1d90 <_free_r+0x88>
    1d88:	6810      	ldr	r0, [r2, #0]
    1d8a:	6852      	ldr	r2, [r2, #4]
    1d8c:	1841      	adds	r1, r0, r1
    1d8e:	6021      	str	r1, [r4, #0]
    1d90:	6062      	str	r2, [r4, #4]
    1d92:	605c      	str	r4, [r3, #4]
    1d94:	e7ca      	b.n	1d2c <_free_r+0x24>
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	2000008c 	.word	0x2000008c

00001d9c <_malloc_r>:
    1d9c:	2303      	movs	r3, #3
    1d9e:	b570      	push	{r4, r5, r6, lr}
    1da0:	1ccd      	adds	r5, r1, #3
    1da2:	439d      	bics	r5, r3
    1da4:	3508      	adds	r5, #8
    1da6:	0006      	movs	r6, r0
    1da8:	2d0c      	cmp	r5, #12
    1daa:	d21e      	bcs.n	1dea <_malloc_r+0x4e>
    1dac:	250c      	movs	r5, #12
    1dae:	42a9      	cmp	r1, r5
    1db0:	d81d      	bhi.n	1dee <_malloc_r+0x52>
    1db2:	0030      	movs	r0, r6
    1db4:	f000 fc0e 	bl	25d4 <__malloc_lock>
    1db8:	4a25      	ldr	r2, [pc, #148]	; (1e50 <_malloc_r+0xb4>)
    1dba:	6814      	ldr	r4, [r2, #0]
    1dbc:	0021      	movs	r1, r4
    1dbe:	2900      	cmp	r1, #0
    1dc0:	d119      	bne.n	1df6 <_malloc_r+0x5a>
    1dc2:	4c24      	ldr	r4, [pc, #144]	; (1e54 <_malloc_r+0xb8>)
    1dc4:	6823      	ldr	r3, [r4, #0]
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d103      	bne.n	1dd2 <_malloc_r+0x36>
    1dca:	0030      	movs	r0, r6
    1dcc:	f000 fb32 	bl	2434 <_sbrk_r>
    1dd0:	6020      	str	r0, [r4, #0]
    1dd2:	0029      	movs	r1, r5
    1dd4:	0030      	movs	r0, r6
    1dd6:	f000 fb2d 	bl	2434 <_sbrk_r>
    1dda:	1c43      	adds	r3, r0, #1
    1ddc:	d12c      	bne.n	1e38 <_malloc_r+0x9c>
    1dde:	230c      	movs	r3, #12
    1de0:	0030      	movs	r0, r6
    1de2:	6033      	str	r3, [r6, #0]
    1de4:	f000 fbf7 	bl	25d6 <__malloc_unlock>
    1de8:	e003      	b.n	1df2 <_malloc_r+0x56>
    1dea:	2d00      	cmp	r5, #0
    1dec:	dadf      	bge.n	1dae <_malloc_r+0x12>
    1dee:	230c      	movs	r3, #12
    1df0:	6033      	str	r3, [r6, #0]
    1df2:	2000      	movs	r0, #0
    1df4:	bd70      	pop	{r4, r5, r6, pc}
    1df6:	680b      	ldr	r3, [r1, #0]
    1df8:	1b5b      	subs	r3, r3, r5
    1dfa:	d41a      	bmi.n	1e32 <_malloc_r+0x96>
    1dfc:	2b0b      	cmp	r3, #11
    1dfe:	d903      	bls.n	1e08 <_malloc_r+0x6c>
    1e00:	600b      	str	r3, [r1, #0]
    1e02:	18cc      	adds	r4, r1, r3
    1e04:	6025      	str	r5, [r4, #0]
    1e06:	e003      	b.n	1e10 <_malloc_r+0x74>
    1e08:	428c      	cmp	r4, r1
    1e0a:	d10e      	bne.n	1e2a <_malloc_r+0x8e>
    1e0c:	6863      	ldr	r3, [r4, #4]
    1e0e:	6013      	str	r3, [r2, #0]
    1e10:	0030      	movs	r0, r6
    1e12:	f000 fbe0 	bl	25d6 <__malloc_unlock>
    1e16:	0020      	movs	r0, r4
    1e18:	2207      	movs	r2, #7
    1e1a:	300b      	adds	r0, #11
    1e1c:	1d23      	adds	r3, r4, #4
    1e1e:	4390      	bics	r0, r2
    1e20:	1ac3      	subs	r3, r0, r3
    1e22:	d0e7      	beq.n	1df4 <_malloc_r+0x58>
    1e24:	425a      	negs	r2, r3
    1e26:	50e2      	str	r2, [r4, r3]
    1e28:	e7e4      	b.n	1df4 <_malloc_r+0x58>
    1e2a:	684b      	ldr	r3, [r1, #4]
    1e2c:	6063      	str	r3, [r4, #4]
    1e2e:	000c      	movs	r4, r1
    1e30:	e7ee      	b.n	1e10 <_malloc_r+0x74>
    1e32:	000c      	movs	r4, r1
    1e34:	6849      	ldr	r1, [r1, #4]
    1e36:	e7c2      	b.n	1dbe <_malloc_r+0x22>
    1e38:	2303      	movs	r3, #3
    1e3a:	1cc4      	adds	r4, r0, #3
    1e3c:	439c      	bics	r4, r3
    1e3e:	42a0      	cmp	r0, r4
    1e40:	d0e0      	beq.n	1e04 <_malloc_r+0x68>
    1e42:	1a21      	subs	r1, r4, r0
    1e44:	0030      	movs	r0, r6
    1e46:	f000 faf5 	bl	2434 <_sbrk_r>
    1e4a:	1c43      	adds	r3, r0, #1
    1e4c:	d1da      	bne.n	1e04 <_malloc_r+0x68>
    1e4e:	e7c6      	b.n	1dde <_malloc_r+0x42>
    1e50:	2000008c 	.word	0x2000008c
    1e54:	20000090 	.word	0x20000090

00001e58 <__ssputs_r>:
    1e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e5a:	688e      	ldr	r6, [r1, #8]
    1e5c:	b085      	sub	sp, #20
    1e5e:	0007      	movs	r7, r0
    1e60:	000c      	movs	r4, r1
    1e62:	9203      	str	r2, [sp, #12]
    1e64:	9301      	str	r3, [sp, #4]
    1e66:	429e      	cmp	r6, r3
    1e68:	d839      	bhi.n	1ede <__ssputs_r+0x86>
    1e6a:	2390      	movs	r3, #144	; 0x90
    1e6c:	898a      	ldrh	r2, [r1, #12]
    1e6e:	00db      	lsls	r3, r3, #3
    1e70:	421a      	tst	r2, r3
    1e72:	d034      	beq.n	1ede <__ssputs_r+0x86>
    1e74:	2503      	movs	r5, #3
    1e76:	6909      	ldr	r1, [r1, #16]
    1e78:	6823      	ldr	r3, [r4, #0]
    1e7a:	1a5b      	subs	r3, r3, r1
    1e7c:	9302      	str	r3, [sp, #8]
    1e7e:	6963      	ldr	r3, [r4, #20]
    1e80:	9802      	ldr	r0, [sp, #8]
    1e82:	435d      	muls	r5, r3
    1e84:	0feb      	lsrs	r3, r5, #31
    1e86:	195d      	adds	r5, r3, r5
    1e88:	9b01      	ldr	r3, [sp, #4]
    1e8a:	106d      	asrs	r5, r5, #1
    1e8c:	3301      	adds	r3, #1
    1e8e:	181b      	adds	r3, r3, r0
    1e90:	42ab      	cmp	r3, r5
    1e92:	d900      	bls.n	1e96 <__ssputs_r+0x3e>
    1e94:	001d      	movs	r5, r3
    1e96:	0553      	lsls	r3, r2, #21
    1e98:	d532      	bpl.n	1f00 <__ssputs_r+0xa8>
    1e9a:	0029      	movs	r1, r5
    1e9c:	0038      	movs	r0, r7
    1e9e:	f7ff ff7d 	bl	1d9c <_malloc_r>
    1ea2:	1e06      	subs	r6, r0, #0
    1ea4:	d109      	bne.n	1eba <__ssputs_r+0x62>
    1ea6:	230c      	movs	r3, #12
    1ea8:	603b      	str	r3, [r7, #0]
    1eaa:	2340      	movs	r3, #64	; 0x40
    1eac:	2001      	movs	r0, #1
    1eae:	89a2      	ldrh	r2, [r4, #12]
    1eb0:	4240      	negs	r0, r0
    1eb2:	4313      	orrs	r3, r2
    1eb4:	81a3      	strh	r3, [r4, #12]
    1eb6:	b005      	add	sp, #20
    1eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1eba:	9a02      	ldr	r2, [sp, #8]
    1ebc:	6921      	ldr	r1, [r4, #16]
    1ebe:	f000 fb6e 	bl	259e <memcpy>
    1ec2:	89a3      	ldrh	r3, [r4, #12]
    1ec4:	4a14      	ldr	r2, [pc, #80]	; (1f18 <__ssputs_r+0xc0>)
    1ec6:	401a      	ands	r2, r3
    1ec8:	2380      	movs	r3, #128	; 0x80
    1eca:	4313      	orrs	r3, r2
    1ecc:	81a3      	strh	r3, [r4, #12]
    1ece:	9b02      	ldr	r3, [sp, #8]
    1ed0:	6126      	str	r6, [r4, #16]
    1ed2:	18f6      	adds	r6, r6, r3
    1ed4:	6026      	str	r6, [r4, #0]
    1ed6:	6165      	str	r5, [r4, #20]
    1ed8:	9e01      	ldr	r6, [sp, #4]
    1eda:	1aed      	subs	r5, r5, r3
    1edc:	60a5      	str	r5, [r4, #8]
    1ede:	9b01      	ldr	r3, [sp, #4]
    1ee0:	42b3      	cmp	r3, r6
    1ee2:	d200      	bcs.n	1ee6 <__ssputs_r+0x8e>
    1ee4:	001e      	movs	r6, r3
    1ee6:	0032      	movs	r2, r6
    1ee8:	9903      	ldr	r1, [sp, #12]
    1eea:	6820      	ldr	r0, [r4, #0]
    1eec:	f000 fb60 	bl	25b0 <memmove>
    1ef0:	68a3      	ldr	r3, [r4, #8]
    1ef2:	2000      	movs	r0, #0
    1ef4:	1b9b      	subs	r3, r3, r6
    1ef6:	60a3      	str	r3, [r4, #8]
    1ef8:	6823      	ldr	r3, [r4, #0]
    1efa:	199e      	adds	r6, r3, r6
    1efc:	6026      	str	r6, [r4, #0]
    1efe:	e7da      	b.n	1eb6 <__ssputs_r+0x5e>
    1f00:	002a      	movs	r2, r5
    1f02:	0038      	movs	r0, r7
    1f04:	f000 fb68 	bl	25d8 <_realloc_r>
    1f08:	1e06      	subs	r6, r0, #0
    1f0a:	d1e0      	bne.n	1ece <__ssputs_r+0x76>
    1f0c:	6921      	ldr	r1, [r4, #16]
    1f0e:	0038      	movs	r0, r7
    1f10:	f7ff fefa 	bl	1d08 <_free_r>
    1f14:	e7c7      	b.n	1ea6 <__ssputs_r+0x4e>
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	fffffb7f 	.word	0xfffffb7f

00001f1c <_svfiprintf_r>:
    1f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f1e:	b09f      	sub	sp, #124	; 0x7c
    1f20:	9002      	str	r0, [sp, #8]
    1f22:	9305      	str	r3, [sp, #20]
    1f24:	898b      	ldrh	r3, [r1, #12]
    1f26:	000f      	movs	r7, r1
    1f28:	0016      	movs	r6, r2
    1f2a:	061b      	lsls	r3, r3, #24
    1f2c:	d511      	bpl.n	1f52 <_svfiprintf_r+0x36>
    1f2e:	690b      	ldr	r3, [r1, #16]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d10e      	bne.n	1f52 <_svfiprintf_r+0x36>
    1f34:	2140      	movs	r1, #64	; 0x40
    1f36:	f7ff ff31 	bl	1d9c <_malloc_r>
    1f3a:	6038      	str	r0, [r7, #0]
    1f3c:	6138      	str	r0, [r7, #16]
    1f3e:	2800      	cmp	r0, #0
    1f40:	d105      	bne.n	1f4e <_svfiprintf_r+0x32>
    1f42:	230c      	movs	r3, #12
    1f44:	9a02      	ldr	r2, [sp, #8]
    1f46:	3801      	subs	r0, #1
    1f48:	6013      	str	r3, [r2, #0]
    1f4a:	b01f      	add	sp, #124	; 0x7c
    1f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f4e:	2340      	movs	r3, #64	; 0x40
    1f50:	617b      	str	r3, [r7, #20]
    1f52:	2300      	movs	r3, #0
    1f54:	ad06      	add	r5, sp, #24
    1f56:	616b      	str	r3, [r5, #20]
    1f58:	3320      	adds	r3, #32
    1f5a:	766b      	strb	r3, [r5, #25]
    1f5c:	3310      	adds	r3, #16
    1f5e:	76ab      	strb	r3, [r5, #26]
    1f60:	0034      	movs	r4, r6
    1f62:	7823      	ldrb	r3, [r4, #0]
    1f64:	2b00      	cmp	r3, #0
    1f66:	d147      	bne.n	1ff8 <_svfiprintf_r+0xdc>
    1f68:	1ba3      	subs	r3, r4, r6
    1f6a:	9304      	str	r3, [sp, #16]
    1f6c:	d00d      	beq.n	1f8a <_svfiprintf_r+0x6e>
    1f6e:	1ba3      	subs	r3, r4, r6
    1f70:	0032      	movs	r2, r6
    1f72:	0039      	movs	r1, r7
    1f74:	9802      	ldr	r0, [sp, #8]
    1f76:	f7ff ff6f 	bl	1e58 <__ssputs_r>
    1f7a:	1c43      	adds	r3, r0, #1
    1f7c:	d100      	bne.n	1f80 <_svfiprintf_r+0x64>
    1f7e:	e0b5      	b.n	20ec <STACK_SIZE+0xec>
    1f80:	696a      	ldr	r2, [r5, #20]
    1f82:	9b04      	ldr	r3, [sp, #16]
    1f84:	4694      	mov	ip, r2
    1f86:	4463      	add	r3, ip
    1f88:	616b      	str	r3, [r5, #20]
    1f8a:	7823      	ldrb	r3, [r4, #0]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d100      	bne.n	1f92 <_svfiprintf_r+0x76>
    1f90:	e0ac      	b.n	20ec <STACK_SIZE+0xec>
    1f92:	2201      	movs	r2, #1
    1f94:	2300      	movs	r3, #0
    1f96:	4252      	negs	r2, r2
    1f98:	606a      	str	r2, [r5, #4]
    1f9a:	a902      	add	r1, sp, #8
    1f9c:	3254      	adds	r2, #84	; 0x54
    1f9e:	1852      	adds	r2, r2, r1
    1fa0:	3401      	adds	r4, #1
    1fa2:	602b      	str	r3, [r5, #0]
    1fa4:	60eb      	str	r3, [r5, #12]
    1fa6:	60ab      	str	r3, [r5, #8]
    1fa8:	7013      	strb	r3, [r2, #0]
    1faa:	65ab      	str	r3, [r5, #88]	; 0x58
    1fac:	4e58      	ldr	r6, [pc, #352]	; (2110 <STACK_SIZE+0x110>)
    1fae:	2205      	movs	r2, #5
    1fb0:	7821      	ldrb	r1, [r4, #0]
    1fb2:	0030      	movs	r0, r6
    1fb4:	f000 fae8 	bl	2588 <memchr>
    1fb8:	1c62      	adds	r2, r4, #1
    1fba:	2800      	cmp	r0, #0
    1fbc:	d120      	bne.n	2000 <STACK_SIZE>
    1fbe:	6829      	ldr	r1, [r5, #0]
    1fc0:	06cb      	lsls	r3, r1, #27
    1fc2:	d504      	bpl.n	1fce <_svfiprintf_r+0xb2>
    1fc4:	2353      	movs	r3, #83	; 0x53
    1fc6:	ae02      	add	r6, sp, #8
    1fc8:	3020      	adds	r0, #32
    1fca:	199b      	adds	r3, r3, r6
    1fcc:	7018      	strb	r0, [r3, #0]
    1fce:	070b      	lsls	r3, r1, #28
    1fd0:	d504      	bpl.n	1fdc <_svfiprintf_r+0xc0>
    1fd2:	2353      	movs	r3, #83	; 0x53
    1fd4:	202b      	movs	r0, #43	; 0x2b
    1fd6:	ae02      	add	r6, sp, #8
    1fd8:	199b      	adds	r3, r3, r6
    1fda:	7018      	strb	r0, [r3, #0]
    1fdc:	7823      	ldrb	r3, [r4, #0]
    1fde:	2b2a      	cmp	r3, #42	; 0x2a
    1fe0:	d016      	beq.n	2010 <STACK_SIZE+0x10>
    1fe2:	2000      	movs	r0, #0
    1fe4:	210a      	movs	r1, #10
    1fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fe8:	7822      	ldrb	r2, [r4, #0]
    1fea:	3a30      	subs	r2, #48	; 0x30
    1fec:	2a09      	cmp	r2, #9
    1fee:	d955      	bls.n	209c <STACK_SIZE+0x9c>
    1ff0:	2800      	cmp	r0, #0
    1ff2:	d015      	beq.n	2020 <STACK_SIZE+0x20>
    1ff4:	9309      	str	r3, [sp, #36]	; 0x24
    1ff6:	e013      	b.n	2020 <STACK_SIZE+0x20>
    1ff8:	2b25      	cmp	r3, #37	; 0x25
    1ffa:	d0b5      	beq.n	1f68 <_svfiprintf_r+0x4c>
    1ffc:	3401      	adds	r4, #1
    1ffe:	e7b0      	b.n	1f62 <_svfiprintf_r+0x46>
    2000:	2301      	movs	r3, #1
    2002:	1b80      	subs	r0, r0, r6
    2004:	4083      	lsls	r3, r0
    2006:	6829      	ldr	r1, [r5, #0]
    2008:	0014      	movs	r4, r2
    200a:	430b      	orrs	r3, r1
    200c:	602b      	str	r3, [r5, #0]
    200e:	e7cd      	b.n	1fac <_svfiprintf_r+0x90>
    2010:	9b05      	ldr	r3, [sp, #20]
    2012:	1d18      	adds	r0, r3, #4
    2014:	681b      	ldr	r3, [r3, #0]
    2016:	9005      	str	r0, [sp, #20]
    2018:	2b00      	cmp	r3, #0
    201a:	db39      	blt.n	2090 <STACK_SIZE+0x90>
    201c:	9309      	str	r3, [sp, #36]	; 0x24
    201e:	0014      	movs	r4, r2
    2020:	7823      	ldrb	r3, [r4, #0]
    2022:	2b2e      	cmp	r3, #46	; 0x2e
    2024:	d10b      	bne.n	203e <STACK_SIZE+0x3e>
    2026:	7863      	ldrb	r3, [r4, #1]
    2028:	1c62      	adds	r2, r4, #1
    202a:	2b2a      	cmp	r3, #42	; 0x2a
    202c:	d13e      	bne.n	20ac <STACK_SIZE+0xac>
    202e:	9b05      	ldr	r3, [sp, #20]
    2030:	3402      	adds	r4, #2
    2032:	1d1a      	adds	r2, r3, #4
    2034:	681b      	ldr	r3, [r3, #0]
    2036:	9205      	str	r2, [sp, #20]
    2038:	2b00      	cmp	r3, #0
    203a:	db34      	blt.n	20a6 <STACK_SIZE+0xa6>
    203c:	9307      	str	r3, [sp, #28]
    203e:	4e35      	ldr	r6, [pc, #212]	; (2114 <STACK_SIZE+0x114>)
    2040:	7821      	ldrb	r1, [r4, #0]
    2042:	2203      	movs	r2, #3
    2044:	0030      	movs	r0, r6
    2046:	f000 fa9f 	bl	2588 <memchr>
    204a:	2800      	cmp	r0, #0
    204c:	d006      	beq.n	205c <STACK_SIZE+0x5c>
    204e:	2340      	movs	r3, #64	; 0x40
    2050:	1b80      	subs	r0, r0, r6
    2052:	4083      	lsls	r3, r0
    2054:	682a      	ldr	r2, [r5, #0]
    2056:	3401      	adds	r4, #1
    2058:	4313      	orrs	r3, r2
    205a:	602b      	str	r3, [r5, #0]
    205c:	7821      	ldrb	r1, [r4, #0]
    205e:	2206      	movs	r2, #6
    2060:	482d      	ldr	r0, [pc, #180]	; (2118 <STACK_SIZE+0x118>)
    2062:	1c66      	adds	r6, r4, #1
    2064:	7629      	strb	r1, [r5, #24]
    2066:	f000 fa8f 	bl	2588 <memchr>
    206a:	2800      	cmp	r0, #0
    206c:	d046      	beq.n	20fc <STACK_SIZE+0xfc>
    206e:	4b2b      	ldr	r3, [pc, #172]	; (211c <STACK_SIZE+0x11c>)
    2070:	2b00      	cmp	r3, #0
    2072:	d12f      	bne.n	20d4 <STACK_SIZE+0xd4>
    2074:	6829      	ldr	r1, [r5, #0]
    2076:	9b05      	ldr	r3, [sp, #20]
    2078:	2207      	movs	r2, #7
    207a:	05c9      	lsls	r1, r1, #23
    207c:	d528      	bpl.n	20d0 <STACK_SIZE+0xd0>
    207e:	189b      	adds	r3, r3, r2
    2080:	4393      	bics	r3, r2
    2082:	3308      	adds	r3, #8
    2084:	9305      	str	r3, [sp, #20]
    2086:	696b      	ldr	r3, [r5, #20]
    2088:	9a03      	ldr	r2, [sp, #12]
    208a:	189b      	adds	r3, r3, r2
    208c:	616b      	str	r3, [r5, #20]
    208e:	e767      	b.n	1f60 <_svfiprintf_r+0x44>
    2090:	425b      	negs	r3, r3
    2092:	60eb      	str	r3, [r5, #12]
    2094:	2302      	movs	r3, #2
    2096:	430b      	orrs	r3, r1
    2098:	602b      	str	r3, [r5, #0]
    209a:	e7c0      	b.n	201e <STACK_SIZE+0x1e>
    209c:	434b      	muls	r3, r1
    209e:	3401      	adds	r4, #1
    20a0:	189b      	adds	r3, r3, r2
    20a2:	2001      	movs	r0, #1
    20a4:	e7a0      	b.n	1fe8 <_svfiprintf_r+0xcc>
    20a6:	2301      	movs	r3, #1
    20a8:	425b      	negs	r3, r3
    20aa:	e7c7      	b.n	203c <STACK_SIZE+0x3c>
    20ac:	2300      	movs	r3, #0
    20ae:	0014      	movs	r4, r2
    20b0:	200a      	movs	r0, #10
    20b2:	001a      	movs	r2, r3
    20b4:	606b      	str	r3, [r5, #4]
    20b6:	7821      	ldrb	r1, [r4, #0]
    20b8:	3930      	subs	r1, #48	; 0x30
    20ba:	2909      	cmp	r1, #9
    20bc:	d903      	bls.n	20c6 <STACK_SIZE+0xc6>
    20be:	2b00      	cmp	r3, #0
    20c0:	d0bd      	beq.n	203e <STACK_SIZE+0x3e>
    20c2:	9207      	str	r2, [sp, #28]
    20c4:	e7bb      	b.n	203e <STACK_SIZE+0x3e>
    20c6:	4342      	muls	r2, r0
    20c8:	3401      	adds	r4, #1
    20ca:	1852      	adds	r2, r2, r1
    20cc:	2301      	movs	r3, #1
    20ce:	e7f2      	b.n	20b6 <STACK_SIZE+0xb6>
    20d0:	3307      	adds	r3, #7
    20d2:	e7d5      	b.n	2080 <STACK_SIZE+0x80>
    20d4:	ab05      	add	r3, sp, #20
    20d6:	9300      	str	r3, [sp, #0]
    20d8:	003a      	movs	r2, r7
    20da:	4b11      	ldr	r3, [pc, #68]	; (2120 <STACK_SIZE+0x120>)
    20dc:	0029      	movs	r1, r5
    20de:	9802      	ldr	r0, [sp, #8]
    20e0:	e000      	b.n	20e4 <STACK_SIZE+0xe4>
    20e2:	bf00      	nop
    20e4:	9003      	str	r0, [sp, #12]
    20e6:	9b03      	ldr	r3, [sp, #12]
    20e8:	3301      	adds	r3, #1
    20ea:	d1cc      	bne.n	2086 <STACK_SIZE+0x86>
    20ec:	89bb      	ldrh	r3, [r7, #12]
    20ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    20f0:	065b      	lsls	r3, r3, #25
    20f2:	d400      	bmi.n	20f6 <STACK_SIZE+0xf6>
    20f4:	e729      	b.n	1f4a <_svfiprintf_r+0x2e>
    20f6:	2001      	movs	r0, #1
    20f8:	4240      	negs	r0, r0
    20fa:	e726      	b.n	1f4a <_svfiprintf_r+0x2e>
    20fc:	ab05      	add	r3, sp, #20
    20fe:	9300      	str	r3, [sp, #0]
    2100:	003a      	movs	r2, r7
    2102:	4b07      	ldr	r3, [pc, #28]	; (2120 <STACK_SIZE+0x120>)
    2104:	0029      	movs	r1, r5
    2106:	9802      	ldr	r0, [sp, #8]
    2108:	f000 f87a 	bl	2200 <_printf_i>
    210c:	e7ea      	b.n	20e4 <STACK_SIZE+0xe4>
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	00002ff4 	.word	0x00002ff4
    2114:	00002ffa 	.word	0x00002ffa
    2118:	00002ffe 	.word	0x00002ffe
    211c:	00000000 	.word	0x00000000
    2120:	00001e59 	.word	0x00001e59

00002124 <_printf_common>:
    2124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2126:	0015      	movs	r5, r2
    2128:	9301      	str	r3, [sp, #4]
    212a:	688a      	ldr	r2, [r1, #8]
    212c:	690b      	ldr	r3, [r1, #16]
    212e:	9000      	str	r0, [sp, #0]
    2130:	000c      	movs	r4, r1
    2132:	4293      	cmp	r3, r2
    2134:	da00      	bge.n	2138 <_printf_common+0x14>
    2136:	0013      	movs	r3, r2
    2138:	0022      	movs	r2, r4
    213a:	602b      	str	r3, [r5, #0]
    213c:	3243      	adds	r2, #67	; 0x43
    213e:	7812      	ldrb	r2, [r2, #0]
    2140:	2a00      	cmp	r2, #0
    2142:	d001      	beq.n	2148 <_printf_common+0x24>
    2144:	3301      	adds	r3, #1
    2146:	602b      	str	r3, [r5, #0]
    2148:	6823      	ldr	r3, [r4, #0]
    214a:	069b      	lsls	r3, r3, #26
    214c:	d502      	bpl.n	2154 <_printf_common+0x30>
    214e:	682b      	ldr	r3, [r5, #0]
    2150:	3302      	adds	r3, #2
    2152:	602b      	str	r3, [r5, #0]
    2154:	2706      	movs	r7, #6
    2156:	6823      	ldr	r3, [r4, #0]
    2158:	401f      	ands	r7, r3
    215a:	d027      	beq.n	21ac <_printf_common+0x88>
    215c:	0023      	movs	r3, r4
    215e:	3343      	adds	r3, #67	; 0x43
    2160:	781b      	ldrb	r3, [r3, #0]
    2162:	1e5a      	subs	r2, r3, #1
    2164:	4193      	sbcs	r3, r2
    2166:	6822      	ldr	r2, [r4, #0]
    2168:	0692      	lsls	r2, r2, #26
    216a:	d430      	bmi.n	21ce <_printf_common+0xaa>
    216c:	0022      	movs	r2, r4
    216e:	9901      	ldr	r1, [sp, #4]
    2170:	3243      	adds	r2, #67	; 0x43
    2172:	9800      	ldr	r0, [sp, #0]
    2174:	9e08      	ldr	r6, [sp, #32]
    2176:	47b0      	blx	r6
    2178:	1c43      	adds	r3, r0, #1
    217a:	d025      	beq.n	21c8 <_printf_common+0xa4>
    217c:	2306      	movs	r3, #6
    217e:	6820      	ldr	r0, [r4, #0]
    2180:	682a      	ldr	r2, [r5, #0]
    2182:	68e1      	ldr	r1, [r4, #12]
    2184:	4003      	ands	r3, r0
    2186:	2500      	movs	r5, #0
    2188:	2b04      	cmp	r3, #4
    218a:	d103      	bne.n	2194 <_printf_common+0x70>
    218c:	1a8d      	subs	r5, r1, r2
    218e:	43eb      	mvns	r3, r5
    2190:	17db      	asrs	r3, r3, #31
    2192:	401d      	ands	r5, r3
    2194:	68a3      	ldr	r3, [r4, #8]
    2196:	6922      	ldr	r2, [r4, #16]
    2198:	4293      	cmp	r3, r2
    219a:	dd01      	ble.n	21a0 <_printf_common+0x7c>
    219c:	1a9b      	subs	r3, r3, r2
    219e:	18ed      	adds	r5, r5, r3
    21a0:	2700      	movs	r7, #0
    21a2:	42bd      	cmp	r5, r7
    21a4:	d120      	bne.n	21e8 <_printf_common+0xc4>
    21a6:	2000      	movs	r0, #0
    21a8:	e010      	b.n	21cc <_printf_common+0xa8>
    21aa:	3701      	adds	r7, #1
    21ac:	68e3      	ldr	r3, [r4, #12]
    21ae:	682a      	ldr	r2, [r5, #0]
    21b0:	1a9b      	subs	r3, r3, r2
    21b2:	429f      	cmp	r7, r3
    21b4:	dad2      	bge.n	215c <_printf_common+0x38>
    21b6:	0022      	movs	r2, r4
    21b8:	2301      	movs	r3, #1
    21ba:	3219      	adds	r2, #25
    21bc:	9901      	ldr	r1, [sp, #4]
    21be:	9800      	ldr	r0, [sp, #0]
    21c0:	9e08      	ldr	r6, [sp, #32]
    21c2:	47b0      	blx	r6
    21c4:	1c43      	adds	r3, r0, #1
    21c6:	d1f0      	bne.n	21aa <_printf_common+0x86>
    21c8:	2001      	movs	r0, #1
    21ca:	4240      	negs	r0, r0
    21cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    21ce:	2030      	movs	r0, #48	; 0x30
    21d0:	18e1      	adds	r1, r4, r3
    21d2:	3143      	adds	r1, #67	; 0x43
    21d4:	7008      	strb	r0, [r1, #0]
    21d6:	0021      	movs	r1, r4
    21d8:	1c5a      	adds	r2, r3, #1
    21da:	3145      	adds	r1, #69	; 0x45
    21dc:	7809      	ldrb	r1, [r1, #0]
    21de:	18a2      	adds	r2, r4, r2
    21e0:	3243      	adds	r2, #67	; 0x43
    21e2:	3302      	adds	r3, #2
    21e4:	7011      	strb	r1, [r2, #0]
    21e6:	e7c1      	b.n	216c <_printf_common+0x48>
    21e8:	0022      	movs	r2, r4
    21ea:	2301      	movs	r3, #1
    21ec:	321a      	adds	r2, #26
    21ee:	9901      	ldr	r1, [sp, #4]
    21f0:	9800      	ldr	r0, [sp, #0]
    21f2:	9e08      	ldr	r6, [sp, #32]
    21f4:	47b0      	blx	r6
    21f6:	1c43      	adds	r3, r0, #1
    21f8:	d0e6      	beq.n	21c8 <_printf_common+0xa4>
    21fa:	3701      	adds	r7, #1
    21fc:	e7d1      	b.n	21a2 <_printf_common+0x7e>
	...

00002200 <_printf_i>:
    2200:	b5f0      	push	{r4, r5, r6, r7, lr}
    2202:	b08b      	sub	sp, #44	; 0x2c
    2204:	9206      	str	r2, [sp, #24]
    2206:	000a      	movs	r2, r1
    2208:	3243      	adds	r2, #67	; 0x43
    220a:	9307      	str	r3, [sp, #28]
    220c:	9005      	str	r0, [sp, #20]
    220e:	9204      	str	r2, [sp, #16]
    2210:	7e0a      	ldrb	r2, [r1, #24]
    2212:	000c      	movs	r4, r1
    2214:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2216:	2a6e      	cmp	r2, #110	; 0x6e
    2218:	d100      	bne.n	221c <_printf_i+0x1c>
    221a:	e08f      	b.n	233c <_printf_i+0x13c>
    221c:	d817      	bhi.n	224e <_printf_i+0x4e>
    221e:	2a63      	cmp	r2, #99	; 0x63
    2220:	d02c      	beq.n	227c <_printf_i+0x7c>
    2222:	d808      	bhi.n	2236 <_printf_i+0x36>
    2224:	2a00      	cmp	r2, #0
    2226:	d100      	bne.n	222a <_printf_i+0x2a>
    2228:	e099      	b.n	235e <_printf_i+0x15e>
    222a:	2a58      	cmp	r2, #88	; 0x58
    222c:	d054      	beq.n	22d8 <_printf_i+0xd8>
    222e:	0026      	movs	r6, r4
    2230:	3642      	adds	r6, #66	; 0x42
    2232:	7032      	strb	r2, [r6, #0]
    2234:	e029      	b.n	228a <_printf_i+0x8a>
    2236:	2a64      	cmp	r2, #100	; 0x64
    2238:	d001      	beq.n	223e <_printf_i+0x3e>
    223a:	2a69      	cmp	r2, #105	; 0x69
    223c:	d1f7      	bne.n	222e <_printf_i+0x2e>
    223e:	6821      	ldr	r1, [r4, #0]
    2240:	681a      	ldr	r2, [r3, #0]
    2242:	0608      	lsls	r0, r1, #24
    2244:	d523      	bpl.n	228e <_printf_i+0x8e>
    2246:	1d11      	adds	r1, r2, #4
    2248:	6019      	str	r1, [r3, #0]
    224a:	6815      	ldr	r5, [r2, #0]
    224c:	e025      	b.n	229a <_printf_i+0x9a>
    224e:	2a73      	cmp	r2, #115	; 0x73
    2250:	d100      	bne.n	2254 <_printf_i+0x54>
    2252:	e088      	b.n	2366 <_printf_i+0x166>
    2254:	d808      	bhi.n	2268 <_printf_i+0x68>
    2256:	2a6f      	cmp	r2, #111	; 0x6f
    2258:	d029      	beq.n	22ae <_printf_i+0xae>
    225a:	2a70      	cmp	r2, #112	; 0x70
    225c:	d1e7      	bne.n	222e <_printf_i+0x2e>
    225e:	2220      	movs	r2, #32
    2260:	6809      	ldr	r1, [r1, #0]
    2262:	430a      	orrs	r2, r1
    2264:	6022      	str	r2, [r4, #0]
    2266:	e003      	b.n	2270 <_printf_i+0x70>
    2268:	2a75      	cmp	r2, #117	; 0x75
    226a:	d020      	beq.n	22ae <_printf_i+0xae>
    226c:	2a78      	cmp	r2, #120	; 0x78
    226e:	d1de      	bne.n	222e <_printf_i+0x2e>
    2270:	0022      	movs	r2, r4
    2272:	2178      	movs	r1, #120	; 0x78
    2274:	3245      	adds	r2, #69	; 0x45
    2276:	7011      	strb	r1, [r2, #0]
    2278:	4a6c      	ldr	r2, [pc, #432]	; (242c <_printf_i+0x22c>)
    227a:	e030      	b.n	22de <_printf_i+0xde>
    227c:	000e      	movs	r6, r1
    227e:	681a      	ldr	r2, [r3, #0]
    2280:	3642      	adds	r6, #66	; 0x42
    2282:	1d11      	adds	r1, r2, #4
    2284:	6019      	str	r1, [r3, #0]
    2286:	6813      	ldr	r3, [r2, #0]
    2288:	7033      	strb	r3, [r6, #0]
    228a:	2301      	movs	r3, #1
    228c:	e079      	b.n	2382 <_printf_i+0x182>
    228e:	0649      	lsls	r1, r1, #25
    2290:	d5d9      	bpl.n	2246 <_printf_i+0x46>
    2292:	1d11      	adds	r1, r2, #4
    2294:	6019      	str	r1, [r3, #0]
    2296:	2300      	movs	r3, #0
    2298:	5ed5      	ldrsh	r5, [r2, r3]
    229a:	2d00      	cmp	r5, #0
    229c:	da03      	bge.n	22a6 <_printf_i+0xa6>
    229e:	232d      	movs	r3, #45	; 0x2d
    22a0:	9a04      	ldr	r2, [sp, #16]
    22a2:	426d      	negs	r5, r5
    22a4:	7013      	strb	r3, [r2, #0]
    22a6:	4b62      	ldr	r3, [pc, #392]	; (2430 <_printf_i+0x230>)
    22a8:	270a      	movs	r7, #10
    22aa:	9303      	str	r3, [sp, #12]
    22ac:	e02f      	b.n	230e <_printf_i+0x10e>
    22ae:	6820      	ldr	r0, [r4, #0]
    22b0:	6819      	ldr	r1, [r3, #0]
    22b2:	0605      	lsls	r5, r0, #24
    22b4:	d503      	bpl.n	22be <_printf_i+0xbe>
    22b6:	1d08      	adds	r0, r1, #4
    22b8:	6018      	str	r0, [r3, #0]
    22ba:	680d      	ldr	r5, [r1, #0]
    22bc:	e005      	b.n	22ca <_printf_i+0xca>
    22be:	0640      	lsls	r0, r0, #25
    22c0:	d5f9      	bpl.n	22b6 <_printf_i+0xb6>
    22c2:	680d      	ldr	r5, [r1, #0]
    22c4:	1d08      	adds	r0, r1, #4
    22c6:	6018      	str	r0, [r3, #0]
    22c8:	b2ad      	uxth	r5, r5
    22ca:	4b59      	ldr	r3, [pc, #356]	; (2430 <_printf_i+0x230>)
    22cc:	2708      	movs	r7, #8
    22ce:	9303      	str	r3, [sp, #12]
    22d0:	2a6f      	cmp	r2, #111	; 0x6f
    22d2:	d018      	beq.n	2306 <_printf_i+0x106>
    22d4:	270a      	movs	r7, #10
    22d6:	e016      	b.n	2306 <_printf_i+0x106>
    22d8:	3145      	adds	r1, #69	; 0x45
    22da:	700a      	strb	r2, [r1, #0]
    22dc:	4a54      	ldr	r2, [pc, #336]	; (2430 <_printf_i+0x230>)
    22de:	9203      	str	r2, [sp, #12]
    22e0:	681a      	ldr	r2, [r3, #0]
    22e2:	6821      	ldr	r1, [r4, #0]
    22e4:	1d10      	adds	r0, r2, #4
    22e6:	6018      	str	r0, [r3, #0]
    22e8:	6815      	ldr	r5, [r2, #0]
    22ea:	0608      	lsls	r0, r1, #24
    22ec:	d522      	bpl.n	2334 <_printf_i+0x134>
    22ee:	07cb      	lsls	r3, r1, #31
    22f0:	d502      	bpl.n	22f8 <_printf_i+0xf8>
    22f2:	2320      	movs	r3, #32
    22f4:	4319      	orrs	r1, r3
    22f6:	6021      	str	r1, [r4, #0]
    22f8:	2710      	movs	r7, #16
    22fa:	2d00      	cmp	r5, #0
    22fc:	d103      	bne.n	2306 <_printf_i+0x106>
    22fe:	2320      	movs	r3, #32
    2300:	6822      	ldr	r2, [r4, #0]
    2302:	439a      	bics	r2, r3
    2304:	6022      	str	r2, [r4, #0]
    2306:	0023      	movs	r3, r4
    2308:	2200      	movs	r2, #0
    230a:	3343      	adds	r3, #67	; 0x43
    230c:	701a      	strb	r2, [r3, #0]
    230e:	6863      	ldr	r3, [r4, #4]
    2310:	60a3      	str	r3, [r4, #8]
    2312:	2b00      	cmp	r3, #0
    2314:	db5c      	blt.n	23d0 <_printf_i+0x1d0>
    2316:	2204      	movs	r2, #4
    2318:	6821      	ldr	r1, [r4, #0]
    231a:	4391      	bics	r1, r2
    231c:	6021      	str	r1, [r4, #0]
    231e:	2d00      	cmp	r5, #0
    2320:	d158      	bne.n	23d4 <_printf_i+0x1d4>
    2322:	9e04      	ldr	r6, [sp, #16]
    2324:	2b00      	cmp	r3, #0
    2326:	d064      	beq.n	23f2 <_printf_i+0x1f2>
    2328:	0026      	movs	r6, r4
    232a:	9b03      	ldr	r3, [sp, #12]
    232c:	3642      	adds	r6, #66	; 0x42
    232e:	781b      	ldrb	r3, [r3, #0]
    2330:	7033      	strb	r3, [r6, #0]
    2332:	e05e      	b.n	23f2 <_printf_i+0x1f2>
    2334:	0648      	lsls	r0, r1, #25
    2336:	d5da      	bpl.n	22ee <_printf_i+0xee>
    2338:	b2ad      	uxth	r5, r5
    233a:	e7d8      	b.n	22ee <_printf_i+0xee>
    233c:	6809      	ldr	r1, [r1, #0]
    233e:	681a      	ldr	r2, [r3, #0]
    2340:	0608      	lsls	r0, r1, #24
    2342:	d505      	bpl.n	2350 <_printf_i+0x150>
    2344:	1d11      	adds	r1, r2, #4
    2346:	6019      	str	r1, [r3, #0]
    2348:	6813      	ldr	r3, [r2, #0]
    234a:	6962      	ldr	r2, [r4, #20]
    234c:	601a      	str	r2, [r3, #0]
    234e:	e006      	b.n	235e <_printf_i+0x15e>
    2350:	0649      	lsls	r1, r1, #25
    2352:	d5f7      	bpl.n	2344 <_printf_i+0x144>
    2354:	1d11      	adds	r1, r2, #4
    2356:	6019      	str	r1, [r3, #0]
    2358:	6813      	ldr	r3, [r2, #0]
    235a:	8aa2      	ldrh	r2, [r4, #20]
    235c:	801a      	strh	r2, [r3, #0]
    235e:	2300      	movs	r3, #0
    2360:	9e04      	ldr	r6, [sp, #16]
    2362:	6123      	str	r3, [r4, #16]
    2364:	e054      	b.n	2410 <_printf_i+0x210>
    2366:	681a      	ldr	r2, [r3, #0]
    2368:	1d11      	adds	r1, r2, #4
    236a:	6019      	str	r1, [r3, #0]
    236c:	6816      	ldr	r6, [r2, #0]
    236e:	2100      	movs	r1, #0
    2370:	6862      	ldr	r2, [r4, #4]
    2372:	0030      	movs	r0, r6
    2374:	f000 f908 	bl	2588 <memchr>
    2378:	2800      	cmp	r0, #0
    237a:	d001      	beq.n	2380 <_printf_i+0x180>
    237c:	1b80      	subs	r0, r0, r6
    237e:	6060      	str	r0, [r4, #4]
    2380:	6863      	ldr	r3, [r4, #4]
    2382:	6123      	str	r3, [r4, #16]
    2384:	2300      	movs	r3, #0
    2386:	9a04      	ldr	r2, [sp, #16]
    2388:	7013      	strb	r3, [r2, #0]
    238a:	e041      	b.n	2410 <_printf_i+0x210>
    238c:	6923      	ldr	r3, [r4, #16]
    238e:	0032      	movs	r2, r6
    2390:	9906      	ldr	r1, [sp, #24]
    2392:	9805      	ldr	r0, [sp, #20]
    2394:	9d07      	ldr	r5, [sp, #28]
    2396:	47a8      	blx	r5
    2398:	1c43      	adds	r3, r0, #1
    239a:	d043      	beq.n	2424 <_printf_i+0x224>
    239c:	6823      	ldr	r3, [r4, #0]
    239e:	2500      	movs	r5, #0
    23a0:	079b      	lsls	r3, r3, #30
    23a2:	d40f      	bmi.n	23c4 <_printf_i+0x1c4>
    23a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    23a6:	68e0      	ldr	r0, [r4, #12]
    23a8:	4298      	cmp	r0, r3
    23aa:	da3d      	bge.n	2428 <_printf_i+0x228>
    23ac:	0018      	movs	r0, r3
    23ae:	e03b      	b.n	2428 <_printf_i+0x228>
    23b0:	0022      	movs	r2, r4
    23b2:	2301      	movs	r3, #1
    23b4:	3219      	adds	r2, #25
    23b6:	9906      	ldr	r1, [sp, #24]
    23b8:	9805      	ldr	r0, [sp, #20]
    23ba:	9e07      	ldr	r6, [sp, #28]
    23bc:	47b0      	blx	r6
    23be:	1c43      	adds	r3, r0, #1
    23c0:	d030      	beq.n	2424 <_printf_i+0x224>
    23c2:	3501      	adds	r5, #1
    23c4:	68e3      	ldr	r3, [r4, #12]
    23c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    23c8:	1a9b      	subs	r3, r3, r2
    23ca:	429d      	cmp	r5, r3
    23cc:	dbf0      	blt.n	23b0 <_printf_i+0x1b0>
    23ce:	e7e9      	b.n	23a4 <_printf_i+0x1a4>
    23d0:	2d00      	cmp	r5, #0
    23d2:	d0a9      	beq.n	2328 <_printf_i+0x128>
    23d4:	9e04      	ldr	r6, [sp, #16]
    23d6:	0028      	movs	r0, r5
    23d8:	0039      	movs	r1, r7
    23da:	f7ff f9cb 	bl	1774 <__aeabi_uidivmod>
    23de:	9b03      	ldr	r3, [sp, #12]
    23e0:	3e01      	subs	r6, #1
    23e2:	5c5b      	ldrb	r3, [r3, r1]
    23e4:	0028      	movs	r0, r5
    23e6:	7033      	strb	r3, [r6, #0]
    23e8:	0039      	movs	r1, r7
    23ea:	f7ff f93d 	bl	1668 <__udivsi3>
    23ee:	1e05      	subs	r5, r0, #0
    23f0:	d1f1      	bne.n	23d6 <_printf_i+0x1d6>
    23f2:	2f08      	cmp	r7, #8
    23f4:	d109      	bne.n	240a <_printf_i+0x20a>
    23f6:	6823      	ldr	r3, [r4, #0]
    23f8:	07db      	lsls	r3, r3, #31
    23fa:	d506      	bpl.n	240a <_printf_i+0x20a>
    23fc:	6863      	ldr	r3, [r4, #4]
    23fe:	6922      	ldr	r2, [r4, #16]
    2400:	4293      	cmp	r3, r2
    2402:	dc02      	bgt.n	240a <_printf_i+0x20a>
    2404:	2330      	movs	r3, #48	; 0x30
    2406:	3e01      	subs	r6, #1
    2408:	7033      	strb	r3, [r6, #0]
    240a:	9b04      	ldr	r3, [sp, #16]
    240c:	1b9b      	subs	r3, r3, r6
    240e:	6123      	str	r3, [r4, #16]
    2410:	9b07      	ldr	r3, [sp, #28]
    2412:	aa09      	add	r2, sp, #36	; 0x24
    2414:	9300      	str	r3, [sp, #0]
    2416:	0021      	movs	r1, r4
    2418:	9b06      	ldr	r3, [sp, #24]
    241a:	9805      	ldr	r0, [sp, #20]
    241c:	f7ff fe82 	bl	2124 <_printf_common>
    2420:	1c43      	adds	r3, r0, #1
    2422:	d1b3      	bne.n	238c <_printf_i+0x18c>
    2424:	2001      	movs	r0, #1
    2426:	4240      	negs	r0, r0
    2428:	b00b      	add	sp, #44	; 0x2c
    242a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    242c:	00003016 	.word	0x00003016
    2430:	00003005 	.word	0x00003005

00002434 <_sbrk_r>:
    2434:	2300      	movs	r3, #0
    2436:	b570      	push	{r4, r5, r6, lr}
    2438:	4c06      	ldr	r4, [pc, #24]	; (2454 <_sbrk_r+0x20>)
    243a:	0005      	movs	r5, r0
    243c:	0008      	movs	r0, r1
    243e:	6023      	str	r3, [r4, #0]
    2440:	f7fe f918 	bl	674 <_sbrk>
    2444:	1c43      	adds	r3, r0, #1
    2446:	d103      	bne.n	2450 <_sbrk_r+0x1c>
    2448:	6823      	ldr	r3, [r4, #0]
    244a:	2b00      	cmp	r3, #0
    244c:	d000      	beq.n	2450 <_sbrk_r+0x1c>
    244e:	602b      	str	r3, [r5, #0]
    2450:	bd70      	pop	{r4, r5, r6, pc}
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	200004d4 	.word	0x200004d4

00002458 <__sread>:
    2458:	b570      	push	{r4, r5, r6, lr}
    245a:	000c      	movs	r4, r1
    245c:	250e      	movs	r5, #14
    245e:	5f49      	ldrsh	r1, [r1, r5]
    2460:	f000 f8e0 	bl	2624 <_read_r>
    2464:	2800      	cmp	r0, #0
    2466:	db03      	blt.n	2470 <__sread+0x18>
    2468:	6d63      	ldr	r3, [r4, #84]	; 0x54
    246a:	181b      	adds	r3, r3, r0
    246c:	6563      	str	r3, [r4, #84]	; 0x54
    246e:	bd70      	pop	{r4, r5, r6, pc}
    2470:	89a3      	ldrh	r3, [r4, #12]
    2472:	4a02      	ldr	r2, [pc, #8]	; (247c <__sread+0x24>)
    2474:	4013      	ands	r3, r2
    2476:	81a3      	strh	r3, [r4, #12]
    2478:	e7f9      	b.n	246e <__sread+0x16>
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	ffffefff 	.word	0xffffefff

00002480 <__swrite>:
    2480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2482:	001f      	movs	r7, r3
    2484:	898b      	ldrh	r3, [r1, #12]
    2486:	0005      	movs	r5, r0
    2488:	000c      	movs	r4, r1
    248a:	0016      	movs	r6, r2
    248c:	05db      	lsls	r3, r3, #23
    248e:	d505      	bpl.n	249c <__swrite+0x1c>
    2490:	230e      	movs	r3, #14
    2492:	5ec9      	ldrsh	r1, [r1, r3]
    2494:	2200      	movs	r2, #0
    2496:	2302      	movs	r3, #2
    2498:	f000 f862 	bl	2560 <_lseek_r>
    249c:	89a3      	ldrh	r3, [r4, #12]
    249e:	4a05      	ldr	r2, [pc, #20]	; (24b4 <__swrite+0x34>)
    24a0:	0028      	movs	r0, r5
    24a2:	4013      	ands	r3, r2
    24a4:	81a3      	strh	r3, [r4, #12]
    24a6:	0032      	movs	r2, r6
    24a8:	230e      	movs	r3, #14
    24aa:	5ee1      	ldrsh	r1, [r4, r3]
    24ac:	003b      	movs	r3, r7
    24ae:	f000 f81f 	bl	24f0 <_write_r>
    24b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24b4:	ffffefff 	.word	0xffffefff

000024b8 <__sseek>:
    24b8:	b570      	push	{r4, r5, r6, lr}
    24ba:	000c      	movs	r4, r1
    24bc:	250e      	movs	r5, #14
    24be:	5f49      	ldrsh	r1, [r1, r5]
    24c0:	f000 f84e 	bl	2560 <_lseek_r>
    24c4:	89a3      	ldrh	r3, [r4, #12]
    24c6:	1c42      	adds	r2, r0, #1
    24c8:	d103      	bne.n	24d2 <__sseek+0x1a>
    24ca:	4a05      	ldr	r2, [pc, #20]	; (24e0 <__sseek+0x28>)
    24cc:	4013      	ands	r3, r2
    24ce:	81a3      	strh	r3, [r4, #12]
    24d0:	bd70      	pop	{r4, r5, r6, pc}
    24d2:	2280      	movs	r2, #128	; 0x80
    24d4:	0152      	lsls	r2, r2, #5
    24d6:	4313      	orrs	r3, r2
    24d8:	81a3      	strh	r3, [r4, #12]
    24da:	6560      	str	r0, [r4, #84]	; 0x54
    24dc:	e7f8      	b.n	24d0 <__sseek+0x18>
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	ffffefff 	.word	0xffffefff

000024e4 <__sclose>:
    24e4:	b510      	push	{r4, lr}
    24e6:	230e      	movs	r3, #14
    24e8:	5ec9      	ldrsh	r1, [r1, r3]
    24ea:	f000 f815 	bl	2518 <_close_r>
    24ee:	bd10      	pop	{r4, pc}

000024f0 <_write_r>:
    24f0:	b570      	push	{r4, r5, r6, lr}
    24f2:	0005      	movs	r5, r0
    24f4:	0008      	movs	r0, r1
    24f6:	0011      	movs	r1, r2
    24f8:	2200      	movs	r2, #0
    24fa:	4c06      	ldr	r4, [pc, #24]	; (2514 <_write_r+0x24>)
    24fc:	6022      	str	r2, [r4, #0]
    24fe:	001a      	movs	r2, r3
    2500:	f7ff f854 	bl	15ac <_write>
    2504:	1c43      	adds	r3, r0, #1
    2506:	d103      	bne.n	2510 <_write_r+0x20>
    2508:	6823      	ldr	r3, [r4, #0]
    250a:	2b00      	cmp	r3, #0
    250c:	d000      	beq.n	2510 <_write_r+0x20>
    250e:	602b      	str	r3, [r5, #0]
    2510:	bd70      	pop	{r4, r5, r6, pc}
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	200004d4 	.word	0x200004d4

00002518 <_close_r>:
    2518:	2300      	movs	r3, #0
    251a:	b570      	push	{r4, r5, r6, lr}
    251c:	4c06      	ldr	r4, [pc, #24]	; (2538 <_close_r+0x20>)
    251e:	0005      	movs	r5, r0
    2520:	0008      	movs	r0, r1
    2522:	6023      	str	r3, [r4, #0]
    2524:	f7fe f8b8 	bl	698 <_close>
    2528:	1c43      	adds	r3, r0, #1
    252a:	d103      	bne.n	2534 <_close_r+0x1c>
    252c:	6823      	ldr	r3, [r4, #0]
    252e:	2b00      	cmp	r3, #0
    2530:	d000      	beq.n	2534 <_close_r+0x1c>
    2532:	602b      	str	r3, [r5, #0]
    2534:	bd70      	pop	{r4, r5, r6, pc}
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	200004d4 	.word	0x200004d4

0000253c <_fstat_r>:
    253c:	2300      	movs	r3, #0
    253e:	b570      	push	{r4, r5, r6, lr}
    2540:	4c06      	ldr	r4, [pc, #24]	; (255c <_fstat_r+0x20>)
    2542:	0005      	movs	r5, r0
    2544:	0008      	movs	r0, r1
    2546:	0011      	movs	r1, r2
    2548:	6023      	str	r3, [r4, #0]
    254a:	f7fe f8a8 	bl	69e <_fstat>
    254e:	1c43      	adds	r3, r0, #1
    2550:	d103      	bne.n	255a <_fstat_r+0x1e>
    2552:	6823      	ldr	r3, [r4, #0]
    2554:	2b00      	cmp	r3, #0
    2556:	d000      	beq.n	255a <_fstat_r+0x1e>
    2558:	602b      	str	r3, [r5, #0]
    255a:	bd70      	pop	{r4, r5, r6, pc}
    255c:	200004d4 	.word	0x200004d4

00002560 <_lseek_r>:
    2560:	b570      	push	{r4, r5, r6, lr}
    2562:	0005      	movs	r5, r0
    2564:	0008      	movs	r0, r1
    2566:	0011      	movs	r1, r2
    2568:	2200      	movs	r2, #0
    256a:	4c06      	ldr	r4, [pc, #24]	; (2584 <_lseek_r+0x24>)
    256c:	6022      	str	r2, [r4, #0]
    256e:	001a      	movs	r2, r3
    2570:	f7fe f89a 	bl	6a8 <_lseek>
    2574:	1c43      	adds	r3, r0, #1
    2576:	d103      	bne.n	2580 <_lseek_r+0x20>
    2578:	6823      	ldr	r3, [r4, #0]
    257a:	2b00      	cmp	r3, #0
    257c:	d000      	beq.n	2580 <_lseek_r+0x20>
    257e:	602b      	str	r3, [r5, #0]
    2580:	bd70      	pop	{r4, r5, r6, pc}
    2582:	46c0      	nop			; (mov r8, r8)
    2584:	200004d4 	.word	0x200004d4

00002588 <memchr>:
    2588:	b2c9      	uxtb	r1, r1
    258a:	1882      	adds	r2, r0, r2
    258c:	4290      	cmp	r0, r2
    258e:	d101      	bne.n	2594 <memchr+0xc>
    2590:	2000      	movs	r0, #0
    2592:	4770      	bx	lr
    2594:	7803      	ldrb	r3, [r0, #0]
    2596:	428b      	cmp	r3, r1
    2598:	d0fb      	beq.n	2592 <memchr+0xa>
    259a:	3001      	adds	r0, #1
    259c:	e7f6      	b.n	258c <memchr+0x4>

0000259e <memcpy>:
    259e:	2300      	movs	r3, #0
    25a0:	b510      	push	{r4, lr}
    25a2:	429a      	cmp	r2, r3
    25a4:	d100      	bne.n	25a8 <memcpy+0xa>
    25a6:	bd10      	pop	{r4, pc}
    25a8:	5ccc      	ldrb	r4, [r1, r3]
    25aa:	54c4      	strb	r4, [r0, r3]
    25ac:	3301      	adds	r3, #1
    25ae:	e7f8      	b.n	25a2 <memcpy+0x4>

000025b0 <memmove>:
    25b0:	b510      	push	{r4, lr}
    25b2:	4288      	cmp	r0, r1
    25b4:	d902      	bls.n	25bc <memmove+0xc>
    25b6:	188b      	adds	r3, r1, r2
    25b8:	4298      	cmp	r0, r3
    25ba:	d308      	bcc.n	25ce <memmove+0x1e>
    25bc:	2300      	movs	r3, #0
    25be:	429a      	cmp	r2, r3
    25c0:	d007      	beq.n	25d2 <memmove+0x22>
    25c2:	5ccc      	ldrb	r4, [r1, r3]
    25c4:	54c4      	strb	r4, [r0, r3]
    25c6:	3301      	adds	r3, #1
    25c8:	e7f9      	b.n	25be <memmove+0xe>
    25ca:	5c8b      	ldrb	r3, [r1, r2]
    25cc:	5483      	strb	r3, [r0, r2]
    25ce:	3a01      	subs	r2, #1
    25d0:	d2fb      	bcs.n	25ca <memmove+0x1a>
    25d2:	bd10      	pop	{r4, pc}

000025d4 <__malloc_lock>:
    25d4:	4770      	bx	lr

000025d6 <__malloc_unlock>:
    25d6:	4770      	bx	lr

000025d8 <_realloc_r>:
    25d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25da:	0007      	movs	r7, r0
    25dc:	000d      	movs	r5, r1
    25de:	0016      	movs	r6, r2
    25e0:	2900      	cmp	r1, #0
    25e2:	d105      	bne.n	25f0 <_realloc_r+0x18>
    25e4:	0011      	movs	r1, r2
    25e6:	f7ff fbd9 	bl	1d9c <_malloc_r>
    25ea:	0004      	movs	r4, r0
    25ec:	0020      	movs	r0, r4
    25ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25f0:	2a00      	cmp	r2, #0
    25f2:	d103      	bne.n	25fc <_realloc_r+0x24>
    25f4:	f7ff fb88 	bl	1d08 <_free_r>
    25f8:	0034      	movs	r4, r6
    25fa:	e7f7      	b.n	25ec <_realloc_r+0x14>
    25fc:	f000 f826 	bl	264c <_malloc_usable_size_r>
    2600:	002c      	movs	r4, r5
    2602:	4286      	cmp	r6, r0
    2604:	d9f2      	bls.n	25ec <_realloc_r+0x14>
    2606:	0031      	movs	r1, r6
    2608:	0038      	movs	r0, r7
    260a:	f7ff fbc7 	bl	1d9c <_malloc_r>
    260e:	1e04      	subs	r4, r0, #0
    2610:	d0ec      	beq.n	25ec <_realloc_r+0x14>
    2612:	0029      	movs	r1, r5
    2614:	0032      	movs	r2, r6
    2616:	f7ff ffc2 	bl	259e <memcpy>
    261a:	0029      	movs	r1, r5
    261c:	0038      	movs	r0, r7
    261e:	f7ff fb73 	bl	1d08 <_free_r>
    2622:	e7e3      	b.n	25ec <_realloc_r+0x14>

00002624 <_read_r>:
    2624:	b570      	push	{r4, r5, r6, lr}
    2626:	0005      	movs	r5, r0
    2628:	0008      	movs	r0, r1
    262a:	0011      	movs	r1, r2
    262c:	2200      	movs	r2, #0
    262e:	4c06      	ldr	r4, [pc, #24]	; (2648 <_read_r+0x24>)
    2630:	6022      	str	r2, [r4, #0]
    2632:	001a      	movs	r2, r3
    2634:	f7fe ffa6 	bl	1584 <_read>
    2638:	1c43      	adds	r3, r0, #1
    263a:	d103      	bne.n	2644 <_read_r+0x20>
    263c:	6823      	ldr	r3, [r4, #0]
    263e:	2b00      	cmp	r3, #0
    2640:	d000      	beq.n	2644 <_read_r+0x20>
    2642:	602b      	str	r3, [r5, #0]
    2644:	bd70      	pop	{r4, r5, r6, pc}
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	200004d4 	.word	0x200004d4

0000264c <_malloc_usable_size_r>:
    264c:	1f0b      	subs	r3, r1, #4
    264e:	681b      	ldr	r3, [r3, #0]
    2650:	1f18      	subs	r0, r3, #4
    2652:	2b00      	cmp	r3, #0
    2654:	da01      	bge.n	265a <_malloc_usable_size_r+0xe>
    2656:	580b      	ldr	r3, [r1, r0]
    2658:	18c0      	adds	r0, r0, r3
    265a:	4770      	bx	lr
    265c:	682f2e2e 	.word	0x682f2e2e
    2660:	732f6c61 	.word	0x732f6c61
    2664:	682f6372 	.word	0x682f6372
    2668:	695f6c61 	.word	0x695f6c61
    266c:	6d5f6332 	.word	0x6d5f6332
    2670:	6e79735f 	.word	0x6e79735f
    2674:	00632e63 	.word	0x00632e63
    2678:	682f2e2e 	.word	0x682f2e2e
    267c:	732f6c61 	.word	0x732f6c61
    2680:	682f6372 	.word	0x682f6372
    2684:	695f6c61 	.word	0x695f6c61
    2688:	00632e6f 	.word	0x00632e6f
    268c:	682f2e2e 	.word	0x682f2e2e
    2690:	732f6c61 	.word	0x732f6c61
    2694:	682f6372 	.word	0x682f6372
    2698:	755f6c61 	.word	0x755f6c61
    269c:	74726173 	.word	0x74726173
    26a0:	6e79735f 	.word	0x6e79735f
    26a4:	00632e63 	.word	0x00632e63

000026a8 <_i2cms>:
    26a8:	00000000 00200014 00000100 00000022     ...... ....."...
    26b8:	00d70000 007a1200 682f2e2e 732f6c70     ......z.../hpl/s
    26c8:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    26d8:	0000632e                                .c..

000026dc <Font3216>:
	...
    26e4:	fcffff3f fcffff3f 0c000030 0c000030     ?...?...0...0...
    26f4:	0c000030 0c000030 0c000030 0c000030     0...0...0...0...
    2704:	0c000030 0c000030 fcffff3f fcffff3f     0...0...?...?...
	...
    2734:	00000030 00000030 fcffff3f fcffff3f     0...0...?...?...
	...
    2764:	fcff013c fcff013c 0c800130 0c800130     <...<...0...0...
    2774:	0c800130 0c800130 0c800130 0c800130     0...0...0...0...
    2784:	0c800130 0c800130 0c80ff3f 0c80ff3f     0...0...?...?...
	...
    27a4:	3c000038 3c000038 0c800130 0c800130     8..<8..<0...0...
    27b4:	0c800130 0c800130 0c800130 0c800130     0...0...0...0...
    27c4:	0c800130 0c800130 fcffff3f fcffff3f     0...0...?...?...
	...
    27e4:	0080ff3f 0080ff3f 00800100 00800100     ?...?...........
    27f4:	00800100 00800100 00800100 00800100     ................
    2804:	00800100 00800100 fcffff3f fcffff3f     ........?...?...
	...
    2824:	3c80ff3f 3c80ff3f 0c800130 0c800130     ?..<?..<0...0...
    2834:	0c800130 0c800130 0c800130 0c800130     0...0...0...0...
    2844:	0c800130 0c800130 fcff0130 fcff0130     0...0...0...0...
	...
    2864:	fcffff3f fcffff3f 0c800130 0c800130     ?...?...0...0...
    2874:	0c800130 0c800130 0c800130 0c800130     0...0...0...0...
    2884:	0c800130 0c800130 fcff013c fcff013c     0...0...<...<...
	...
    28a4:	0000003c 0000003c 00000030 00000030     <...<...0...0...
    28b4:	00000030 00000030 00000030 00000030     0...0...0...0...
    28c4:	00000030 00000030 fcffff3f fcffff3f     0...0...?...?...
	...
    28e4:	fcffff3f fcffff3f 0c800130 0c800130     ?...?...0...0...
    28f4:	0c800130 0c800130 0c800130 0c800130     0...0...0...0...
    2904:	0c800130 0c800130 fcffff3f fcffff3f     0...0...?...?...
	...
    2924:	3c80ff3f 3c80ff3f 0c800130 0c800130     ?..<?..<0...0...
    2934:	0c800130 0c800130 0c800130 0c800130     0...0...0...0...
    2944:	0c800130 0c800130 fcffff3f fcffff3f     0...0...?...?...
	...
    2970:	f00ff00f f00ff00f 3000000c 3000000c     ...........0...0
    2980:	f00ff00f f00ff00f 00000000 00000000     ................
	...

0000299c <Font1608>:
	...
    29b0:	cc1f0000 00000c00 00000000 00080000     ................
    29c0:	00600030 00300008 00000060 fc032002     0.`...0.`.... ..
    29d0:	2002201e 201efc03 00002002 180e0000     . . ... . ......
    29e0:	ff3f0411 780c8410 00000000 8410000f     ..?....x........
    29f0:	c000380f 84187807 00007800 840f7800     .8...x...x...x..
    2a00:	2411c410 e400980e 08008400 00680008     ...$..........h.
    2a10:	00000070 00000000 00000000 00000000     p...............
    2a20:	e0070000 04201818 00000240 02400000     ...... .@.....@.
    2a30:	18180420 0000e007 00000000 40024002      ............@.@
    2a40:	f00f8001 40028001 00004002 80008000     .......@.@......
    2a50:	f80f8000 80008000 00008000 0d000100     ................
    2a60:	00000e00 00000000 00000000 80000000     ................
    2a70:	80008000 80008000 80008000 0c000000     ................
    2a80:	00000c00 00000000 00000000 06000000     ................
    2a90:	60001800 00068001 00200018 f0070000     ...`...... .....
    2aa0:	04100808 08080410 0000f007 04080000     ................
    2ab0:	fc1f0408 04000400 00000000 0c0e0000     ................
    2ac0:	24101410 84114410 00000c0e 180c0000     ...$.D..........
    2ad0:	04110410 88120411 0000700c e0000000     .........p......
    2ae0:	24042003 fc1f2408 00002400 981f0000     . .$.$...$......
    2af0:	04118410 88100411 00007010 f0070000     .........p......
    2b00:	04118808 88180411 00007000 001c0000     .........p......
    2b10:	fc100010 001c0013 00000010 380e0000     ...............8
    2b20:	84104411 44118410 0000380e 00070000     .D.....D.8......
    2b30:	44108c08 88084410 0000f007 00000000     ...D.D..........
    2b40:	0c030000 00000c03 00000000 00000000     ................
    2b50:	06010100 00000000 00000000 80000000     ................
    2b60:	20024001 08081004 00000410 20022002     .@. ......... . 
    2b70:	20022002 20022002 00002002 04100000     . . . . . ......
    2b80:	10040808 40012002 00008000 000e0000     ..... .@........
    2b90:	0c100012 80106c10 0000000f 180ce003     .....l..........
    2ba0:	2414e413 2808c417 0000d007 3c000400     ...$...(.......<
    2bb0:	401cc403 e4004007 04001c00 fc1f0410     ...@.@..........
    2bc0:	04110411 880e0411 00007000 180ce003     .........p......
    2bd0:	04100410 08100410 0000101c fc1f0410     ................
    2be0:	04100410 08080410 0000f007 fc1f0410     ................
    2bf0:	04110411 0410c417 00001808 fc1f0410     ................
    2c00:	00110411 0010c017 00000008 180ce003     ................
    2c10:	04100410 781c4410 00004000 fc1f0410     .....D.x.@......
    2c20:	80008410 84108000 0410fc1f 04100000     ................
    2c30:	fc1f0410 04100410 00000000 01000300     ................
    2c40:	01100110 0010fe1f 00000010 fc1f0410     ................
    2c50:	80030411 1c186414 00000410 fc1f0410     .....d..........
    2c60:	04000410 04000400 00000c00 fc1f0410     ................
    2c70:	fc00001f fc1f001f 00000410 fc1f0410     ................
    2c80:	0003040c 1810e000 0010fc1f 0808f007     ................
    2c90:	04100410 08080410 0000f007 fc1f0410     ................
    2ca0:	80108410 80108010 0000000f 1808f007     ................
    2cb0:	24102410 0a081c10 0000f207 fc1f0410     .$.$............
    2cc0:	00110411 3011c011 04000c0e 1c0e0000     .......0........
    2cd0:	84100411 44108410 0000381c 00100018     .......D.8......
    2ce0:	fc1f0410 00100410 00000018 f81f0010     ................
    2cf0:	04000410 04100400 0010f81f 001e0010     ................
    2d00:	1c00e011 80137000 0010001c 3c10c01f     .....p.........<
    2d10:	001fe000 3c10e000 0000c01f 0c180410     .......<........
    2d20:	c0013416 3416c001 04100c18 001c0010     .4.....4........
    2d30:	fc000413 001c0413 00000010 1c100408     ................
    2d40:	84106410 041c0413 00001810 00000000     .d..............
    2d50:	fe7f0000 02400240 00000240 00300000     ....@.@.@.....0.
    2d60:	8003000c 1c006000 00000300 02400000     .....`........@.
    2d70:	02400240 0000fe7f 00000000 00000000     @.@.............
    2d80:	00400020 00400040 00000020 01000100      .@.@.@. .......
    2d90:	01000100 01000100 01000100 00400000     ..............@.
    2da0:	00200040 00000000 00000000 98000000     @. .............
    2db0:	44012401 44014401 0400fc00 fc1f0010     .$.D.D.D........
    2dc0:	04018800 88000401 00007000 70000000     .........p.....p
    2dd0:	04018800 04010401 00008800 70000000     ...............p
    2de0:	04018800 08110401 0400fc1f f8000000     ................
    2df0:	44014401 44014401 0000c800 04010000     .D.D.D.D........
    2e00:	fc0f0401 04110411 00180011 d6000000     ................
    2e10:	29012901 c9012901 00000601 fc1f0410     .).).)..........
    2e20:	00018400 04010001 0400fc00 04010000     ................
    2e30:	fc190419 04000400 00000000 03000000     ................
    2e40:	01010100 fe190119 00000000 fc1f0410     ................
    2e50:	40002400 0c01b401 00000401 04100000     .$.@............
    2e60:	fc1f0410 04000400 00000000 fc010401     ................
    2e70:	00010401 0401fc01 fc000001 fc010401     ................
    2e80:	00018400 04010001 0400fc00 f8000000     ................
    2e90:	04010401 04010401 0000f800 ff010101     ................
    2ea0:	04018500 88000401 00007000 70000000     .........p.....p
    2eb0:	04018800 05010401 0100ff01 04010401     ................
    2ec0:	8400fc01 00010401 00008001 cc000000     ................
    2ed0:	24012401 24012401 00009801 00010000     .$.$.$.$........
    2ee0:	f8070001 04010401 00000000 f8010001     ................
    2ef0:	04000400 08010400 0400fc01 80010001     ................
    2f00:	0c007001 60011000 00018001 0c01f001     .p.....`........
    2f10:	c0013000 0c013000 0001f001 04010000     .0...0..........
    2f20:	74008c01 8c017001 00000401 81010101     ...t.p..........
    2f30:	0e007101 60011800 00018001 84010000     .q.....`........
    2f40:	34010c01 84014401 00000c01 00000000     ...4.D..........
    2f50:	00000000 fc3e0001 02400240 00000000     ......>.@.@.....
    2f60:	00000000 0000ffff 00000000 02400000     ..............@.
    2f70:	fc3e0240 00000001 00000000 00600000     @.>...........`.
    2f80:	00800080 00400040 00200020 00756c25     ....@.@. . .%lu.

00002f90 <_global_impure_ptr>:
    2f90:	20000004                                ... 

00002f94 <__sf_fake_stderr>:
	...

00002fb4 <__sf_fake_stdin>:
	...

00002fd4 <__sf_fake_stdout>:
	...
    2ff4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3004:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3014:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3024:	00006665                                ef..

00003028 <_init>:
    3028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    302e:	bc08      	pop	{r3}
    3030:	469e      	mov	lr, r3
    3032:	4770      	bx	lr

00003034 <__init_array_start>:
    3034:	000000dd 	.word	0x000000dd

00003038 <_fini>:
    3038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    303e:	bc08      	pop	{r3}
    3040:	469e      	mov	lr, r3
    3042:	4770      	bx	lr

00003044 <__fini_array_start>:
    3044:	000000b5 	.word	0x000000b5
